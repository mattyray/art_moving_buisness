    ===== Dockerfile =====
    # Use official Python image as base
    FROM python:3.10.4-slim-bullseye

    # Set environment variables
    ENV PIP_DISABLE_PIP_VERSION_CHECK 1
    ENV PYTHONDONTWRITEBYTECODE 1
    ENV PYTHONUNBUFFERED 1

    # Set work directory
    WORKDIR /code

    # Install dependencies
    COPY ./requirements.txt .
    RUN pip install --no-cache-dir -r requirements.txt

    # Copy project files
    COPY . .

    # Run Gunicorn
    CMD ["sh", "-c", "gunicorn django_project.wsgi --bind 0.0.0.0:${PORT:-8000}"]
    ===== docker-compose.yml =====
    services:
    web:
        build: .
        command: python manage.py runserver 0.0.0.0:8080  # Run Django on port 8080
        ports:
        - "8080:8080"  # Maps container port 8080 to localhost:8080
        depends_on:
        db:
            condition: service_healthy  # Ensures DB is ready before Django starts
        environment:
        - "DJANGO_DEBUG=True"
        - "DJANGO_SECURE_SSL_REDIRECT=False"
        - "DJANGO_SECURE_HSTS_SECONDS=0"
        - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
        - "DJANGO_SECURE_HSTS_PRELOAD=False"
        - "DJANGO_SESSION_COOKIE_SECURE=False"
        - "DJANGO_CSRF_COOKIE_SECURE=False"
        - "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
        volumes:
        - .:/code    # Mounts your project directory into the container
        networks:
        - art_moving_network

    db:
        image: postgres:15  # Upgraded to latest stable version
        container_name: art_moving_db
        restart: always
        volumes:
        - postgres_data:/var/lib/postgresql/data/
        environment:
        POSTGRES_DB: art_moving
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres  # âœ… Secure authentication
        healthcheck:  # Ensures DB is ready before Django starts
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        retries: 5
        networks:
        - art_moving_network

    volumes:
    postgres_data:

    networks:
    art_moving_network:
    ===== docker-compose-prod.yml =====
    services:
    web:
        build: .
        command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
        ports:
        - "8000:8000"
        depends_on:
        db:
            condition: service_healthy
        environment:
        - "DJANGO_DEBUG=False"
        - "DJANGO_SECURE_SSL_REDIRECT=True"
        - "DJANGO_SECURE_HSTS_SECONDS=2592000"  # 30 days
        - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
        - "DJANGO_SECURE_HSTS_PRELOAD=True"
        - "DJANGO_SESSION_COOKIE_SECURE=True"
        - "DJANGO_CSRF_COOKIE_SECURE=True"
        - "PORT=8000"  # Needed for Heroku
        - "DATABASE_URL=${DATABASE_URL}"
    db:
        image: postgres:15
        volumes:
        - postgres_data:/var/lib/postgresql/data
        environment:
        - POSTGRES_HOST_AUTH_METHOD=trust
        healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 10s
        retries: 5
        timeout: 5s

    volumes:
    postgres_data:
    ===== heroku.yml =====
    build:
    docker:
        web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

    release:
    image: web
    command:
        - python manage.py migrate  # Runs database migrations
        - python manage.py collectstatic --noinput  # Collects static files

    run:
    web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app
    ===== requirements.txt =====
    asgiref==3.8.1
    Django==5.1.6
    psycopg2-binary==2.9.10
    sqlparse==0.5.3
    django-crispy-forms
    crispy-bootstrap5
    whitenoise
    gunicorn
    django-environ 
    pandas
    django-import-export
    ===== manage.py =====
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys


    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)


    if __name__ == '__main__':
        main()


    ===== accounts/models.py =====
    from django.contrib.auth.models import AbstractUser
    from django.db import models


    class CustomUser(AbstractUser):
        pass

    ===== accounts/views.py =====
    from django.urls import reverse_lazy
    from django.views import generic
    from django.contrib.auth import logout
    from django.shortcuts import redirect, render
    from .forms import CustomUserCreationForm
    from django.contrib.auth import login

    def custom_logout(request):
        """Logs out the user and redirects to the homepage."""
        print("ðŸš€ custom_logout was called!")
        request.session.flush()  # Clears session data manually
        logout(request)
        return redirect("/")  # Redirect to the root URL explicitly

    class SignupPageView(generic.CreateView):
        """Handles user sign-up using Djangoâ€™s built-in authentication system."""
        form_class = CustomUserCreationForm
        success_url = reverse_lazy("login")  # Redirect to login page after sign-up
        template_name = "registration/signup.html"


    ===== accounts/forms.py =====
    from django.contrib.auth import get_user_model
    from django.contrib.auth.forms import UserCreationForm, UserChangeForm


    class CustomUserCreationForm(UserCreationForm):
        class Meta:
            model = get_user_model()
            fields = (
                "email",
                "username",
            )


    class CustomUserChangeForm(UserChangeForm):
        class Meta:
            model = get_user_model()
            fields = (
                "email",
                "username",
            )

    ===== accounts/urls.py =====
    from django.urls import path
    from .views import SignupPageView, custom_logout

    urlpatterns = [
        path("signup/", SignupPageView.as_view(), name="signup"),
        path("logout/", custom_logout, name="logout"),
    ]


    ===== accounts/admin.py =====
    from django.contrib import admin
    from django.contrib.auth import get_user_model
    from django.contrib.auth.admin import UserAdmin

    from .forms import CustomUserCreationForm, CustomUserChangeForm

    CustomUser = get_user_model()


    class CustomUserAdmin(UserAdmin):
        add_form = CustomUserCreationForm
        form = CustomUserChangeForm
        model = CustomUser
        list_display = [
            "email",
            "username",
            "is_superuser",
        ]


    admin.site.register(CustomUser, CustomUserAdmin)

    ===== clients/models.py =====
    from django.db import models

    class Client(models.Model):
        name = models.CharField(max_length=255)
        email = models.EmailField(blank=True, null=True)  # ðŸ‘ˆ Allow blanks
        phone = models.CharField(max_length=50, blank=True, null=True)
        address = models.CharField(max_length=255, blank=True, null=True)

        def __str__(self):
            return self.name


    ===== clients/views.py =====
    from django.shortcuts import render, get_object_or_404, redirect
    from django.contrib.auth.decorators import login_required
    from .models import Client
    from .forms import ClientForm

    @login_required
    def client_list(request):
        query = request.GET.get('q', '')
        clients = Client.objects.all()
        if query:
            clients = clients.filter(name__icontains=query)
        context = {'clients': clients, 'query': query}
        return render(request, 'clients/client_list.html', context)

    @login_required
    def client_detail(request, client_id):
        client = get_object_or_404(Client, id=client_id)
        # Work orders will be available through the reverse relationship: client.work_orders.all()
        context = {'client': client}
        return render(request, 'clients/client_detail.html', context)

    @login_required
    def client_create(request):
        if request.method == 'POST':
            form = ClientForm(request.POST)
            if form.is_valid():
                form.save()
                return redirect('client_list')
        else:
            form = ClientForm()
        context = {'form': form}
        return render(request, 'clients/client_form.html', context)

    @login_required
    def client_edit(request, client_id):
        client = get_object_or_404(Client, id=client_id)
        if request.method == 'POST':
            form = ClientForm(request.POST, instance=client)
            if form.is_valid():
                form.save()
                return redirect('client_detail', client_id=client.id)
        else:
            form = ClientForm(instance=client)
        context = {'form': form, 'client': client}
        return render(request, 'clients/client_form.html', context)


    ===== clients/forms.py =====
    from django import forms
    from .models import Client

    class ClientForm(forms.ModelForm):
        class Meta:
            model = Client
            fields = ['name', 'email', 'phone', 'address']


    ===== clients/urls.py =====
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.client_list, name='client_list'),
        path('create/', views.client_create, name='client_create'),
        path('<int:client_id>/', views.client_detail, name='client_detail'),
        path('edit/<int:client_id>/', views.client_edit, name='client_edit'),
    ]


    ===== clients/admin.py =====
    from django.contrib import admin
    from .models import Client

    from import_export.admin import ImportExportModelAdmin
    from .resources import ClientResource

    @admin.register(Client)
    class ClientAdmin(ImportExportModelAdmin):
        resource_class = ClientResource
        list_display = ('name', 'email', 'phone', 'address')





    ===== invoices/models.py =====
    import random
    from django.db import models
    from django.utils import timezone

    class Invoice(models.Model):
        STATUS_CHOICES = [
            ('unpaid', 'Unpaid'),
            ('paid', 'Paid'),
            ('overdue', 'Overdue'),
        ]
        
        invoice_number = models.CharField(max_length=50, unique=True, blank=True)
        client = models.ForeignKey('clients.Client', on_delete=models.CASCADE, related_name='invoices')
        # Optional: link to a work order
        work_order = models.ForeignKey(
            'workorders.WorkOrder',
            on_delete=models.SET_NULL,
            null=True,
            blank=True,
            related_name='invoices'
        )
        date_created = models.DateField(default=timezone.now)
        due_date = models.DateField()
        amount = models.DecimalField(max_digits=10, decimal_places=2)
        status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='unpaid')
        notes = models.TextField(blank=True, null=True)

        def save(self, *args, **kwargs):
            if not self.invoice_number:
                # Auto-generate a unique invoice number, for example using date and a random number
                self.invoice_number = f"INV-{timezone.now().strftime('%Y%m%d')}-{random.randint(1000, 9999)}"
            super().save(*args, **kwargs)

        def __str__(self):
            return f"Invoice {self.invoice_number} - {self.client.name}"


    ===== invoices/views.py =====
    from django.shortcuts import render, redirect, get_object_or_404
    from django.http import JsonResponse, HttpResponse
    from django.db.models import Q
    from django.contrib.auth.decorators import login_required
    from django.contrib import messages
    from .models import Invoice
    from .forms import InvoiceForm
    from clients.models import Client
    from workorders.models import WorkOrder
    from django.utils import timezone

    @login_required
    def invoice_delete(request, invoice_id):
        invoice = get_object_or_404(Invoice, id=invoice_id)
        if request.method == "POST":
            invoice.delete()
            messages.success(request, "Invoice deleted successfully.")
            return redirect('invoice_list')
        return render(request, 'invoices/invoice_confirm_delete.html', {'invoice': invoice})

    @login_required
    def invoice_calendar_data(request):
        """Fetch invoices for the calendar (unpaid, overdue, paid)."""
        invoices = Invoice.objects.all()
        events = []

        for invoice in invoices:
            if invoice.status == "unpaid":
                events.append({
                    "title": f"Unpaid Invoice: {invoice.client.name}",
                    "start": invoice.due_date.isoformat(),
                    "color": "red",
                    "url": f"/invoices/{invoice.id}/",
                })
            elif invoice.status == "overdue":
                events.append({
                    "title": f"Overdue Invoice: {invoice.client.name}",
                    "start": invoice.due_date.isoformat(),
                    "color": "darkred",
                    "url": f"/invoices/{invoice.id}/",
                })
            elif invoice.status == "paid":
                events.append({
                    "title": f"Paid Invoice: {invoice.client.name}",
                    "start": invoice.due_date.isoformat(),  # Use due_date as a fallback
                    "color": "green",
                    "url": f"/invoices/{invoice.id}/",
                })
        return JsonResponse(events, safe=False)

    @login_required
    def invoice_list(request):
        query = request.GET.get('q', '')
        unpaid_invoices = Invoice.objects.filter(status='unpaid')
        paid_invoices = Invoice.objects.filter(status='paid')
        overdue_invoices = Invoice.objects.filter(status='overdue')
        
        if query:
            unpaid_invoices = unpaid_invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
            paid_invoices = paid_invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
            overdue_invoices = overdue_invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
        
        unpaid_invoices = unpaid_invoices.order_by('-date_created')[:3]
        paid_invoices = paid_invoices.order_by('-date_created')[:3]
        overdue_invoices = overdue_invoices.order_by('-date_created')[:3]
        
        context = {
            'query': query,
            'unpaid_invoices': unpaid_invoices,
            'paid_invoices': paid_invoices,
            'overdue_invoices': overdue_invoices,
        }
        return render(request, 'invoices/invoice_list.html', context)

    @login_required
    def invoice_detail(request, invoice_id):
        invoice = get_object_or_404(Invoice, id=invoice_id)
        context = {'invoice': invoice}
        return render(request, 'invoices/invoice_detail.html', context)

    @login_required
    def invoice_create(request):
        work_order_id = request.GET.get('work_order')
        pickup_addresses = None
        dropoff_addresses = None
        initial_data = {}

        if work_order_id:
            work_order = get_object_or_404(WorkOrder, id=work_order_id)
            # Check if an invoice already exists for this work order
            existing_invoice = Invoice.objects.filter(work_order=work_order).first()
            if existing_invoice:
                messages.error(request, "An invoice has already been created for this job.")
                return redirect('invoice_detail', invoice_id=existing_invoice.id)
            
            pickup_addresses = work_order.addresses.filter(address_type='pickup')
            dropoff_addresses = work_order.addresses.filter(address_type='dropoff')
            initial_data = {
                'client': work_order.client.id,
                'work_order': work_order.id,
                'amount': work_order.estimated_cost,
            }

        if request.method == 'POST':
            # Copy POST data to modify it
            data = request.POST.copy()
            if work_order_id:
                # Force the work_order field into POST data so the form always associates this invoice with the work order
                data['work_order'] = work_order.id
            form = InvoiceForm(data)
            if form.is_valid():
                invoice = form.save()
                return redirect('invoice_list')
        else:
            form = InvoiceForm(initial=initial_data)

        context = {
            'form': form,
            'pickup_addresses': pickup_addresses,
            'dropoff_addresses': dropoff_addresses,
        }
        return render(request, 'invoices/invoice_form.html', context)

    @login_required
    def invoice_update(request, invoice_id):
        invoice = get_object_or_404(Invoice, id=invoice_id)
        if request.method == 'POST':
            form = InvoiceForm(request.POST, instance=invoice)
            if form.is_valid():
                form.save()
                return redirect('invoice_detail', invoice_id=invoice.id)
        else:
            form = InvoiceForm(instance=invoice)
        context = {'form': form, 'invoice': invoice}
        return render(request, 'invoices/invoice_form.html', context)

    @login_required
    def mark_invoice_paid(request, invoice_id):
        invoice = get_object_or_404(Invoice, id=invoice_id)
        invoice.status = 'paid'
        invoice.save()
        messages.success(request, "Invoice marked as paid.")
        return redirect('invoice_list')

    @login_required
    def update_due_date(request, invoice_id):
        invoice = get_object_or_404(Invoice, id=invoice_id)
        if request.method == 'POST':
            new_due_date = request.POST.get('new_due_date')
            if new_due_date:
                invoice.due_date = new_due_date
                # Optionally, mark as paid:
                invoice.status = 'paid'
                invoice.save()
                messages.success(request, "Invoice due date updated and marked as paid.")
                return redirect('invoice_list')
            else:
                messages.error(request, "Please select a valid date.")
        context = {'invoice': invoice}
        return render(request, 'invoices/update_due_date.html', context)

    @login_required
    def get_workorders_for_client(request):
        client_id = request.GET.get('client_id')
        work_orders = WorkOrder.objects.filter(client_id=client_id).values('id', 'job_description', 'estimated_cost')
        return JsonResponse(list(work_orders), safe=False)

    @login_required
    def invoice_unpaid(request):
        query = request.GET.get('q', '')
        invoices = Invoice.objects.filter(status='unpaid').order_by('-date_created')
        if query:
            invoices = invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
        context = {'invoices': invoices, 'query': query}
        return render(request, 'invoices/invoice_unpaid.html', context)

    @login_required
    def invoice_paid(request):
        query = request.GET.get('q', '')
        invoices = Invoice.objects.filter(status='paid').order_by('-date_created')
        if query:
            invoices = invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
        context = {'invoices': invoices, 'query': query}
        return render(request, 'invoices/invoice_paid.html', context)

    @login_required
    def invoice_overdue(request):
        query = request.GET.get('q', '')
        invoices = Invoice.objects.filter(status='overdue').order_by('-date_created')
        if query:
            invoices = invoices.filter(
                Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
            )
        context = {'invoices': invoices, 'query': query}
        return render(request, 'invoices/invoice_overdue.html', context)


    ===== invoices/forms.py =====
    from django import forms
    from .models import Invoice

    class InvoiceForm(forms.ModelForm):
        due_date = forms.DateField(
            widget=forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'placeholder': 'YYYY-MM-DD'
            })
        )
        
        class Meta:
            model = Invoice
            fields = [
                'client',
                'work_order',  # Optional: Remove if you don't need this link
                'due_date',
                'amount',
                'status',
                'notes',
            ]


    ===== invoices/urls.py =====
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.invoice_list, name='invoice_list'),
        path('create/', views.invoice_create, name='invoice_create'),
        path('<int:invoice_id>/', views.invoice_detail, name='invoice_detail'),
        path('<int:invoice_id>/edit/', views.invoice_update, name='invoice_update'),
        path('<int:invoice_id>/delete/', views.invoice_delete, name='invoice_delete'),
        path('unpaid/', views.invoice_unpaid, name='invoice_unpaid'),
        path('paid/', views.invoice_paid, name='invoice_paid'),
        path('overdue/', views.invoice_overdue, name='invoice_overdue'),
        path('ajax/get_workorders/', views.get_workorders_for_client, name='get_workorders_for_client'),
        path('<int:invoice_id>/mark_paid/', views.mark_invoice_paid, name='mark_invoice_paid'),
        path('<int:invoice_id>/update_due_date/', views.update_due_date, name='update_due_date'),
        path('calendar-data/invoices/', views.invoice_calendar_data, name='invoice_calendar_data'),
    ]


    ===== invoices/admin.py =====
    from django.contrib import admin
    from .models import Invoice

    admin.site.register(Invoice)


    ===== pages/models.py =====
    from django.db import models

    # Create your models here.


    ===== pages/views.py =====
    from django.contrib.auth.mixins import LoginRequiredMixin
    from django.views.generic import TemplateView

    class HomePageView(LoginRequiredMixin, TemplateView):
        template_name = 'home.html'


    ===== pages/urls.py =====
    from django.urls import path
    from .views import HomePageView

    urlpatterns = [
        path("", HomePageView.as_view(), name="home"),  # Ensure this exists!
    ]


    ===== pages/admin.py =====
    from django.contrib import admin

    # Register your models here.


    ===== workorders/models.py =====
    from django.db import models
    from django.conf import settings

    class WorkOrder(models.Model):
        STATUS_CHOICES = [
            ('pending', 'Pending'),
            ('in_progress', 'In Progress'),
            ('completed', 'Completed'),
        ]
        # Use a lazy reference for the Client model to avoid circular imports.
        client = models.ForeignKey('clients.Client', on_delete=models.CASCADE, related_name='work_orders')
        job_description = models.TextField()
        estimated_cost = models.DecimalField(max_digits=10, decimal_places=2)
        # Using the built-in user model; this is safe as it's provided by Django.
        assigned_to = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
        status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
        completed_at = models.DateTimeField(blank=True, null=True)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)

        def __str__(self):
            # Assumes client is always provided.
            return f"WorkOrder #{self.id} for {self.client.name}"

        def update_status(self):
            if self.status == 'completed':
                return

            pickup = self.addresses.filter(address_type='pickup').first()
            dropoff = self.addresses.filter(address_type='dropoff').first()

            if pickup and pickup.scheduled_date and dropoff and dropoff.scheduled_date:
                self.status = 'in_progress'
            else:
                self.status = 'pending'

    class WorkOrderAddress(models.Model):
        ADDRESS_TYPE_CHOICES = [
            ('pickup', 'Pickup'),
            ('dropoff', 'Dropoff'),
        ]
        # Since this model is within the same file, a direct reference is fine.
        work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='addresses')
        address_type = models.CharField(max_length=10, choices=ADDRESS_TYPE_CHOICES)
        address = models.CharField(max_length=255)
        scheduled_date = models.DateField(blank=True, null=True)

        def __str__(self):
            return f"{self.get_address_type_display()} Address for WorkOrder #{self.work_order.id}"

    class JobAttachment(models.Model):
        # Direct reference is safe here.
        work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='attachments')
        file = models.FileField(upload_to='job_attachments/')
        uploaded_at = models.DateTimeField(auto_now_add=True)

        def __str__(self):
            return f"Attachment {self.id} for WorkOrder {self.work_order.id}"

    class JobNote(models.Model):
        # Direct reference is safe here.
        work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='notes')
        note = models.TextField()
        created_at = models.DateTimeField(auto_now_add=True)

        def __str__(self):
            return f"Note {self.id} for WorkOrder {self.work_order.id}"


    ===== workorders/views.py =====
    from django.shortcuts import render, redirect, get_object_or_404
    from django.utils import timezone
    from django.http import HttpResponseRedirect, JsonResponse
    from django.urls import reverse
    from django.contrib.auth.decorators import login_required
    from django.contrib import messages
    from django.db.models import Q

    from .models import WorkOrder, WorkOrderAddress, JobAttachment, JobNote
    from .forms import WorkOrderForm, WorkOrderAddressFormSet, JobAttachmentForm, JobNoteForm


    @login_required
    def workorder_calendar_data(request):
        """Returns pickup/dropoff events and pending/completed work orders for calendar display."""
        events = []

        # Scheduled pickups and dropoffs (only for non-completed work orders)
        scheduled_addresses = WorkOrderAddress.objects.filter(
            scheduled_date__isnull=False,
            work_order__status__in=["pending", "in_progress"]
        )
        for addr in scheduled_addresses:
            label = "Pickup" if addr.address_type == "pickup" else "Dropoff"
            events.append({
                "title": f"{label}: {addr.work_order.client.name}",
                "start": addr.scheduled_date.isoformat(),
                "color": "#4a90e2" if label == "Pickup" else "#f39c12",
                "url": f"/workorders/detail/{addr.work_order.id}/",
            })

        # Pending work orders (no address scheduled)
        pending_orders = WorkOrder.objects.exclude(
            addresses__scheduled_date__isnull=False
        ).filter(status__in=["pending", "in_progress"])
        for wo in pending_orders:
            events.append({
                "title": f"Pending: {wo.client.name}",
                "start": wo.created_at.date().isoformat(),
                "color": "gray",
                "url": f"/workorders/detail/{wo.id}/",
            })

        # Completed work orders (use completed_at date)
        completed_orders = WorkOrder.objects.filter(status='completed', completed_at__isnull=False)
        for wo in completed_orders:
            events.append({
                "title": f"Completed: {wo.client.name}",
                "start": wo.completed_at.date().isoformat(),
                "color": "green",
                "url": f"/workorders/detail/{wo.id}/",
            })

        return JsonResponse(events, safe=False)


    @login_required
    def workorder_list(request):
        query = request.GET.get('q', '')

        pending_jobs = WorkOrder.objects.exclude(addresses__scheduled_date__isnull=False).filter(status__in=["pending", "in_progress"])
        scheduled_jobs = WorkOrder.objects.filter(addresses__scheduled_date__isnull=False, status__in=["pending", "in_progress"]).distinct()
        completed_jobs = WorkOrder.objects.filter(status='completed')

        if query:
            pending_jobs = pending_jobs.filter(client__name__icontains=query)
            scheduled_jobs = scheduled_jobs.filter(client__name__icontains=query)
            completed_jobs = completed_jobs.filter(client__name__icontains=query)

        context = {
            'query': query,
            'pending_jobs': pending_jobs.order_by('-updated_at')[:3],
            'scheduled_jobs': scheduled_jobs.order_by('-updated_at')[:3],
            'completed_jobs': completed_jobs.order_by('-updated_at')[:3],
        }
        return render(request, 'workorders/workorder_list.html', context)


    @login_required
    def schedule_workorder(request, job_id):
        return redirect('workorder_edit', job_id=job_id)


    @login_required
    def workorder_create(request):
        if request.method == 'POST':
            form = WorkOrderForm(request.POST)
            address_formset = WorkOrderAddressFormSet(request.POST, prefix="addresses")
            attachment_form = JobAttachmentForm(request.POST, request.FILES)
            note_form = JobNoteForm(request.POST)

            if form.is_valid() and address_formset.is_valid():
                workorder = form.save()
                address_formset.instance = workorder
                address_formset.save()

                workorder.update_status()
                workorder.save()

                if attachment_form.is_valid():
                    attachment = attachment_form.save(commit=False)
                    attachment.work_order = workorder
                    attachment.save()

                if note_form.is_valid():
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()

                return redirect('workorder_list')
        else:
            form = WorkOrderForm()
            address_formset = WorkOrderAddressFormSet(prefix="addresses")
            attachment_form = JobAttachmentForm()
            note_form = JobNoteForm()

        context = {
            'form': form,
            'address_formset': address_formset,
            'attachment_form': attachment_form,
            'note_form': note_form,
        }
        return render(request, 'workorders/workorder_form.html', context)


    @login_required
    def workorder_edit(request, job_id):
        workorder = get_object_or_404(WorkOrder, id=job_id)
        if request.method == 'POST':
            form = WorkOrderForm(request.POST, instance=workorder)
            address_formset = WorkOrderAddressFormSet(request.POST, instance=workorder, prefix="addresses")
            attachment_form = JobAttachmentForm(request.POST, request.FILES)
            note_form = JobNoteForm(request.POST)

            if form.is_valid() and address_formset.is_valid():
                form.save()
                address_formset.save()

                workorder.update_status()
                workorder.save()

                if attachment_form.is_valid():
                    attachment = attachment_form.save(commit=False)
                    attachment.work_order = workorder
                    attachment.save()

                if note_form.is_valid():
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()

                if 'create_invoice' in request.POST:
                    return redirect('/invoices/create/?work_order=' + str(workorder.id))
                return redirect("workorder_detail", job_id=workorder.id)
        else:
            form = WorkOrderForm(instance=workorder)
            address_formset = WorkOrderAddressFormSet(instance=workorder, prefix="addresses")
            attachment_form = JobAttachmentForm()
            note_form = JobNoteForm()

        context = {
            'form': form,
            'address_formset': address_formset,
            'attachment_form': attachment_form,
            'note_form': note_form,
            'job': workorder,
        }
        return render(request, "workorders/workorder_form.html", context)


    @login_required
    def workorder_delete(request, job_id):
        workorder = get_object_or_404(WorkOrder, id=job_id)
        if request.method == 'POST':
            workorder.delete()
            messages.success(request, "Work order deleted successfully.")
            return redirect('workorder_list')
        return render(request, 'workorders/workorder_confirm_delete.html', {'workorder': workorder})


    @login_required
    def mark_scheduled(request, job_id):
        return redirect('workorder_edit', job_id=job_id)


    @login_required
    def mark_completed(request, job_id):
        workorder = get_object_or_404(WorkOrder, id=job_id)
        if workorder.status in ['pending', 'in_progress']:
            workorder.status = 'completed'
            workorder.completed_at = timezone.now()
            workorder.save()
            messages.success(request, "Work order marked as completed.")
        return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('workorder_list')))


    @login_required
    def workorder_detail(request, job_id):
        workorder = get_object_or_404(WorkOrder, id=job_id)
        attachments = workorder.attachments.all()
        notes = workorder.notes.all()

        if request.method == 'POST':
            if 'attachment_submit' in request.POST:
                attachment_form = JobAttachmentForm(request.POST, request.FILES)
                if attachment_form.is_valid():
                    attachment = attachment_form.save(commit=False)
                    attachment.work_order = workorder
                    attachment.save()
                    return redirect('workorder_detail', job_id=workorder.id)
            elif 'note_submit' in request.POST:
                note_form = JobNoteForm(request.POST)
                if note_form.is_valid():
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()
                    return redirect('workorder_detail', job_id=workorder.id)
        else:
            attachment_form = JobAttachmentForm()
            note_form = JobNoteForm()

        context = {
            'job': workorder,
            'attachments': attachments,
            'notes': notes,
            'attachment_form': attachment_form,
            'note_form': note_form,
        }
        return render(request, 'workorders/workorder_detail.html', context)


    @login_required
    def pending_jobs_view(request):
        query = request.GET.get('q', '')
        jobs = WorkOrder.objects.exclude(addresses__scheduled_date__isnull=False).filter(status__in=["pending", "in_progress"])
        if query:
            jobs = jobs.filter(client__name__icontains=query)
        return render(request, 'workorders/pending_jobs.html', {'jobs': jobs, 'query': query})


    @login_required
    def scheduled_jobs_view(request):
        query = request.GET.get('q', '')
        jobs = WorkOrder.objects.filter(addresses__scheduled_date__isnull=False, status__in=["pending", "in_progress"]).distinct()
        if query:
            jobs = jobs.filter(client__name__icontains=query)
        return render(request, 'workorders/scheduled_jobs.html', {'jobs': jobs, 'query': query})


    @login_required
    def completed_jobs_view(request):
        query = request.GET.get('q', '')
        jobs = WorkOrder.objects.filter(status='completed')
        if query:
            jobs = jobs.filter(client__name__icontains=query)
        return render(request, 'workorders/completed_jobs.html', {'jobs': jobs, 'query': query})


    ===== workorders/forms.py =====
    from django import forms
    from django.forms import inlineformset_factory
    from django.apps import apps
    from .models import WorkOrder, WorkOrderAddress, JobAttachment, JobNote

    class WorkOrderForm(forms.ModelForm):
        # Set queryset to None initially; we'll assign it in __init__ using a lazy lookup.
        client = forms.ModelChoiceField(
            queryset=None,
            widget=forms.Select(attrs={
                'class': 'form-control select2',
                'data-placeholder': 'Search or select a client'
            }),
            label="Client"
        )

        class Meta:
            model = WorkOrder
            fields = [
                'client',
                'job_description',
                'estimated_cost',
                'assigned_to',
            ]

        def __init__(self, *args, **kwargs):
            super(WorkOrderForm, self).__init__(*args, **kwargs)
            # Lazy import of Client to avoid circular dependency
            Client = apps.get_model('clients', 'Client')
            self.fields['client'].queryset = Client.objects.all()


    class WorkOrderAddressForm(forms.ModelForm):
        scheduled_date = forms.DateField(
            required=False,
            widget=forms.DateInput(attrs={
                'class': 'form-control datepicker',
                'placeholder': 'YYYY-MM-DD'
            })
        )

        class Meta:
            model = WorkOrderAddress
            fields = ['address_type', 'address', 'scheduled_date']
            widgets = {
                'address': forms.TextInput(attrs={'class': 'form-control'}),
            }

    WorkOrderAddressFormSet = inlineformset_factory(
        WorkOrder, WorkOrderAddress,
        form=WorkOrderAddressForm,
        extra=4,
        can_delete=True
    )

    class JobAttachmentForm(forms.ModelForm):
        file = forms.FileField(required=False)

        class Meta:
            model = JobAttachment
            fields = ['file']

    class JobNoteForm(forms.ModelForm):
        note = forms.CharField(required=False, widget=forms.Textarea, label="Note")

        class Meta:
            model = JobNote
            fields = ['note']


    ===== workorders/urls.py =====
    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.workorder_list, name='workorder_list'),
        path('create/', views.workorder_create, name='workorder_create'),
        path('edit/<int:job_id>/', views.workorder_edit, name='workorder_edit'),
        path('delete/<int:job_id>/', views.workorder_delete, name='workorder_delete'),

        path('pending/', views.pending_jobs_view, name='pending_jobs'),
        path('scheduled/', views.scheduled_jobs_view, name='scheduled_jobs'),
        path('completed/', views.completed_jobs_view, name='completed_jobs'),

        path('mark_completed/<int:job_id>/', views.mark_completed, name='mark_completed'),

        path('detail/<int:job_id>/', views.workorder_detail, name='workorder_detail'),

        # Calendar JSON API
        path("calendar-data/workorders/", views.workorder_calendar_data, name="workorder_calendar_data"),
    ]


    ===== workorders/admin.py =====
    from django.contrib import admin
    from .models import WorkOrder, WorkOrderAddress, JobAttachment, JobNote

    class WorkOrderAddressInline(admin.TabularInline):
        model = WorkOrderAddress
        extra = 1  # Number of extra empty forms

    class WorkOrderAdmin(admin.ModelAdmin):
        inlines = [WorkOrderAddressInline]
        list_display = ['id', 'client', 'job_description', 'status']

    admin.site.register(WorkOrder, WorkOrderAdmin)
    admin.site.register(JobAttachment)
    admin.site.register(JobNote)


    ===== django_project/settings.py =====
    from environ import Env
    from pathlib import Path
    import os

    # Initialize environment variables
    env = Env()
    Env.read_env()

    # Base directory
    BASE_DIR = Path(__file__).resolve().parent.parent

    # âœ… Security settings
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Required for Heroku

    # Secret Key & Debug Mode
    SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
    DEBUG = env.bool("DJANGO_DEBUG", default=False)

    # âœ… Allowed Hosts
    ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
        "localhost",
        "127.0.0.1",
        "art-moving-buisness-0a734245a61f.herokuapp.com",
        # "your-custom-domain.com",
        # "www.your-custom-domain.com"
    ])

    # âœ… Installed Apps
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',

        # Custom apps
        'accounts.apps.AccountsConfig',
        'pages.apps.PagesConfig',
        'workorders',
        'clients',
        'invoices',

        # Third-party packages
        'crispy_forms',
        'crispy_bootstrap5',
        'import_export',

    ]

    # âœ… Middleware
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'whitenoise.middleware.WhiteNoiseMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    # âœ… URL Configuration
    ROOT_URLCONF = 'django_project.urls'

    # âœ… Templates
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [BASE_DIR / 'templates'],  # Include custom templates
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    # âœ… WSGI Application
    WSGI_APPLICATION = 'django_project.wsgi.application'

    # âœ… Database Configuration
    DATABASES = {
        "default": env.db_url("DATABASE_URL")
    }


    # âœ… Authentication
    AUTH_USER_MODEL = 'accounts.CustomUser'

    # âœ… Password Validation
    AUTH_PASSWORD_VALIDATORS = [
        {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
        {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
        {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
        {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
    ]

    # âœ… Localization
    LANGUAGE_CODE = 'en-us'
    TIME_ZONE = 'UTC'
    USE_I18N = True
    USE_TZ = True

    STATIC_URL = "/static/"
    STATICFILES_DIRS = [BASE_DIR / "static"]  # ðŸ‘ˆ crucial for collectstatic to find non-app static files
    STATIC_ROOT = BASE_DIR / "staticfiles"
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"

    # âœ… Default Primary Key
    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

    # âœ… Crispy Forms
    CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
    CRISPY_TEMPLATE_PACK = "bootstrap5"

    # âœ… Login & Logout
    LOGIN_REDIRECT_URL = 'home'
    LOGOUT_REDIRECT_URL = "/"  

    # âœ… Security Settings for Production
    if not DEBUG:
        SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
        SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)  # 30 days
        SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
        SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
        SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
        CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
    else:
        SECURE_SSL_REDIRECT = False
        SECURE_HSTS_SECONDS = 0
        SECURE_HSTS_INCLUDE_SUBDOMAINS = False
        SECURE_HSTS_PRELOAD = False
        SESSION_COOKIE_SECURE = False
        CSRF_COOKIE_SECURE = False


    STATICFILES_FINDERS = [
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    ]

    IMPORT_EXPORT_USE_TRANSACTIONS = True


    ===== django_project/urls.py =====
    from django.contrib import admin
    from django.urls import path, include
    from django.conf.urls.static import static
    from django.conf import settings

    urlpatterns = [
        path("admin/", admin.site.urls),
        path("accounts/", include("accounts.urls")),         # Custom signup and logout routes
        path("accounts/", include("django.contrib.auth.urls")),  # Login, password reset, etc.
        path("", include("pages.urls")),           
        path("workorders/", include("workorders.urls")),  # Work Orders routes
        path("clients/", include("clients.urls")),
        path("invoices/", include("invoices.urls")),
        path("workorders/", include("workorders.urls")),
        path("invoices/", include("invoices.urls")),

    ]


    if settings.DEBUG:
        urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)




    ===== django_project/asgi.py =====
    """
    ASGI config for django_project project.

    It exposes the ASGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
    """

    import os

    from django.core.asgi import get_asgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

    application = get_asgi_application()


    ===== django_project/wsgi.py =====
    """
    WSGI config for django_project project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
    """

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

    application = get_wsgi_application()


    ===== templates/clients/client_detail.html =====
    {% extends "base.html" %}
    {% block title %}Client Detail{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Client: {{ client.name }}</h2>
    <div class="card shadow-sm mb-4">
        <div class="card-header">
        <h4>Contact Information</h4>
        </div>
        <div class="card-body">
        <p><strong>Email:</strong> {{ client.email }}</p>
        <p><strong>Phone:</strong> {{ client.phone }}</p>
        <p><strong>Address:</strong> {{ client.address }}</p>
        </div>
        <div class="card-footer">
        <a href="{% url 'client_edit' client.id %}" class="btn btn-warning">Edit Client</a>
        </div>
    </div>

    <!-- You can optionally add sections to display related work orders and invoices -->
    <div class="card shadow-sm mb-4">
        <div class="card-header">
        <h4>Work Orders</h4>
        </div>
        <div class="card-body">
        {% if client.work_orders.all %}
            <ul class="list-group">
            {% for order in client.work_orders.all %}
            <li class="list-group-item">
                <a href="{% url 'workorder_detail' order.id %}">Work Order #{{ order.id }}</a> - {{ order.get_status_display }}
            </li>
            {% endfor %}
            </ul>
        {% else %}
            <p>No work orders available.</p>
        {% endif %}
        </div>
    </div>
    </div>
    {% endblock %}


    ===== templates/clients/client_form.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}{% if client %}Edit Client{% else %}Add New Client{% endif %}{% endblock %}
    {% block content %}
    <div class="container">
    <h2>{% if client %}Edit Client{% else %}Add New Client{% endif %}</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-success">{% if client %}Update Client{% else %}Create Client{% endif %}</button>
    </form>
    <a href="{% url 'client_list' %}" class="btn btn-secondary mt-3">Back to Clients</a>
    </div>
    {% endblock %}


    ===== templates/clients/client_list.html =====
    {% extends "base.html" %}
    {% block title %}Clients{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Clients</h2>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <a href="{% url 'client_create' %}" class="btn btn-success mb-3">Add New Client</a>
    
    <!-- Clients Table Wrapped in a Card -->
    <div class="card shadow-sm">
        <div class="card-body">
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
            </tr>
            </thead>
            <tbody>
            {% for client in clients %}
            <tr>
                <td><a href="{% url 'client_detail' client.id %}">{{ client.name }}</a></td>
                <td>{{ client.email }}</td>
                <td>{{ client.phone }}</td>
                <td>{{ client.address }}</td>
            </tr>
            {% empty %}
            <tr>
                <td colspan="4">No clients found.</td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        </div>
    </div>
    </div>
    {% endblock %}


    ===== templates/registration/login.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}

    {% block title %}Login{% endblock %}

    {% block content %}
    <div class="container mt-4">
        <h2>Login</h2>
        <form method="post">
            {% csrf_token %}
            {{ form|crispy }}
            <button type="submit" class="btn btn-primary">Login</button>
        </form>
        <p class="mt-3">Don't have an account? <a href="{% url 'signup' %}">Sign up here</a>.</p>
    </div>
    {% endblock %}


    ===== templates/registration/logout.html =====
    {% extends "base.html" %}

    {% block title %}Logout{% endblock %}

    {% block content %}
    <div class="container text-center mt-4">
        <h2>You have been logged out</h2>
        <a href="{% url 'login' %}" class="btn btn-primary">Login Again</a>
    </div>
    {% endblock %}


    ===== templates/registration/signup.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}

    {% block title %}Sign Up{% endblock %}

    {% block content %}
    <div class="container mt-4">
        <h2>Sign Up</h2>
        <form method="post">
            {% csrf_token %}
            {{ form|crispy }}
            <button type="submit" class="btn btn-primary">Sign Up</button>
        </form>
        <p class="mt-3">Already have an account? <a href="{% url 'login' %}">Login here</a>.</p>
    </div>
    {% endblock %}


    ===== templates/home.html =====
    {% extends "base.html" %}
    {% block title %}Dashboard - Art Moving Business{% endblock %}
    {% block content %}
    <div class="container my-4">
    <div class="row justify-content-center">
        <!-- Work Orders Button (now white) -->
        <div class="col-md-3 col-12 text-center mb-3">
        <a href="{% url 'workorder_list' %}" class="btn btn-light btn-lg w-100 shadow-sm border">
            Work Orders<br>
            <small>Manage and track job progress</small>
        </a>
        </div>
        <!-- Clients Button (now white) -->
        <div class="col-md-3 col-12 text-center mb-3">
        <a href="{% url 'client_list' %}" class="btn btn-light btn-lg w-100 shadow-sm border">
            Clients<br>
            <small>View client database</small>
        </a>
        </div>
        <!-- Invoicing Button (now white) -->
        <div class="col-md-3 col-12 text-center mb-3">
        <a href="{% url 'invoice_list' %}" class="btn btn-light btn-lg w-100 shadow-sm border">
            Invoicing<br>
            <small>Generate and review invoices</small>
        </a>
        </div>
    </div>

    <!-- Calendar Section -->
    <div class="card mt-4 shadow-sm">
        <div class="card-header fw-bold">
        Calendar
        </div>
        <div class="card-body">
        <div id="calendar"></div>
        </div>
    </div>
    </div>
    {% endblock %}

    {% block extra_js %}
    <script>
    document.addEventListener("DOMContentLoaded", function () {
        var calendarEl = document.getElementById("calendar");
        if (!calendarEl) {
            console.error("Calendar element not found!");
            return;
        }

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: "dayGridMonth",
            height: 'auto',
            events: async function(fetchInfo, successCallback, failureCallback) {
                try {
                    const workordersResponse = await fetch("/workorders/calendar-data/workorders/");
                    const workorders = await workordersResponse.json();

                    const invoicesResponse = await fetch("/invoices/calendar-data/invoices/");
                    const invoices = await invoicesResponse.json();

                    const events = [...workorders, ...invoices];
                    successCallback(events);
                } catch (error) {
                    console.error("Calendar fetch error:", error);
                    failureCallback(error);
                }
            },
            eventClick: function(info) {
                if (info.event.url) {
                    window.location.href = info.event.url;
                    info.jsEvent.preventDefault();
                }
            }
        });

        calendar.render();
    });
    </script>
    {% endblock %}


    ===== templates/invoices/invoice_paid.html =====
    {% extends "base.html" %}
    {% block title %}Paid Invoices{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Paid Invoices</h2>
    
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">Paid Invoices</div>
        <div class="card-body">
        {% if invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No paid invoices found.</p>
        {% endif %}
        </div>
    </div>
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary mt-3">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    {% endblock %}


    ===== templates/invoices/invoice_unpaid.html =====
    {% extends "base.html" %}
    {% block title %}Unpaid Invoices{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Unpaid Invoices</h2>
    
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">Unpaid Invoices</div>
        <div class="card-body">
        {% if invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                <form method="post" action="{% url 'mark_invoice_paid' inv.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-success">Mark as Paid</button>
                </form>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No unpaid invoices found.</p>
        {% endif %}
        </div>
    </div>
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary mt-3">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    {% endblock %}


    ===== templates/invoices/invoice_confirm_delete.html =====
    {% extends "base.html" %}
    {% block title %}Delete Invoice{% endblock %}
    {% block content %}
    <div class="container">
    <h2>Delete Invoice {{ invoice.invoice_number }}</h2>
    <p>Are you sure you want to delete this invoice?</p>
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Yes, delete it</button>
        <a href="{% url 'invoice_detail' invoice.id %}" class="btn btn-secondary">Cancel</a>
    </form>
    </div>
    {% endblock %}


    ===== templates/invoices/invoice_overdue.html =====
    {% extends "base.html" %}
    {% block title %}Overdue Invoices{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Overdue Invoices</h2>
    
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">Overdue Invoices</div>
        <div class="card-body">
        {% if invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                <form method="post" action="{% url 'mark_invoice_paid' inv.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-success">Mark as Paid</button>
                </form>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No overdue invoices found.</p>
        {% endif %}
        </div>
    </div>
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary mt-3">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    {% endblock %}


    ===== templates/invoices/update_due_date.html =====
    {% extends "base.html" %}
    {% block title %}Update Due Date{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Update Invoice Due Date</h2>
    <form method="post">
        {% csrf_token %}
        <div class="mb-4">
        <label for="new_due_date">New Due Date:</label>
        <input type="text" name="new_due_date" id="new_due_date" class="form-control datepicker" placeholder="YYYY-MM-DD" required>
        </div>
        <button type="submit" class="btn btn-success">Update Due Date</button>
        <a href="{% url 'invoice_list' %}" class="btn btn-secondary">Cancel</a>
    </form>
    </div>
    {% block extra_js %}
    <script>
    document.addEventListener("DOMContentLoaded", function() {
    flatpickr(".datepicker", { dateFormat: "Y-m-d" });
    });
    </script>
    {% endblock %}
    {% endblock %}


    ===== templates/invoices/invoice_list.html =====
    {% extends "base.html" %}
    {% block title %}Invoice Overview{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Invoice Overview</h2>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <!-- Unpaid Invoices Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-danger text-white">
        <h4>Unpaid Invoices</h4>
        </div>
        <div class="card-body">
        {% if unpaid_invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in unpaid_invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                <form method="post" action="{% url 'mark_invoice_paid' inv.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-success">Mark as Paid</button>
                </form>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No unpaid invoices found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Paid Invoices Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">
        <h4>Paid Invoices</h4>
        </div>
        <div class="card-body">
        {% if paid_invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in paid_invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No paid invoices found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Overdue Invoices Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-warning text-white">
        <h4>Overdue Invoices</h4>
        </div>
        <div class="card-body">
        {% if overdue_invoices %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Client</th>
                <th>Amount</th>
                <th>Date Created</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for inv in overdue_invoices %}
            <tr>
                <td>{{ inv.invoice_number }}</td>
                <td>{{ inv.client.name }}</td>
                <td>${{ inv.amount }}</td>
                <td>{{ inv.date_created|date:"m-d-y" }}</td>
                <td>{{ inv.due_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                <button type="button" class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#dueDateModal" data-invoice-id="{{ inv.id }}">
                    Set Paid Date
                </button>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No overdue invoices found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Back Navigation -->
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>

    <!-- Due Date Modal -->
    <div class="modal fade" id="dueDateModal" tabindex="-1" aria-labelledby="dueDateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form method="post" id="dueDateForm">
        {% csrf_token %}
        <div class="modal-content">
            <div class="modal-header">
            <h5 class="modal-title" id="dueDateModalLabel">Set Paid Date</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
            <p>Select the paid date:</p>
            <input type="text" name="new_due_date" class="form-control datepicker" placeholder="m-d-y" required>
            </div>
            <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-success">Update Due Date</button>
            </div>
        </div>
        </form>
    </div>
    </div>

    {% block extra_js %}
    <script>
    document.addEventListener("DOMContentLoaded", function() {
    // Initialize Flatpickr for date inputs in the modal
    flatpickr(".datepicker", { dateFormat: "Y-m-d" });
    
    // Set the action URL for the due date modal based on the invoice ID
    var dueDateModal = document.getElementById('dueDateModal');
    dueDateModal.addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget;
        var invoiceId = button.getAttribute('data-invoice-id');
        var form = document.getElementById('dueDateForm');
        form.action = '/invoices/' + invoiceId + '/update_due_date/';
    });
    });
    </script>
    {% endblock %}
    {% endblock %}


    ===== templates/invoices/invoice_form.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}{% if invoice %}Edit Invoice{% else %}Create Invoice{% endif %}{% endblock %}

    {% block content %}
    <div class="container">
    <h2 class="mb-4">{% if invoice %}Edit Invoice{% else %}Create Invoice{% endif %}</h2>
    
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <!-- Display Work Order Addresses if provided -->
    {% if pickup_addresses %}
        <h4>Pickup Addresses</h4>
        <ul>
        {% for address in pickup_addresses %}
            <li>{{ address.address }}</li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No pickup addresses found.</p>
    {% endif %}
    
    {% if dropoff_addresses %}
        <h4>Dropoff Addresses</h4>
        <ul>
        {% for address in dropoff_addresses %}
            <li>{{ address.address }}</li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No dropoff addresses found.</p>
    {% endif %}
    
    <form method="post" id="invoice-form">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-success">{% if invoice %}Update Invoice{% else %}Create Invoice{% endif %}</button>
    </form>
    
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary mt-3">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>

    <!-- JavaScript for dynamic work order loading and Flatpickr initialization -->
    <script>
    document.addEventListener("DOMContentLoaded", function() {
        // Dynamic work order loading for selected client, if the fields exist.
        const clientField = document.querySelector("#id_client");
        const workOrderField = document.querySelector("#id_work_order");
        if (clientField && workOrderField) {
        clientField.addEventListener("change", function() {
            fetch(`/invoices/ajax/get_workorders/?client_id=${clientField.value}`)
            .then(response => response.json())
            .then(data => {
                // Clear current options
                workOrderField.innerHTML = '<option value="">---------</option>';
                data.forEach(order => {
                let option = document.createElement("option");
                option.value = order.id;
                option.text = `Order #${order.id} - ${order.job_description}`;
                workOrderField.appendChild(option);
                });
            });
        });
        }
        
        // Initialize Flatpickr on datepicker fields with format "F j, y" (e.g., "January 1, 23")
        flatpickr(".datepicker", {
        dateFormat: "F j, y"
        });
    });
    </script>
    {% endblock %}


    ===== templates/invoices/invoice_detail.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}Invoice Detail{% endblock %}
    {% block content %}
    <div class="container">
    <!-- Navigation Buttons for Invoice Categories -->
    <div class="mb-4 text-center">
        <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger me-2">Unpaid Invoices</a>
        <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger me-2">Paid Invoices</a>
        <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger me-2">Overdue Invoices</a>
        <a href="{% url 'invoice_create' %}" class="btn btn-danger">New Invoice</a>
    </div>
    
    <div class="card shadow-sm mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
        <h2>Invoice {{ invoice.invoice_number }} Details</h2>
        <div>
            <a href="{% url 'invoice_update' invoice.id %}" class="btn btn-warning btn-sm me-2">Edit Invoice</a>
            <a href="{% url 'invoice_list' %}" class="btn btn-secondary btn-sm">Back to Invoice Overview</a>
        </div>
        </div>
        <div class="card-body">
        <h4>Invoice Information</h4>
        <p><strong>Client:</strong> {{ invoice.client.name }}</p>
        <p><strong>Date Created:</strong> {{ invoice.date_created|date:"Y-m-d" }}</p>
        <p><strong>Due Date:</strong> {{ invoice.due_date|date:"Y-m-d" }}</p>
        <p><strong>Amount:</strong> ${{ invoice.amount }}</p>
        <p><strong>Status:</strong> {{ invoice.get_status_display }}</p>
        {% if invoice.notes %}
            <p><strong>Notes:</strong> {{ invoice.notes }}</p>
        {% endif %}
        
        {% if invoice.work_order %}
        <hr>
        <h4>Associated Work Order Details</h4>
        <p><strong>ID:</strong> {{ invoice.work_order.id }}</p>
        <p><strong>Description:</strong> {{ invoice.work_order.job_description }}</p>
        <p><strong>Estimated Cost:</strong> ${{ invoice.work_order.estimated_cost }}</p>
        <p><strong>Status:</strong> {{ invoice.work_order.get_status_display }}</p>
        
        {% if invoice.work_order.addresses.all %}
            <h5>Pickup Addresses</h5>
            <ul>
            {% for addr in invoice.work_order.addresses.all %}
                {% if addr.address_type|lower == "pickup" %}
                <li>{{ addr.address }}</li>
                {% endif %}
            {% endfor %}
            </ul>
            <h5>Dropoff Addresses</h5>
            <ul>
            {% for addr in invoice.work_order.addresses.all %}
                {% if addr.address_type|lower == "dropoff" %}
                <li>{{ addr.address }}</li>
                {% endif %}
            {% endfor %}
            </ul>
        {% else %}
            <p>No addresses associated with this work order.</p>
        {% endif %}
        
        {% else %}
            <p><strong>Work Order:</strong> Not linked</p>
        {% endif %}
        </div>
        <div class="card-footer">
        <button class="btn btn-primary" onclick="window.print();">Print Invoice</button>
        </div>
    </div>
    
    <!-- Navigation Row -->
    <div class="mt-4 d-flex justify-content-between">
        <div>
        <a href="{% url 'invoice_list' %}" class="btn btn-secondary">Back to Invoice Overview</a>
        <a href="{% url 'home' %}" class="btn btn-secondary">Back to Dashboard</a>
        </div>
        <div>
        <a href="{% url 'invoice_delete' invoice.id %}" class="btn btn-danger">Delete Invoice</a>
        </div>
    </div>
    </div>
    {% endblock %}


    ===== templates/base.html =====
    {% load static %}
    <!DOCTYPE html>
    <html lang="en">
    <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Art Moving Business Management System{% endblock %}</title>

    <!-- Favicon -->
    <link rel="icon" type="image/png" sizes="64x64" href="{% static 'images/icon-64x64.png' %}">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">

    <!-- FullCalendar CSS -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">

    <!-- Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!-- Select2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">

    {% block extra_css %}
    <style>
        #calendar {
        overflow: hidden;
        }
        .fc .fc-daygrid-event {
        background-color: #4a90e2 !important;
        border: none !important;
        border-radius: 4px !important;
        padding: 2px 4px !important;
        font-size: 0.85em !important;
        }
        .fc .fc-daygrid-event:hover {
        background-color: #6fb1fc !important;
        }
        .fc {
        background-color: transparent;
        border: none;
        }
        .nav-icon {
        height: 60px;
        margin-right: 10px;
        }
    </style>
    {% endblock %}
    </head>
    <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
        <div class="d-flex align-items-center">
            <a href="{% url 'home' %}">
            <img src="{% static 'images/nav-icon-128x128.png' %}" alt="Site Icon" class="nav-icon">
            </a>
            <a class="btn btn-outline-light me-2" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSidebar" role="button" aria-controls="offcanvasSidebar">
            Menu
            </a>
            <a class="navbar-brand fw-bold" href="{% url 'home' %}">EJ Art Mover</a>
        </div>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'home' %}">Dashboard</a></li>
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'workorder_list' %}">Work Orders</a></li>
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'client_list' %}">Clients</a></li>
            <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'invoice_list' %}">Invoices</a></li>
            {% if user.is_authenticated %}
                <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'logout' %}">Logout</a></li>
            {% else %}
                <li class="nav-item"><a class="nav-link fw-bold" href="{% url 'login' %}">Login</a></li>
            {% endif %}
            </ul>
        </div>
        </div>
    </nav>

    <!-- Offcanvas Sidebar -->
    <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasSidebar" aria-labelledby="offcanvasSidebarLabel">
        <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasSidebarLabel">Navigation</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
        <div class="list-group">
            <div class="mb-3">
            <h6 class="text-uppercase">Dashboard</h6>
            <a href="{% url 'home' %}" class="btn btn-outline-secondary btn-sm d-block mb-1">View Dashboard</a>
            </div>
            <div class="mb-3">
            <h6 class="text-uppercase">Work Orders</h6>
            <a href="{% url 'workorder_list' %}" class="btn btn-outline-primary btn-sm d-block mb-1">View All Work Orders</a>
            <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary btn-sm d-block mb-1">Pending Jobs</a>
            <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary btn-sm d-block mb-1">Scheduled Jobs</a>
            <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary btn-sm d-block mb-1">Completed Jobs</a>
            <a href="{% url 'workorder_create' %}" class="btn btn-success btn-sm d-block">New Work Order</a>
            </div>
            <div class="mb-3">
            <h6 class="text-uppercase">Clients</h6>
            <a href="{% url 'client_list' %}" class="btn btn-outline-warning btn-sm d-block mb-1">View Clients</a>
            <a href="{% url 'client_create' %}" class="btn btn-warning btn-sm d-block">Add New Client</a>
            </div>
            <div>
            <h6 class="text-uppercase">Invoicing</h6>
            <a href="{% url 'invoice_list' %}" class="btn btn-outline-danger btn-sm d-block mb-1">Invoice Overview</a>
            <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger btn-sm d-block mb-1">Unpaid Invoices</a>
            <a href="{% url 'invoice_paid' %}" class="btn btn-outline-danger btn-sm d-block mb-1">Paid Invoices</a>
            <a href="{% url 'invoice_overdue' %}" class="btn btn-outline-danger btn-sm d-block mb-1">Overdue Invoices</a>
            <a href="{% url 'invoice_create' %}" class="btn btn-danger btn-sm d-block">New Invoice</a>
            </div>
        </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="container mt-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="mt-4 bg-dark text-white text-center py-3">
        <div class="container">
        <p class="mb-0">&copy; {% now "Y" %} Art Moving Business Management System</p>
        </div>
    </footer>

    <!-- JS Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    {% block extra_js %}{% endblock %}

    <script>
        document.addEventListener("DOMContentLoaded", function() {
        flatpickr(".datepicker", { dateFormat: "Y-m-d" });

        const selects = document.querySelectorAll(".select2");
        selects.forEach(el => {
            $(el).select2({ width: "100%" });
        });
        });
    </script>
    </body>
    </html>


    ===== templates/workorders/workorder_confirm_delete.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}Confirm Delete Work Order{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Delete Work Order #{{ workorder.id }}</h2>
    <p>Are you sure you want to delete this work order?</p>
    
    <form method="post">
        {% csrf_token %}
        <button type="submit" class="btn btn-danger">Yes, delete it</button>
        <a href="{% url 'workorder_detail' workorder.id %}" class="btn btn-secondary">Cancel</a>
    </form>
    </div>
    {% endblock %}


    ===== templates/workorders/completed_jobs.html =====
    {% extends "base.html" %}
    {% block title %}Completed Jobs{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Completed Jobs</h2>
    
    <!-- Navigation Buttons -->
    <div class="mb-4 text-center">
        <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary me-2">Pending Jobs</a>
        <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary me-2">Scheduled Jobs</a>
        <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary me-2">Completed Jobs</a>
        <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-success text-white">Completed Jobs</div>
        <div class="card-body">
        {% if jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Completed Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>{{ job.completed_at|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                <button type="button" class="btn btn-sm btn-primary" onclick="createInvoice({{ job.id }})">Create Invoice</button>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No completed jobs found.</p>
        {% endif %}
        </div>
    </div>
    
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary mt-3">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>

    {% block extra_js %}
    <script>
    function createInvoice(jobId) {
    var review = confirm("Would you like to review and edit the details of this job before creating an invoice?");
    if (review) {
        window.location.href = "/workorders/edit/" + jobId + "/";
    } else {
        window.location.href = "/invoices/create/?work_order=" + jobId;
    }
    }
    </script>
    {% endblock %}
    {% endblock %}


    ===== templates/workorders/workorder_detail.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}Work Order Detail{% endblock %}
    {% block content %}
    <div class="container">
    <!-- Work Order Information Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #00bcd4; color: white;">
        <h2>Work Order #{{ job.id }} Details</h2>
        <div>
            <a href="{% url 'workorder_edit' job.id %}" class="btn btn-warning btn-sm me-2">Edit Work Order</a>
            <a href="{% url 'workorder_list' %}" class="btn btn-secondary btn-sm">Back to Work Orders</a>
        </div>
        </div>
        <div class="card-body">
        <h4>Work Order Information</h4>
        <p><strong>ID:</strong> {{ job.id }}</p>
        <p><strong>Description:</strong> {{ job.job_description }}</p>
        <p><strong>Status:</strong> {{ job.get_status_display }}</p>
        
        <h5>Addresses</h5>
        {% if job.addresses.all %}
            {% for address in job.addresses.all %}
            <p><strong>{{ address.get_address_type_display }} Address:</strong> {{ address.address }}</p>
            {% endfor %}
        {% else %}
            <p>No addresses provided.</p>
        {% endif %}
        
        <p><strong>Estimated Cost:</strong> ${{ job.estimated_cost }}</p>
        <p><strong>Scheduled Date:</strong> {{ job.scheduled_date|default:"Not Scheduled" }}</p>
        <p><strong>Completed At:</strong> {{ job.completed_at|default:"Not Completed" }}</p>
        <p><strong>Created At:</strong> {{ job.created_at|date:"Y-m-d H:i" }}</p>
        <p><strong>Last Edited:</strong> {{ job.updated_at|date:"Y-m-d H:i" }}</p>
        </div>
    </div>
    
    <!-- Create Invoice Button for Completed Work Orders -->
    {% if job.status == "completed" %}
    <div class="mb-4">
        <button type="button" class="btn btn-danger" onclick="window.location.href='/invoices/create/?work_order={{ job.id }}'">
        Create Invoice
        </button>
    </div>
    {% endif %}
    
    <!-- Client Information Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header" style="background-color: #03a9f4; color: white;">
        <h3>Client Information</h3>
        </div>
        <div class="card-body">
        <p><strong>Name:</strong> {{ job.client.name }}</p>
        <p><strong>Email:</strong> {{ job.client.email }}</p>
        <p><strong>Phone:</strong> {{ job.client.phone }}</p>
        <p><strong>Address:</strong> {{ job.client.address }}</p>
        </div>
    </div>
    
    <!-- Attachments Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header" style="background-color: #388e3c; color: white;">
        <h3>Attachments</h3>
        </div>
        <div class="card-body">
        <ul class="list-group">
            {% for attachment in attachments %}
            <li class="list-group-item">
                {% if attachment.file %}
                <a href="{{ attachment.file.url }}">{{ attachment.file.url }}</a>
                {% else %}
                <span>No file available.</span>
                {% endif %}
                <small class="text-muted">(Uploaded: {{ attachment.uploaded_at|date:"Y-m-d H:i" }})</small>
            </li>
            {% empty %}
            <li class="list-group-item">No attachments.</li>
            {% endfor %}
        </ul>
        <form method="post" enctype="multipart/form-data" class="mt-3">
            {% csrf_token %}
            {{ attachment_form|crispy }}
            <button type="submit" name="attachment_submit" class="btn btn-primary">Add Attachment</button>
        </form>
        </div>
    </div>
    
    <!-- Notes Card -->
    <div class="card shadow-sm mb-4">
        <div class="card-header" style="background-color: #8bc34a; color: white;">
        <h3>Notes</h3>
        </div>
        <div class="card-body">
        <ul class="list-group">
            {% for note in notes %}
            <li class="list-group-item">
                {{ note.note }}
                <small class="text-muted">({{ note.created_at|date:"Y-m-d H:i" }})</small>
            </li>
            {% empty %}
            <li class="list-group-item">No notes.</li>
            {% endfor %}
        </ul>
        <form method="post" class="mt-3">
            {% csrf_token %}
            {{ note_form|crispy }}
            <button type="submit" name="note_submit" class="btn btn-primary">Add Note</button>
        </form>
        </div>
    </div>
    
    <!-- Navigation Row -->
    <div class="mt-4 d-flex justify-content-between">
        <div>
        <a href="{% url 'home' %}" class="btn btn-secondary">Back to Dashboard</a>
        <a href="{% url 'workorder_list' %}" class="btn btn-secondary">Back to Work Orders</a>
        </div>
        <div>
        <a href="{% url 'workorder_delete' job.id %}" class="btn btn-danger">Delete Work Order</a>
        </div>
    </div>
    </div>
    {% block extra_js %}
    <!-- No extra JavaScript is needed for the Create Invoice button -->
    {% endblock %}
    {% endblock %}


    ===== templates/workorders/workorder_form.html =====
    {% extends "base.html" %}
    {% load crispy_forms_tags %}
    {% block title %}Edit Work Order{% endblock %}
    {% block content %}
    <div class="container">

    <!-- Navigation Buttons -->
    <div class="mb-4 text-center">
        <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary me-2">Pending Jobs</a>
        <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary me-2">Scheduled Jobs</a>
        <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary me-2">Completed Jobs</a>
        <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>

    <!-- Work Order Form -->
    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}

        <!-- Custom Client Field with Select2 and Add Client button -->
        <div class="mb-4">
        <label for="{{ form.client.id_for_label }}" class="form-label fw-bold">Client</label>
        {{ form.client }}
        {% if form.client.errors %}
            <div class="text-danger">{{ form.client.errors }}</div>
        {% endif %}
        <a href="{% url 'client_create' %}" class="btn btn-sm btn-outline-primary mt-2" target="_blank">
            + Add New Client
        </a>
        </div>

        <div class="mb-4">
        {{ form.job_description|as_crispy_field }}
        {{ form.estimated_cost|as_crispy_field }}
        {{ form.assigned_to|as_crispy_field }}
        </div>

        <!-- Inline formset for addresses -->
        <h4>Pickup and Dropoff Addresses</h4>
        <div id="address-formset">
        {{ address_formset.management_form }}
        {% for form in address_formset %}
            <div class="card mb-3">
            <div class="card-body">
                {{ form|crispy }}
                {% if form.instance.pk %}
                <div class="form-check">
                    {{ form.DELETE }} <label class="form-check-label">Delete</label>
                </div>
                {% endif %}
            </div>
            </div>
        {% endfor %}
        </div>

        <!-- Attachments Section -->
        <h4>Attachments</h4>
        <div class="card shadow-sm mb-4">
        <div class="card-body">
            <ul class="list-group">
            {% for attachment in attachments %}
                <li class="list-group-item">
                <a href="{{ attachment.file.url }}">{{ attachment.file.url }}</a>
                <small class="text-muted">(Uploaded: {{ attachment.uploaded_at|date:"Y-m-d H:i" }})</small>
                </li>
            {% empty %}
                <li class="list-group-item">No attachments.</li>
            {% endfor %}
            </ul>
            <div class="mt-3">
            {{ attachment_form|crispy }}
            </div>
        </div>
        </div>

        <!-- Notes Section -->
        <h4>Notes</h4>
        <div class="card shadow-sm mb-4">
        <div class="card-body">
            <ul class="list-group">
            {% for note in notes %}
                <li class="list-group-item">
                {{ note.note }}
                <small class="text-muted">({{ note.created_at|date:"Y-m-d H:i" }})</small>
                </li>
            {% empty %}
                <li class="list-group-item">No notes.</li>
            {% endfor %}
            </ul>
            <div class="mt-3">
            {{ note_form|crispy }}
            </div>
        </div>
        </div>

        <div class="d-flex">
        <button type="submit" name="update_only" class="btn btn-success">Create / Update</button>
        <button type="submit" name="create_invoice" class="btn btn-danger ms-2">Update and Create Invoice</button>
        </div>
    </form>

    <!-- Navigation Buttons -->
    <div class="mt-4 d-flex justify-content-between">
        <div>
        <a href="{% url 'workorder_list' %}" class="btn btn-secondary">Back to Work Orders</a>
        <a href="{% url 'home' %}" class="btn btn-secondary">Back to Dashboard</a>
        </div>
        {% if job %}
        <div>
            <a href="{% url 'workorder_delete' job.id %}" class="btn btn-danger">Delete Work Order</a>
        </div>
        {% endif %}
    </div>
    </div>
    {% endblock %}

    {% block extra_js %}
    <!-- Select2 JS and CSS (moved from inside script to correct location) -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

    <script>
    $(document).ready(function () {
        $('.select2').select2({
        width: '100%',
        placeholder: 'Search or select a client',
        allowClear: true
        });
    });
    </script>
    {% endblock %}


    ===== templates/workorders/scheduled_jobs.html =====
    {% extends "base.html" %}
    {% block title %}Scheduled Jobs{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Scheduled Jobs</h2>
    
    <!-- Navigation Buttons -->
    <div class="mb-4 text-center">
        <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary me-2">Pending Jobs</a>
        <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary me-2">Scheduled Jobs</a>
        <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary me-2">Completed Jobs</a>
        <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>
    
    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>
    
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-info text-white">Scheduled Jobs</div>
        <div class="card-body">
        {% if jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Scheduled Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>{{ job.scheduled_date|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                <form method="post" action="{% url 'mark_completed' job.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-success">Mark Completed</button>
                </form>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No scheduled jobs found.</p>
        {% endif %}
        </div>
    </div>
    
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary mt-3">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>
    {% endblock %}


    ===== templates/workorders/pending_jobs.html =====
    {% extends "base.html" %}
    {% block title %}Pending Jobs{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Pending Jobs</h2>

    <!-- Navigation Buttons -->
    <div class="mb-4 text-center">
        <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary me-2">Pending Jobs</a>
        <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary me-2">Scheduled Jobs</a>
        <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary me-2">Completed Jobs</a>
        <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>

    <!-- Search Bar -->
    <form method="get" class="mb-4">
        <div class="input-group">
        <input type="text" name="q" class="form-control" placeholder="Search by client name..." value="{{ query }}">
        <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </form>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-secondary text-white">Pending Jobs</div>
        <div class="card-body">
        {% if jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Last Edited</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>{{ job.updated_at|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit / Schedule</a>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No pending jobs found.</p>
        {% endif %}
        </div>
    </div>
    </div>

    <!-- Back Buttons -->
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary mt-3">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>

    {% endblock %}


    ===== templates/workorders/workorder_list.html =====
    {% extends "base.html" %}
    {% block title %}Work Orders{% endblock %}
    {% block content %}
    <div class="container">
    <h2 class="mb-4">Work Orders</h2>
    
    <!-- Navigation Buttons -->
    <div class="mb-4 text-center">
        <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary me-2">Pending Jobs</a>
        <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary me-2">Scheduled Jobs</a>
        <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary me-2">Completed Jobs</a>
        <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>
    
    <!-- Pending Jobs Section -->
    <div class="card mb-4">
        <div class="card-header bg-secondary text-white">
        <h5 class="mb-0">Pending Jobs</h5>
        </div>
        <div class="card-body">
        {% if pending_jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Last Edited</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in pending_jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>{{ job.updated_at|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit / Schedule</a>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No pending jobs found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Scheduled Jobs Section -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white">
        <h5 class="mb-0">Scheduled Jobs</h5>
        </div>
        <div class="card-body">
        {% if scheduled_jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in scheduled_jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                <form method="post" action="{% url 'mark_completed' job.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-success">Mark Completed</button>
                </form>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No scheduled jobs found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Completed Jobs Section -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
        <h5 class="mb-0">Completed Jobs</h5>
        </div>
        <div class="card-body">
        {% if completed_jobs %}
        <table class="table table-sm">
            <thead>
            <tr>
                <th>ID</th>
                <th>Client</th>
                <th>Description</th>
                <th>Completed Date</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            {% for job in completed_jobs %}
            <tr>
                <td>{{ job.id }}</td>
                <td>{{ job.client.name }}</td>
                <td>{{ job.job_description|truncatewords:10 }}</td>
                <td>{{ job.completed_at|date:"m-d-y" }}</td>
                <td>
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                <button type="button" class="btn btn-sm btn-primary" onclick="createInvoice({{ job.id }})">
                    Create Invoice
                </button>
                </td>
            </tr>
            {% endfor %}
            </tbody>
        </table>
        {% else %}
        <p>No completed jobs found.</p>
        {% endif %}
        </div>
    </div>
    
    <!-- Back to Dashboard Button -->
    <a href="{% url 'home' %}" class="btn btn-secondary mt-3">Back to Dashboard</a>
    </div>

    {% block extra_js %}
    <script>
    function createInvoice(jobId) {
    var review = confirm("Would you like to review and edit the details of this job before creating an invoice?");
    if (review) {
        window.location.href = "/workorders/edit/" + jobId + "/";
    } else {
        window.location.href = "/invoices/create/?work_order=" + jobId;
    }
    }
    </script>
    {% endblock %}
    {% endblock %}
