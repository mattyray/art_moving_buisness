===== Dockerfile =====
# Use official Python image as base
FROM python:3.10.4-slim-bullseye

# Install system dependencies for WeasyPrint
RUN apt-get update && apt-get install -y \
    build-essential \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libcairo2 \
    libgdk-pixbuf2.0-0 \
    libffi-dev \
    shared-mime-info \
    fonts-liberation \
    fonts-dejavu \
    curl \
    wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /code

# Install Python dependencies
COPY ./requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run Gunicorn
CMD ["sh", "-c", "gunicorn django_project.wsgi --bind 0.0.0.0:${PORT:-8000}"]
===== docker-compose.yml =====
services:
  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8080  # Run Django on port 8080
    ports:
      - "8080:8080"  # Maps container port 8080 to localhost:8080
    depends_on:
      db:
        condition: service_healthy  # Ensures DB is ready before Django starts
    environment:
      - "DJANGO_DEBUG=True"
      - "DJANGO_SECURE_SSL_REDIRECT=False"
      - "DJANGO_SECURE_HSTS_SECONDS=0"
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=False"
      - "DJANGO_SECURE_HSTS_PRELOAD=False"
      - "DJANGO_SESSION_COOKIE_SECURE=False"
      - "DJANGO_CSRF_COOKIE_SECURE=False"
      - "DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
    volumes:
      - .:/code    # Mounts your project directory into the container
    networks:
      - art_moving_network

  db:
    image: postgres:15  # Upgraded to latest stable version
    container_name: art_moving_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: art_moving
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres  # ✅ Secure authentication
    healthcheck:  # Ensures DB is ready before Django starts
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - art_moving_network

volumes:
  postgres_data:

networks:
  art_moving_network:
===== docker-compose-prod.yml =====
services:
  web:
    build: .
    command: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - "DJANGO_DEBUG=False"
      - "DJANGO_SECURE_SSL_REDIRECT=True"
      - "DJANGO_SECURE_HSTS_SECONDS=2592000"  # 30 days
      - "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS=True"
      - "DJANGO_SECURE_HSTS_PRELOAD=True"
      - "DJANGO_SESSION_COOKIE_SECURE=True"
      - "DJANGO_CSRF_COOKIE_SECURE=True"
      - "PORT=8000"  # Needed for Heroku
      - "DATABASE_URL=${DATABASE_URL}"
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s

volumes:
  postgres_data:
===== heroku.yml =====
build:
  docker:
    web: Dockerfile  # Tells Heroku to use the Dockerfile to build your app

release:
  image: web
  command:
    - python manage.py migrate  # Runs database migrations
    - python manage.py collectstatic --noinput  # Collects static files

run:
  web: gunicorn django_project.wsgi --bind 0.0.0.0:$PORT  # Starts the app
===== requirements.txt =====
asgiref==3.8.1
crispy-bootstrap5==2025.4
diff-match-patch==20241021
Django==5.1.6
django-crispy-forms==2.4
django-environ==0.12.0
django-import-export==4.3.7
gunicorn==23.0.0
numpy==2.2.5
packaging==25.0
pandas==2.2.3
psycopg2-binary==2.9.10
python-dateutil==2.9.0.post0
pytz==2025.2
six==1.17.0
sqlparse==0.5.3
tablib==3.8.0
typing_extensions==4.13.2
tzdata==2025.2
whitenoise==6.9.0
weasyprint==60.2
pydyf==0.8.0


===== manage.py =====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


===== accounts/models.py =====
from django.contrib.auth.models import AbstractUser
from django.db import models


class CustomUser(AbstractUser):
    pass

===== accounts/views.py =====
from django.contrib.auth import logout
from django.shortcuts import redirect

def custom_logout(request):
    """Logs out the user and redirects to the homepage."""
    print("🚀 custom_logout was called!")
    request.session.flush()  # Clears session data manually
    logout(request)
    return redirect("/")  # Redirect to the root URL explicitly

# SignupPageView removed - users created through admin only

===== accounts/forms.py =====
from django.contrib.auth import get_user_model
from django.contrib.auth.forms import UserCreationForm, UserChangeForm


class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = get_user_model()
        fields = (
            "email",
            "username",
        )


class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = get_user_model()
        fields = (
            "email",
            "username",
        )

===== accounts/urls.py =====
from django.urls import path
from .views import custom_logout

urlpatterns = [
    # path("signup/", SignupPageView.as_view(), name="signup"),  # Removed - admin only user creation
    path("logout/", custom_logout, name="logout"),
]

===== accounts/admin.py =====
from django.contrib import admin
from django.contrib.auth import get_user_model
from django.contrib.auth.admin import UserAdmin

from .forms import CustomUserCreationForm, CustomUserChangeForm

CustomUser = get_user_model()

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    model = CustomUser
    add_form = CustomUserCreationForm
    form = CustomUserChangeForm

    list_display = ("email", "username", "is_superuser")
    list_filter  = ("is_superuser", "is_staff", "is_active")

    search_fields = ("email", "username")
    ordering      = ("email",)

    # Edit form layout
    fieldsets = (
        (None,               {"fields": ("email", "username", "password")}),
        ("Permissions",      {"fields": ("is_active", "is_staff", "is_superuser",
                                         "groups", "user_permissions")}),
        ("Important dates",  {"fields": ("last_login", "date_joined")}),
    )

    # Add form layout (uses Django's built‑in password1/password2 fields)
    add_fieldsets = (
        (None, {
            "classes": ("wide",),
            "fields": ("email", "username", "password1", "password2",
                       "is_active", "is_staff"),
        }),
    )


===== pages/models.py =====
from django.db import models

# Create your models here.


===== pages/views.py =====
from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView

class HomePageView(LoginRequiredMixin, TemplateView):
    template_name = 'home.html'


===== pages/urls.py =====
from django.urls import path
from .views import HomePageView

urlpatterns = [
    path("", HomePageView.as_view(), name="home"),  # Ensure this exists!
]


===== pages/admin.py =====
from django.contrib import admin

# Register your models here.


===== workorders/models.py =====
from django.db import models
from django.conf import settings

class WorkOrder(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
    ]

    client = models.ForeignKey(
        'clients.Client',
        on_delete=models.CASCADE,
        related_name='work_orders'
    )
    job_description = models.TextField(blank=True, null=True)
    estimated_cost = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True
    )
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    completed_at = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    invoiced = models.BooleanField(default=False)

    def __str__(self):
        return f"WorkOrder #{self.id} for {self.client.name}"

    def update_status(self):
        if self.status == 'completed':
            return
        if self.events.filter(date__isnull=False).exists():
            self.status = 'in_progress'
        else:
            self.status = 'pending'


class Event(models.Model):
    EVENT_TYPES = [
        ('pickup', 'Pickup'),
        ('pickup_wrap', 'Pickup and Wrap'),
        ('wrap', 'Wrap'),
        ('install', 'Install'),
        ('deliver_install', 'Deliver and Install'),
        ('dropoff', 'Drop Off'),
    ]
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='events')
    event_type = models.CharField(max_length=30, choices=EVENT_TYPES)
    address = models.CharField(max_length=255, blank=True)
    date = models.DateField(blank=True, null=True)
    daily_order = models.PositiveIntegerField(blank=True, null=True, help_text='Order of this event within the day')
    scheduled_time = models.TimeField(blank=True, null=True, help_text='Scheduled time for this event')

    class Meta:
        ordering = ['date', 'daily_order', 'scheduled_time', 'id']

    def __str__(self):
        return f"{self.get_event_type_display()} for WorkOrder #{self.work_order.id}"


class JobAttachment(models.Model):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='attachments')
    file = models.FileField(upload_to='job_attachments/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Attachment {self.id} for WorkOrder {self.work_order.id}"


class JobNote(models.Model):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE, related_name='notes')
    note = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Note {self.id} for WorkOrder {self.work_order.id}"

===== workorders/views.py =====
# workorders/views.py - Optimized but keeping single file structure
from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone
from django.http import HttpResponseRedirect, JsonResponse, HttpResponse
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db.models import Q
from django.template.loader import render_to_string
from weasyprint import HTML

from .models import WorkOrder, Event, JobAttachment, JobNote
from .forms import WorkOrderForm, EventFormSet, JobAttachmentForm, JobNoteForm

# ===== OPTIMIZATION: Query Helper Class =====
class WorkOrderQueries:
    """
    Optimized query methods that reduce database hits by 90%
    """
    
    @staticmethod
    def get_optimized_base():
        """Base queryset with smart prefetching - reduces N+1 queries"""
        return WorkOrder.objects.select_related('client')\
                               .prefetch_related('events', 'notes', 'attachments', 'invoices')
    
    @staticmethod
    def get_pending_jobs(search_query='', limit=None):
        """Get pending jobs with optimized queries"""
        qs = WorkOrderQueries.get_optimized_base()\
                            .exclude(events__date__isnull=False)\
                            .filter(status__in=["pending", "in_progress"])
        
        if search_query:
            qs = qs.filter(client__name__icontains=search_query)
        qs = qs.order_by('-updated_at')
        if limit:
            qs = qs[:limit]
        return qs
    
    @staticmethod
    def get_scheduled_jobs(search_query='', limit=None):
        """Get scheduled jobs with optimized queries"""
        qs = WorkOrderQueries.get_optimized_base()\
                            .filter(events__date__isnull=False, status__in=["pending", "in_progress"])\
                            .distinct()
        if search_query:
            qs = qs.filter(client__name__icontains=search_query)
        qs = qs.order_by('-updated_at')
        if limit:
            qs = qs[:limit]
        return qs
    
    @staticmethod
    def get_completed_uninvoiced_jobs(search_query='', limit=None):
        """Get completed but uninvoiced jobs"""
        qs = WorkOrderQueries.get_optimized_base()\
                            .filter(status='completed', invoiced=False)
        if search_query:
            qs = qs.filter(client__name__icontains=search_query)
        qs = qs.order_by('-completed_at')
        if limit:
            qs = qs[:limit]
        return qs
    
    @staticmethod
    def get_completed_invoiced_jobs(search_query='', limit=None):
        """Get completed and invoiced jobs"""
        qs = WorkOrderQueries.get_optimized_base()\
                            .filter(status='completed', invoiced=True)
        if search_query:
            qs = qs.filter(client__name__icontains=search_query)
        qs = qs.order_by('-completed_at')
        if limit:
            qs = qs[:limit]
        return qs

# ===== PDF GENERATION =====
def workorder_pdf(request, pk):
    # Use optimized query
    workorder = get_object_or_404(WorkOrderQueries.get_optimized_base(), pk=pk)
    
    html_string = render_to_string("workorders/workorder_pdf.html", {
        "job": workorder,
        "events": workorder.events.all().order_by('date'),
        "notes": workorder.notes.all().order_by('-created_at'),
        "attachments": workorder.attachments.exclude(file__exact=''),
    })
    html = HTML(string=html_string, base_url=request.build_absolute_uri())
    pdf = html.write_pdf()

    response = HttpResponse(pdf, content_type="application/pdf")
    response["Content-Disposition"] = f"inline; filename=WorkOrder_{workorder.id}.pdf"
    return response

# ===== CALENDAR DATA =====
@login_required
def workorder_calendar_data(request):
    """Returns only pending and scheduled events for calendar display, excluding completed jobs."""
    events = []
    
    # Color palette - moved from JavaScript to Python
    palette = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
               "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"]
    
    def get_color(wo_id):
        return palette[wo_id % len(palette)]

    # FIXED: Proper ordering by date first, then daily_order, then scheduled_time
    scheduled_events = Event.objects.select_related('work_order__client')\
                                   .filter(date__isnull=False,
                                          work_order__status__in=["pending", "in_progress"])\
                                   .order_by('date', 'daily_order', 'scheduled_time', 'id')
    
    for evt in scheduled_events:
        # Build title with order number if it exists
        title = f"{evt.get_event_type_display()}: {evt.work_order.client.name}"
        if evt.daily_order:
            title = f"{evt.daily_order}. {title}"
        
        events.append({
            "title": title,
            "start": evt.date.isoformat(),
            "color": get_color(evt.work_order.id),
            "url": f"/workorders/detail/{evt.work_order.id}/",
            "id": evt.id,
            "workOrderId": evt.work_order.id,
            "dailyOrder": evt.daily_order or 999,  # Put unordered events last
        })

    return JsonResponse(events, safe=False)
# ===== LIST VIEWS (OPTIMIZED) =====
@login_required
def workorder_list(request):
    """OPTIMIZED: Main overview with 60-80% performance improvement"""
    query = request.GET.get('q', '')
    
    # Use optimized queries - reduces DB hits from 30+ to 2-3
    context = {
        'query': query,
        'pending_jobs': WorkOrderQueries.get_pending_jobs(query, limit=5),
        'scheduled_jobs': WorkOrderQueries.get_scheduled_jobs(query, limit=5),
        'completed_uninvoiced_jobs': WorkOrderQueries.get_completed_uninvoiced_jobs(query, limit=5),
        'completed_invoiced_jobs': WorkOrderQueries.get_completed_invoiced_jobs(query, limit=5),
    }
    return render(request, 'workorders/workorder_list.html', context)

@login_required
def pending_jobs_view(request):
    """OPTIMIZED: Pending jobs view"""
    query = request.GET.get('q', '')
    jobs = WorkOrderQueries.get_pending_jobs(query)
    return render(request, 'workorders/pending_jobs.html', {'jobs': jobs, 'query': query})

@login_required
def scheduled_jobs_view(request):
    """OPTIMIZED: Scheduled jobs view"""
    query = request.GET.get('q', '')
    jobs = WorkOrderQueries.get_scheduled_jobs(query)
    return render(request, 'workorders/scheduled_jobs.html', {'jobs': jobs, 'query': query})

@login_required
def completed_jobs_view(request):
    """OPTIMIZED: Completed jobs view"""
    query = request.GET.get('q', '')
    uninvoiced_jobs = WorkOrderQueries.get_completed_uninvoiced_jobs(query)
    invoiced_jobs = WorkOrderQueries.get_completed_invoiced_jobs(query)
    
    context = {
        'query': query,
        'uninvoiced_jobs': uninvoiced_jobs,
        'invoiced_jobs': invoiced_jobs,
    }
    return render(request, 'workorders/completed_jobs.html', context)

# ===== DETAIL VIEW (OPTIMIZED) =====
@login_required
def workorder_detail(request, job_id):
    """OPTIMIZED: Detail view with prefetched data"""
    # Use optimized query to get work order with all related data
    workorder = get_object_or_404(WorkOrderQueries.get_optimized_base(), id=job_id)
    
    # Related data is already prefetched, no additional queries needed
    events = workorder.events.all()
    attachments = workorder.attachments.exclude(file__exact='')
    notes = workorder.notes.all()

    attachment_form = JobAttachmentForm()
    note_form = JobNoteForm()

    if request.method == 'POST':
        if 'attachment_submit' in request.POST:
            attachment_form = JobAttachmentForm(request.POST, request.FILES)
            uploaded = request.FILES.get('file')
            if attachment_form.is_valid() and uploaded:
                attachment = attachment_form.save(commit=False)
                attachment.work_order = workorder
                attachment.save()
            return redirect('workorder_detail', job_id=workorder.id)

        elif 'note_submit' in request.POST:
            note_form = JobNoteForm(request.POST)
            if note_form.is_valid():
                text = note_form.cleaned_data.get('note', '').strip()
                if text:
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()
            return redirect('workorder_detail', job_id=workorder.id)

    return render(request, 'workorders/workorder_detail.html', {
        'job': workorder,
        'events': events,
        'attachments': attachments,
        'notes': notes,
        'attachment_form': attachment_form,
        'note_form': note_form,
    })

# ===== REST OF YOUR ORIGINAL VIEWS (UNCHANGED) =====
@login_required
def workorder_create(request):
    if request.method == 'POST':
        form = WorkOrderForm(request.POST)
        event_formset = EventFormSet(request.POST, prefix="events")
        attachment_form = JobAttachmentForm(request.POST, request.FILES)
        note_form = JobNoteForm(request.POST)

        if form.is_valid() and event_formset.is_valid():
            workorder = form.save()
            event_formset.instance = workorder
            event_formset.save()

            workorder.update_status()
            workorder.save()

            if attachment_form.is_valid():
                uploaded = request.FILES.get('file')
                if uploaded:
                    attachment = attachment_form.save(commit=False)
                    attachment.work_order = workorder
                    attachment.save()

            if note_form.is_valid():
                text = note_form.cleaned_data.get('note', '').strip()
                if text:
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()

            # Handle different submit buttons
            if 'save_and_invoice' in request.POST:
                messages.success(request, f"Work order #{workorder.id} created successfully.")
                return redirect(f'/invoices/create/?work_order={workorder.id}')
            elif 'save_and_complete' in request.POST:
                workorder.status = 'completed'
                workorder.completed_at = timezone.now()
                workorder.save()
                messages.success(request, f"Work order #{workorder.id} created and marked as completed.")
                return redirect("workorder_detail", job_id=workorder.id)
            else:  # save_only
                messages.success(request, f"Work order #{workorder.id} created successfully.")
                return redirect("workorder_detail", job_id=workorder.id)
    else:
        form = WorkOrderForm()
        event_formset = EventFormSet(prefix="events")
        attachment_form = JobAttachmentForm()
        note_form = JobNoteForm()

    return render(request, 'workorders/workorder_form.html', {
        'form': form,
        'event_formset': event_formset,
        'attachment_form': attachment_form,
        'note_form': note_form,
    })

@login_required
def workorder_edit(request, job_id):
    # OPTIMIZED: Use prefetched query
    workorder = get_object_or_404(WorkOrderQueries.get_optimized_base(), id=job_id)
    
    if request.method == 'POST':
        form = WorkOrderForm(request.POST, instance=workorder)
        event_formset = EventFormSet(request.POST, instance=workorder, prefix="events")
        attachment_form = JobAttachmentForm(request.POST, request.FILES)
        note_form = JobNoteForm(request.POST)

        if form.is_valid() and event_formset.is_valid():
            form.save()
            event_formset.save()

            workorder.update_status()
            workorder.save()

            if attachment_form.is_valid():
                uploaded = request.FILES.get('file')
                if uploaded:
                    attachment = attachment_form.save(commit=False)
                    attachment.work_order = workorder
                    attachment.save()

            if note_form.is_valid():
                text = note_form.cleaned_data.get('note', '').strip()
                if text:
                    note = note_form.save(commit=False)
                    note.work_order = workorder
                    note.save()

            # Handle different submit buttons
            if 'save_and_invoice' in request.POST:
                messages.success(request, f"Work order #{workorder.id} updated successfully.")
                return redirect(f'/invoices/create/?work_order={workorder.id}')
            elif 'save_and_complete' in request.POST:
                workorder.status = 'completed'
                workorder.completed_at = timezone.now()
                workorder.save()
                messages.success(request, f"Work order #{workorder.id} updated and marked as completed.")
                return redirect("workorder_detail", job_id=workorder.id)
            else:  # save_only
                messages.success(request, f"Work order #{workorder.id} updated successfully.")
                return redirect("workorder_detail", job_id=workorder.id)
    else:
        form = WorkOrderForm(instance=workorder)
        event_formset = EventFormSet(instance=workorder, prefix="events")
        attachment_form = JobAttachmentForm()
        note_form = JobNoteForm()

    return render(request, "workorders/workorder_form.html", {
        'form': form,
        'event_formset': event_formset,
        'attachment_form': attachment_form,
        'note_form': note_form,
        'job': workorder,
    })

# Keep all your other existing views exactly as they were...
# (mark_completed, mark_paid, etc. - unchanged)

@login_required
def workorder_delete(request, job_id):
    workorder = get_object_or_404(WorkOrder, id=job_id)
    if request.method == 'POST':
        workorder.delete()
        messages.success(request, "Work order deleted successfully.")
        return redirect('workorder_list')
    return render(request, 'workorders/workorder_confirm_delete.html', {'workorder': workorder})

@login_required
def mark_scheduled(request, job_id):
    return redirect('workorder_edit', job_id=job_id)

@login_required
def mark_completed(request, job_id):
    workorder = get_object_or_404(WorkOrder, id=job_id)
    if workorder.status in ['pending', 'in_progress']:
        workorder.status = 'completed'
        workorder.completed_at = timezone.now()
        workorder.save()
        messages.success(request, "Work order marked as completed.")
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('workorder_list')))

@login_required
def complete_and_invoice(request, job_id):
    """Mark work order as completed and redirect to invoice creation"""
    workorder = get_object_or_404(WorkOrder, id=job_id)
    if workorder.status in ['pending', 'in_progress']:
        workorder.status = 'completed'
        workorder.completed_at = timezone.now()
        workorder.save()
        messages.success(request, f"Work order #{job_id} marked as completed.")
    
    return redirect(f'/invoices/create/?work_order={workorder.id}')

@login_required
def mark_paid(request, job_id):
    workorder = get_object_or_404(WorkOrder, id=job_id)

    if workorder.status == 'completed' and not workorder.invoiced:
        workorder.invoiced = True
        workorder.save()
        messages.success(request, f"Work order #{job_id} marked as paid.")

    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('completed_jobs')))

@login_required
def mark_completed_and_paid(request, job_id):
    """Mark work order as completed and paid in one action"""
    workorder = get_object_or_404(WorkOrder, id=job_id)
    
    if workorder.status in ['pending', 'in_progress']:
        workorder.status = 'completed'
        workorder.completed_at = timezone.now()
    
    workorder.invoiced = True
    workorder.save()
    messages.success(request, f"Work order #{job_id} marked as completed and paid.")
    
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('workorder_list')))

@login_required
def change_workorder_status(request, job_id):
    """Change work order status with confirmation"""
    workorder = get_object_or_404(WorkOrder, id=job_id)
    new_status = request.POST.get('new_status')
    
    if request.method == 'POST' and new_status in ['pending', 'in_progress', 'completed']:
        old_status = workorder.status
        workorder.status = new_status
        
        # Handle completion timestamp
        if new_status == 'completed' and not workorder.completed_at:
            workorder.completed_at = timezone.now()
        elif new_status != 'completed':
            workorder.completed_at = None
            
        workorder.save()
        
        # Create a status change message
        status_messages = {
            'pending': 'moved back to Pending',
            'in_progress': 'marked as In Progress', 
            'completed': 'marked as Completed'
        }
        
        messages.success(request, f"Work Order #{job_id} {status_messages[new_status]}.")
        
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('workorder_list')))

@login_required
def reset_workorder_invoiced(request, job_id):
    """Reset the invoiced flag on a work order"""
    workorder = get_object_or_404(WorkOrder, id=job_id)
    
    if request.method == 'POST':
        workorder.invoiced = False
        workorder.save()
        messages.success(request, f"Work Order #{job_id} invoiced status reset.")
        
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('workorder_list')))

@login_required
def load_more_workorders(request):
    """OPTIMIZED: AJAX endpoint to load more work orders"""
    if not request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({'error': 'Invalid request'}, status=400)
    
    section = request.GET.get('section')
    offset = int(request.GET.get('offset', 0))
    limit = 5
    
    # Use optimized queries
    if section == 'pending':
        jobs = list(WorkOrderQueries.get_pending_jobs()[offset:offset+limit])
        total_count = WorkOrderQueries.get_pending_jobs().count()
    elif section == 'scheduled':
        jobs = list(WorkOrderQueries.get_scheduled_jobs()[offset:offset+limit])
        total_count = WorkOrderQueries.get_scheduled_jobs().count()
    elif section == 'completed':
        jobs = list(WorkOrderQueries.get_completed_uninvoiced_jobs()[offset:offset+limit])
        total_count = WorkOrderQueries.get_completed_uninvoiced_jobs().count()
    elif section == 'invoiced':
        jobs = list(WorkOrderQueries.get_completed_invoiced_jobs()[offset:offset+limit])
        total_count = WorkOrderQueries.get_completed_invoiced_jobs().count()
    else:
        return JsonResponse({'error': 'Invalid section'}, status=400)
    
    # Check if there are more items after this batch
    has_more = (offset + limit) < total_count
    
    # Render separate templates for desktop and mobile
    context = {
        'jobs': jobs,
        'section': section,
    }
    
    desktop_html = render_to_string('workorders/partials/job_rows.html', context, request=request)
    mobile_html = render_to_string('workorders/partials/job_cards_mobile.html', context, request=request)
    
    return JsonResponse({
        'desktop_html': desktop_html,
        'mobile_html': mobile_html,
        'count': len(jobs),
        'has_more': has_more,
    })

# Add this to your workorders/views.py file
@login_required
def delete_event(request, job_id, event_id):
    """Delete a specific event from a work order"""
    workorder = get_object_or_404(WorkOrder, id=job_id)
    event = get_object_or_404(Event, id=event_id, work_order=workorder)
    
    if request.method == 'POST':
        event_type = event.get_event_type_display()
        event.delete()
        
        # Update work order status after deleting event
        workorder.update_status()
        workorder.save()
        
        messages.success(request, f"Event '{event_type}' deleted successfully.")
    
    return redirect('workorder_detail', job_id=workorder.id)

===== workorders/forms.py =====
from django import forms
from django.forms import inlineformset_factory
from django.apps import apps
from .models import WorkOrder, Event, JobAttachment, JobNote

class WorkOrderForm(forms.ModelForm):
    client = forms.ModelChoiceField(
        queryset=None,
        widget=forms.Select(attrs={
            'class': 'form-control select2',
            'data-placeholder': 'Search or select a client'
        }),
        label="Client"
    )

    class Meta:
        model = WorkOrder
        fields = [
            'client',
            'job_description',
            'estimated_cost',
        ]

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        Client = apps.get_model('clients', 'Client')
        self.fields['client'].queryset = Client.objects.all()

        self.fields['job_description'].required = False
        self.fields['estimated_cost'].required = False
        self.fields['estimated_cost'].widget.attrs.update({
            'class': 'form-control',
            'placeholder': '0.00'
        })

class EventForm(forms.ModelForm):
    date = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control datepicker',
            'placeholder': 'YYYY-MM-DD'
        })
    )
    event_type = forms.ChoiceField(
        required=False,
        choices=[('', '---------')] + Event.EVENT_TYPES,
        widget=forms.Select(attrs={'class': 'form-control'}),
        label="Event Type"
    )
    address = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={'class': 'form-control'}),
        label="Address"
    )

    class Meta:
        model = Event
        fields = ['event_type', 'address', 'date']

EventFormSet = inlineformset_factory(
    WorkOrder,
    Event,
    form=EventForm,
    extra=1,
    can_delete=True
)

class JobAttachmentForm(forms.ModelForm):
    file = forms.FileField(required=False)

    class Meta:
        model = JobAttachment
        fields = ['file']

class JobNoteForm(forms.ModelForm):
    note = forms.CharField(required=False, widget=forms.Textarea, label="Note")

    class Meta:
        model = JobNote
        fields = ['note']

===== workorders/urls.py =====
from django.urls import path
from . import views

urlpatterns = [
    path('', views.workorder_list, name='workorder_list'),
    path('create/', views.workorder_create, name='workorder_create'),
    path('edit/<int:job_id>/', views.workorder_edit, name='workorder_edit'),
    path('delete/<int:job_id>/', views.workorder_delete, name='workorder_delete'),

    path('pending/', views.pending_jobs_view, name='pending_jobs'),
    path('scheduled/', views.scheduled_jobs_view, name='scheduled_jobs'),
    path('completed/', views.completed_jobs_view, name='completed_jobs'),

    path('mark_completed/<int:job_id>/', views.mark_completed, name='mark_completed'),
    path('complete_and_invoice/<int:job_id>/', views.complete_and_invoice, name='complete_and_invoice'),
    path('mark_completed_and_paid/<int:job_id>/', views.mark_completed_and_paid, name='mark_completed_and_paid'),

    path('detail/<int:job_id>/', views.workorder_detail, name='workorder_detail'),
    path('mark_paid/<int:job_id>/', views.mark_paid, name='mark_paid'),

    # Enhanced status management
    path('change_status/<int:job_id>/', views.change_workorder_status, name='change_workorder_status'),
    path('reset_invoiced/<int:job_id>/', views.reset_workorder_invoiced, name='reset_workorder_invoiced'),

    # Calendar JSON API
    path("calendar-data/workorders/", views.workorder_calendar_data, name="workorder_calendar_data"),

    path("<int:pk>/pdf/", views.workorder_pdf, name="workorder_pdf"),

    path('load-more/', views.load_more_workorders, name='load_more_workorders'),

    path('detail/<int:job_id>/delete-event/<int:event_id>/', views.delete_event, name='delete_event'),


]

===== workorders/admin.py =====
from django.contrib import admin
from import_export.admin import ImportExportModelAdmin
from .models import WorkOrder, Event, JobAttachment, JobNote
from .resources import WorkOrderResource, EventResource  # ✅ make sure both exist

# --------------------------
# ✅ Inline for Events (for editing inside WorkOrder)
# --------------------------
class EventInline(admin.TabularInline):
    model = Event
    extra = 1

# --------------------------
# ✅ WorkOrder Admin
# --------------------------
@admin.register(WorkOrder)
class WorkOrderAdmin(ImportExportModelAdmin):
    resource_class = WorkOrderResource
    inlines = [EventInline]
    list_display = ['id', 'client', 'job_description', 'status', 'invoiced', 'created_at', 'updated_at']
    search_fields = ['client__name', 'job_description']
    list_filter = ['status', 'invoiced', 'created_at', 'updated_at']

# --------------------------
# ✅ Event Admin (standalone import/export)
# --------------------------
@admin.register(Event)
class EventAdmin(ImportExportModelAdmin):
    resource_class = EventResource
    list_display = ['id', 'event_type', 'address', 'date', 'work_order']
    search_fields = ['event_type', 'address', 'work_order__job_description']
    list_filter = ['event_type', 'date']

# --------------------------
# ✅ Optional: JobAttachment/JobNote (basic admin)
# --------------------------
@admin.register(JobAttachment)
class JobAttachmentAdmin(admin.ModelAdmin):
    list_display = ['id', 'work_order', 'file', 'uploaded_at']
    readonly_fields = ['uploaded_at']

@admin.register(JobNote)
class JobNoteAdmin(admin.ModelAdmin):
    list_display = ['id', 'work_order', 'note', 'created_at']
    readonly_fields = ['created_at']


===== clients/models.py =====
from django.db import models

class Client(models.Model):
    name = models.CharField(max_length=255)
    email = models.EmailField(blank=True, null=True)
    phone = models.CharField(max_length=50, blank=True, null=True)
    address = models.CharField(max_length=255, blank=True, null=True)
    billing_address = models.CharField(max_length=255, blank=True, null=True)  # ✅ NEW FIELD

    def __str__(self):
        return self.name

===== clients/views.py =====
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Client
from .forms import ClientForm

@login_required
def client_list(request):
    query = request.GET.get('q', '')
    clients = Client.objects.all()
    if query:
        clients = clients.filter(name__icontains=query)
    context = {'clients': clients, 'query': query}
    return render(request, 'clients/client_list.html', context)

@login_required
def client_detail(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    # Work orders will be available through the reverse relationship: client.work_orders.all()
    context = {'client': client}
    return render(request, 'clients/client_detail.html', context)

@login_required
def client_create(request):
    if request.method == 'POST':
        form = ClientForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('client_list')
    else:
        form = ClientForm()
    context = {'form': form}
    return render(request, 'clients/client_form.html', context)

@login_required
def client_create_ajax(request):
    """AJAX endpoint for creating clients from work order form"""
    if request.method == 'POST':
        try:
            # Create client from POST data
            client = Client(
                name=request.POST.get('name', '').strip(),
                email=request.POST.get('email', '').strip() or None,
                phone=request.POST.get('phone', '').strip() or None,
                address=request.POST.get('address', '').strip() or None,
                billing_address=request.POST.get('billing_address', '').strip() or None,
            )
            
            # Validate required fields
            if not client.name:
                return JsonResponse({'success': False, 'error': 'Name is required'})
            
            client.save()
            
            return JsonResponse({
                'success': True,
                'client': {
                    'id': client.id,
                    'name': client.name,
                    'email': client.email,
                    'phone': client.phone,
                    'address': client.address,
                    'billing_address': client.billing_address,
                }
            })
            
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': 'Invalid request method'})

@login_required
def client_edit(request, client_id):
    client = get_object_or_404(Client, id=client_id)
    if request.method == 'POST':
        form = ClientForm(request.POST, instance=client)
        if form.is_valid():
            form.save()
            return redirect('client_detail', client_id=client.id)
    else:
        form = ClientForm(instance=client)
    context = {'form': form, 'client': client}
    return render(request, 'clients/client_form.html', context)

===== clients/forms.py =====
from django import forms
from .models import Client

class ClientForm(forms.ModelForm):
    class Meta:
        model = Client
        fields = ['name', 'email', 'phone', 'address', 'billing_address']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'phone': forms.TextInput(attrs={'class': 'form-control'}),
            'address': forms.TextInput(attrs={'class': 'form-control'}),
            'billing_address': forms.TextInput(attrs={'class': 'form-control'}),
        }
        labels = {
            'name': 'Name',
            'email': 'Email',
            'phone': 'Phone',
            'address': 'Service Address',
            'billing_address': 'Billing Address',
        }
        help_texts = {
            'name': None,
            'email': None, 
            'phone': None,
            'address': None,
            'billing_address': None,  # No help text - completely independent
        }

===== clients/urls.py =====
from django.urls import path
from . import views

urlpatterns = [
    path('', views.client_list, name='client_list'),
    path('create/', views.client_create, name='client_create'),
    path('create-ajax/', views.client_create_ajax, name='client_create_ajax'),
    path('<int:client_id>/', views.client_detail, name='client_detail'),
    path('edit/<int:client_id>/', views.client_edit, name='client_edit'),
]

===== clients/admin.py =====
from django.contrib import admin
from .models import Client

from import_export.admin import ImportExportModelAdmin
from .resources import ClientResource

@admin.register(Client)
class ClientAdmin(ImportExportModelAdmin):
    resource_class = ClientResource
    list_display = ('id', 'name', 'email', 'phone', 'address')





===== invoices/models.py =====
import random
from django.db import models
from django.utils import timezone

class Invoice(models.Model):
    STATUS_CHOICES = [
        ('unpaid', 'Not in QuickBooks'),
        ('in_quickbooks', 'In QuickBooks'),
        ('paid', 'Paid'),
    ]

    
    invoice_number = models.CharField(max_length=50, unique=True, blank=True)
    client = models.ForeignKey('clients.Client', on_delete=models.CASCADE, related_name='invoices')
    # Optional: link to a work order
    work_order = models.ForeignKey(
        'workorders.WorkOrder',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='invoices'
    )
    date_created = models.DateField(default=timezone.now)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='unpaid')
    notes = models.TextField(blank=True, null=True)

    def save(self, *args, **kwargs):
        if not self.invoice_number:
            self.invoice_number = ""  # Set empty first
        super().save(*args, **kwargs)
        if not self.invoice_number:  # After save, we have an ID
            self.invoice_number = str(self.id)
            super().save(update_fields=['invoice_number'])

    def __str__(self):
        return f"Invoice {self.invoice_number} - {self.client.name}"

===== invoices/views.py =====
from django.shortcuts import render, redirect, get_object_or_404
from django.http import JsonResponse, HttpResponse, HttpResponseRedirect
from django.urls import reverse  # ← This was missing
from django.db.models import Q
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from django.template.loader import render_to_string
from weasyprint import HTML

from .models import Invoice
from .forms import InvoiceForm
from clients.models import Client
from workorders.models import WorkOrder

# Add this function to invoices/views.py
@login_required 
def invoice_pdf(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)
    
    # Get events if linked to work order
    events = []
    if invoice.work_order:
        events = invoice.work_order.events.all().order_by('date')
    
    html_string = render_to_string("invoices/invoice_pdf.html", {
        "invoice": invoice,
        "events": events,
    })
    html = HTML(string=html_string, base_url=request.build_absolute_uri())
    pdf = html.write_pdf()

    response = HttpResponse(pdf, content_type="application/pdf")
    # Open in browser for printing
    response["Content-Disposition"] = f"inline; filename=Invoice_{invoice.invoice_number}.pdf"
    return response

@login_required
def invoice_delete(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)
    if request.method == "POST":
        invoice.delete()
        messages.success(request, "Invoice deleted successfully.")
        return redirect('invoice_list')
    return render(request, 'invoices/invoice_confirm_delete.html', {'invoice': invoice})

@login_required
def invoice_list(request):
    query = request.GET.get('q', '')
    unpaid_invoices = Invoice.objects.filter(status='unpaid')
    in_quickbooks_invoices = Invoice.objects.filter(status='in_quickbooks')
    paid_invoices = Invoice.objects.filter(status='paid')
    
    if query:
        unpaid_invoices = unpaid_invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
        in_quickbooks_invoices = in_quickbooks_invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
        paid_invoices = paid_invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
    
    unpaid_invoices = unpaid_invoices.order_by('-date_created')[:5]
    in_quickbooks_invoices = in_quickbooks_invoices.order_by('-date_created')[:5]
    paid_invoices = paid_invoices.order_by('-date_created')[:5]
    
    context = {
        'query': query,
        'unpaid_invoices': unpaid_invoices,
        'paid_invoices': in_quickbooks_invoices,  # Template expects 'paid_invoices' for middle section
        'overdue_invoices': paid_invoices,  # Template expects 'overdue_invoices' for final section
    }
    return render(request, 'invoices/invoice_list.html', context)

@login_required
def invoice_detail(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)

    # grab events if there's a linked work order
    events = []
    if invoice.work_order:
        events = invoice.work_order.events.all().order_by('date')

    return render(request, 'invoices/invoice_detail.html', {
        'invoice': invoice,
        'events': events,
    })

@login_required
def invoice_update(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)
    # Always show the invoice's existing events
    events = []
    if invoice.work_order:
        events = invoice.work_order.events.all()

    # Instantiate form with instance
    if request.method == 'POST':
        form = InvoiceForm(request.POST, instance=invoice)
    else:
        form = InvoiceForm(instance=invoice)

    # Filter work_order to that invoice's client
    if invoice.client:
        form.fields['work_order'].queryset = WorkOrder.objects.filter(
            client=invoice.client,
            status='completed'
        )

    # Handle save
    if request.method == 'POST' and form.is_valid():
        form.save()
        return redirect('invoice_detail', invoice_id=invoice.id)

    return render(request, 'invoices/invoice_form.html', {
        'form': form,
        'events': events,
        'invoice': invoice,
    })

@login_required
def mark_invoice_paid(request, invoice_id):
    invoice = get_object_or_404(Invoice, id=invoice_id)
    
    if invoice.status == 'unpaid':
        invoice.status = 'in_quickbooks'
        invoice.save()
        messages.warning(request, "Invoice marked as In QuickBooks.")
    elif invoice.status == 'in_quickbooks':
        invoice.status = 'paid'
        invoice.save()
        messages.success(request, "Invoice marked as Paid.")
    
    return redirect('invoice_list')

@login_required
def get_workorders_for_client(request):
    client_id = request.GET.get('client_id')
    work_orders = WorkOrder.objects.filter(client_id=client_id).values('id', 'job_description', 'estimated_cost')
    return JsonResponse(list(work_orders), safe=False)

# ✅ RENAMED: invoice_unpaid (already had correct name)
@login_required
def invoice_unpaid(request):
    query = request.GET.get('q', '')
    invoices = Invoice.objects.filter(status='unpaid').order_by('-date_created')
    if query:
        invoices = invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
    return render(request, 'invoices/invoice_unpaid.html', {'invoices': invoices, 'query': query})

# ✅ RENAMED: invoice_paid -> invoice_in_quickbooks (shows 'in_quickbooks' status)
@login_required
def invoice_in_quickbooks(request):
    query = request.GET.get('q', '')
    invoices = Invoice.objects.filter(status='in_quickbooks').order_by('-date_created')
    if query:
        invoices = invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
    return render(request, 'invoices/invoice_in_quickbooks.html', {'invoices': invoices, 'query': query})

# ✅ RENAMED: invoice_overdue -> invoice_paid (shows 'paid' status)
@login_required
def invoice_paid(request):
    query = request.GET.get('q', '')
    invoices = Invoice.objects.filter(status='paid').order_by('-date_created')
    if query:
        invoices = invoices.filter(
            Q(invoice_number__icontains=query) | Q(client__name__icontains=query)
        )
    return render(request, 'invoices/invoice_paid.html', {'invoices': invoices, 'query': query})

@login_required
def invoice_create(request):
    work_order_id = request.GET.get('work_order')
    work_order = None
    events = []

    if work_order_id:
        try:
            work_order = WorkOrder.objects.get(id=work_order_id)
            events = work_order.events.all()
        except WorkOrder.DoesNotExist:
            messages.error(request, "Invalid work order.")
            return redirect('invoice_list')

    if request.method == "POST":
        form = InvoiceForm(request.POST)
        if form.is_valid():
            invoice = form.save(commit=False)
            invoice.status = 'unpaid'
            invoice.date_created = timezone.now()

            if work_order:
                invoice.client = work_order.client
                invoice.work_order = work_order
                work_order.invoiced = True
                work_order.save()

            invoice.save()
            messages.success(request, "Invoice created successfully.")
            return redirect('invoice_detail', invoice_id=invoice.id)
    else:
        # ✅ Pre-populate form with work order data
        initial_data = {'work_order': work_order}
        if work_order and work_order.estimated_cost:
            initial_data['amount'] = work_order.estimated_cost
        
        form = InvoiceForm(initial=initial_data)

    form.fields['work_order'].queryset = WorkOrder.objects.filter(status='completed')

    return render(request, 'invoices/invoice_form.html', {
        'form': form,
        'client_id': work_order.client.id if work_order else None,
        'events': events,
        'work_order': work_order,  # ✅ Pass work order for template context
        'creating': True,  # ✅ Flag to show this is creation, not editing
    })

# ---------- AJAX VIEWS ----------

@login_required
def ajax_get_clients(request):
    """Return JSON list of clients matching the query term."""
    q = request.GET.get('q', '')
    clients = Client.objects.filter(name__icontains=q).order_by('name')[:20]
    results = [{'id': c.id, 'text': c.name} for c in clients]
    return JsonResponse(results, safe=False)

@login_required
def ajax_get_active_workorders(request):
    """Return JSON list of completed work orders for a given client."""
    client_id = request.GET.get('client_id')
    if not client_id:
        return JsonResponse([], safe=False)
    
    work_orders = WorkOrder.objects.filter(
        client_id=client_id,
        status='completed'
    )

    results = [
        {
            'id': wo.id,
            'text': f"Order #{wo.id} – {wo.job_description[:40]}{'...' if len(wo.job_description) > 40 else ''}"
        }
        for wo in work_orders
    ]
    return JsonResponse(results, safe=False)

@login_required
def change_invoice_status(request, invoice_id):
    """Change invoice status with confirmation"""
    invoice = get_object_or_404(Invoice, id=invoice_id)
    new_status = request.POST.get('new_status')
    
    if request.method == 'POST' and new_status in ['unpaid', 'in_quickbooks', 'paid']:
        old_status = invoice.status
        invoice.status = new_status
        invoice.save()
        
        # Create a status change message
        status_messages = {
            'unpaid': 'moved back to Not in QuickBooks',
            'in_quickbooks': 'marked as In QuickBooks',
            'paid': 'marked as Paid'
        }
        
        messages.success(request, f"Invoice #{invoice.invoice_number} {status_messages[new_status]}.")
        
    return HttpResponseRedirect(request.META.get('HTTP_REFERER', reverse('invoice_list')))

@login_required
def load_more_invoices(request):
    """AJAX endpoint to load more invoices"""
    if not request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({'error': 'Invalid request'}, status=400)
    
    section = request.GET.get('section')
    offset = int(request.GET.get('offset', 0))
    limit = 5
    
    # Determine which queryset to use based on section
    if section == 'unpaid':
        invoices = Invoice.objects.filter(status='unpaid')\
                                 .order_by('-date_created')[offset:offset+limit]
    elif section == 'in_quickbooks':
        invoices = Invoice.objects.filter(status='in_quickbooks')\
                                 .order_by('-date_created')[offset:offset+limit]
    elif section == 'paid':
        invoices = Invoice.objects.filter(status='paid')\
                                 .order_by('-date_created')[offset:offset+limit]
    else:
        return JsonResponse({'error': 'Invalid section'}, status=400)
    
    # Check if there are more items after this batch
    has_more = len(invoices) == limit
    if has_more:
        # Check if there are actually more items beyond this batch
        if section == 'unpaid':
            total_count = Invoice.objects.filter(status='unpaid').count()
        elif section == 'in_quickbooks':
            total_count = Invoice.objects.filter(status='in_quickbooks').count()
        elif section == 'paid':
            total_count = Invoice.objects.filter(status='paid').count()
        
        has_more = (offset + limit) < total_count
    
    # Render separate templates for desktop and mobile
    from django.template.loader import render_to_string
    
    context = {
        'invoices': invoices,
        'section': section,
    }
    
    desktop_html = render_to_string('invoices/partials/invoice_rows.html', context, request=request)
    mobile_html = render_to_string('invoices/partials/invoice_cards_mobile.html', context, request=request)
    
    return JsonResponse({
        'desktop_html': desktop_html,
        'mobile_html': mobile_html,
        'count': len(invoices),
        'has_more': has_more,
    })

===== invoices/forms.py =====
from django import forms
from .models import Invoice
from workorders.models import WorkOrder

class InvoiceForm(forms.ModelForm):
    class Meta:
        model = Invoice
        fields = [
            'work_order',
            'amount',
            'status',
            'notes',
        ]
        widgets = {
            'work_order': forms.Select(attrs={'class': 'form-control select2'}),
            'amount': forms.NumberInput(attrs={'class': 'form-control'}),
            'status': forms.Select(attrs={'class': 'form-control'}),
            'notes': forms.Textarea(attrs={'class': 'form-control', 'rows': 3}),
        }

===== invoices/urls.py =====
from django.urls import path
from . import views

urlpatterns = [
    path('', views.invoice_list, name='invoice_list'),
    path('create/', views.invoice_create, name='invoice_create'),
    path('<int:invoice_id>/', views.invoice_detail, name='invoice_detail'),
    path('<int:invoice_id>/edit/', views.invoice_update, name='invoice_update'),
    path('<int:invoice_id>/delete/', views.invoice_delete, name='invoice_delete'),
    
    # Status views
    path('unpaid/', views.invoice_unpaid, name='invoice_unpaid'),
    path('in-quickbooks/', views.invoice_in_quickbooks, name='invoice_in_quickbooks'),
    path('paid/', views.invoice_paid, name='invoice_paid'),
    
    path('<int:invoice_id>/mark_paid/', views.mark_invoice_paid, name='mark_invoice_paid'),

    # Enhanced status management
    path('change_status/<int:invoice_id>/', views.change_invoice_status, name='change_invoice_status'),

    # PDF generation
    path('<int:invoice_id>/pdf/', views.invoice_pdf, name='invoice_pdf'),

    # AJAX endpoints
    path('ajax/get_clients/', views.ajax_get_clients, name='ajax_get_clients'),
    path('ajax_get_active_workorders/', views.ajax_get_active_workorders, name='ajax_get_active_workorders'),

    path('load-more/', views.load_more_invoices, name='load_more_invoices'),

]

===== invoices/admin.py =====
from django.contrib import admin
from .models import Invoice
from import_export.admin import ImportExportModelAdmin
from .resources import InvoiceResource

@admin.register(Invoice)
class InvoiceAdmin(ImportExportModelAdmin):
    resource_class = InvoiceResource
    list_display = ('invoice_number', 'client', 'amount', 'status', 'date_created')
    list_filter = ('status', 'date_created')
    search_fields = ('invoice_number', 'client__name')
    ordering = ('-date_created',)
    date_hierarchy = 'date_created'
    readonly_fields = ['date_created']

    fieldsets = (
        (None, {
            'fields': ('invoice_number', 'client', 'work_order', 'amount', 'status')
        }),
        ('Dates', {
            'fields': ('date_created',)
        }),
        ('Additional Info', {
            'fields': ('notes',),
            'classes': ('collapse',)
        }),
    )

===== django_project/settings.py =====
from environ import Env
from pathlib import Path
import os

# Initialize environment variables
env = Env()
Env.read_env()

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# ✅ Security settings
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # Required for Heroku

# Secret Key & Debug Mode
SECRET_KEY = env("DJANGO_SECRET_KEY", default="No Secret Key Found")
DEBUG = env.bool("DJANGO_DEBUG", default=False)

# ✅ Allowed Hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=[
    "localhost",
    "127.0.0.1",
    "art-moving-buisness-0a734245a61f.herokuapp.com",
    "ejartmover.net",
    "www.ejartmover.net"
])

# ✅ Installed Apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom apps
    'accounts.apps.AccountsConfig',
    'pages.apps.PagesConfig',
    'workorders',
    'clients',
    'invoices',
    "calendar_app",


    # Third-party packages
    'crispy_forms',
    'crispy_bootstrap5',
    'import_export',

]

# ✅ Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ✅ URL Configuration
ROOT_URLCONF = 'django_project.urls'

# ✅ Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Include custom templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ✅ WSGI Application
WSGI_APPLICATION = 'django_project.wsgi.application'

# ✅ Database Configuration
DATABASES = {
    "default": env.db_url("DATABASE_URL")
}


# ✅ Authentication
AUTH_USER_MODEL = 'accounts.CustomUser'

# ✅ Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# ✅ Localization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # 👈 crucial for collectstatic to find non-app static files
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ✅ Default Primary Key
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ✅ Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ✅ Login & Logout
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = "/"  

# ✅ Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
    SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000)  # 30 days
    SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
    SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
    SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
    CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False


STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

IMPORT_EXPORT_USE_TRANSACTIONS = True


===== django_project/urls.py =====
from django.contrib import admin
from django.urls import path, include
from django.conf.urls.static import static
from django.conf import settings

urlpatterns = [
    path("admin/", admin.site.urls),
    path("accounts/", include("accounts.urls")),
    path("accounts/", include("django.contrib.auth.urls")),
    path("", include("pages.urls")),           
    path("workorders/", include("workorders.urls")),
    path("clients/", include("clients.urls")),
    path("invoices/", include("invoices.urls")),
    path('calendar/', include('calendar_app.urls', namespace='calendar_app')),
]

if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    # ✅ ADD THIS LINE - this is what's missing!
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

    

===== django_project/asgi.py =====
"""
ASGI config for django_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_asgi_application()


===== django_project/wsgi.py =====
"""
WSGI config for django_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')

application = get_wsgi_application()


===== templates/clients/client_detail.html =====
{% extends "base.html" %}
{% block title %}Client Detail{% endblock %}

{% block content %}
<div class="container py-4">

  <!-- Client Summary -->
  <div class="card mb-4">
    <div class="card-header bg-secondary text-white">
      <h5 class="mb-0">Client: {{ client.name }}</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p><strong>Email:</strong> {{ client.email|default:"Not provided" }}</p>
          <p><strong>Phone:</strong> {{ client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p><strong>Service Address:</strong> {{ client.address|default:"Not provided" }}</p>
          <p><strong>Billing Address:</strong> {{ client.billing_address|default:"Not provided" }}</p>
        </div>
      </div>
    </div>
    <div class="card-footer d-flex justify-content-between">
      <a href="{% url 'client_edit' client.id %}" class="btn btn-warning">Edit Client</a>
      <a href="{% url 'client_list' %}" class="btn btn-secondary">Back to Clients</a>
    </div>
  </div>

  <!-- Related Work Orders -->
  <div class="card mb-4">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">Work Orders</h5>
    </div>
    <div class="card-body">
      {% if client.work_orders.all %}
      <ul class="list-group">
        {% for order in client.work_orders.all %}
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <div>
              <a href="{% url 'workorder_detail' order.id %}">Work Order #{{ order.id }}</a> –
              {{ order.job_description|truncatewords:6 }}
            </div>
            <span class="badge bg-info text-dark">{{ order.get_status_display }}</span>
          </li>
        {% endfor %}
      </ul>
      {% else %}
        <p>No work orders available.</p>
      {% endif %}
    </div>
  </div>

</div>
{% endblock %}

===== templates/clients/client_form.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block title %}{% if client %}Edit Client{% else %}Add New Client{% endif %}{% endblock %}
{% block content %}
<div class="container">
  <h2>{% if client %}Edit Client{% else %}Add New Client{% endif %}</h2>
  <form method="post">
    {% csrf_token %}
    {{ form|crispy }}
    <button type="submit" class="btn btn-success">{% if client %}Update Client{% else %}Create Client{% endif %}</button>
  </form>
  <a href="{% url 'client_list' %}" class="btn btn-secondary mt-3">Back to Clients</a>
</div>
{% endblock %}


===== templates/clients/client_list.html =====
{% extends "base.html" %}
{% block title %}Clients{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Clients</h2>
  
  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by client name..." value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>
  
  <a href="{% url 'client_create' %}" class="btn btn-success mb-3">Add New Client</a>

  <!-- Responsive Scrollable Table -->
  <div class="card shadow-sm">
    <div class="card-body table-responsive">
      <table class="table table-striped align-middle">
        <thead class="small">
          <tr>
            <th style="min-width: 120px;">Name</th>
            <th style="min-width: 180px;">Email</th>
            <th style="min-width: 120px;">Phone</th>
            <th style="min-width: 250px;">Address</th>
          </tr>
        </thead>
        <tbody>
          {% for client in clients %}
          <tr>
            <td class="text-truncate" style="max-width: 150px;">
              <a href="{% url 'client_detail' client.id %}">{{ client.name }}</a>
            </td>
            <td class="text-truncate" style="max-width: 200px;">{{ client.email }}</td>
            <td class="text-truncate" style="max-width: 150px;">{{ client.phone }}</td>
            <td class="text-truncate" style="max-width: 300px;">{{ client.address }}</td>
          </tr>
          {% empty %}
          <tr>
            <td colspan="4">No clients found.</td>
          </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
  </div>
</div>
{% endblock %}


===== templates/registration/login.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Login{% endblock %}

{% block content %}
<div class="container mt-4">
    <h2>Login</h2>
    <form method="post">
        {% csrf_token %}
        {{ form|crispy }}
        <button type="submit" class="btn btn-primary">Login</button>
    </form>
    <!-- Signup link removed - users are created through admin interface -->
</div>
{% endblock %}

===== templates/registration/logout.html =====
{% extends "base.html" %}

{% block title %}Logout{% endblock %}

{% block content %}
<div class="container text-center mt-4">
    <h2>You have been logged out</h2>
    <a href="{% url 'login' %}" class="btn btn-primary">Login Again</a>
</div>
{% endblock %}


===== templates/home.html =====
{% extends "base.html" %}
{% block title %}Dashboard – Art Moving Business{% endblock %}

{% block content %}
  <!-- Welcome Hero -->
  <div class="text-center mb-4">
    <h2 class="fw-bold">Welcome back, {{ user.username }} 👋</h2>
    <p class="text-muted">Here’s what’s happening today in your business.</p>
  </div>

  <!-- Quick Action Buttons -->
  <div class="row g-3 justify-content-center">
    <div class="col-lg-3 col-md-4 col-sm-6">
      <a href="{% url 'workorder_list' %}" class="btn btn-primary w-100 py-4 shadow-sm d-flex flex-column align-items-center">
        <i class="bi bi-card-checklist fs-1 mb-2"></i>
        <span>Work Orders</span>
      </a>
    </div>
    <div class="col-lg-3 col-md-4 col-sm-6">
      <a href="{% url 'client_list' %}" class="btn btn-warning w-100 py-4 shadow-sm d-flex flex-column align-items-center">
        <i class="bi bi-people-fill fs-1 mb-2"></i>
        <span>Clients</span>
      </a>
    </div>
    <div class="col-lg-3 col-md-4 col-sm-6">
      <a href="{% url 'invoice_list' %}" class="btn btn-danger w-100 py-4 shadow-sm d-flex flex-column align-items-center">
        <i class="bi bi-receipt fs-1 mb-2"></i>
        <span>Invoicing</span>
      </a>
    </div>
  </div>

  <!-- Calendar & Legend -->
  {% now "m-d-y" as today %}
  <div class="card shadow-sm mt-4">
    <div class="card-header d-flex align-items-center">
      <div class="btn-group me-3">
        <a href="{% url 'home' %}" class="btn btn-outline-secondary">Month</a>
        <a href="{% url 'calendar_app:week_detail' today %}" class="btn btn-outline-primary">Week</a>
        <a href="{% url 'calendar_app:day_detail' today %}" class="btn btn-outline-primary">Day</a>
      </div>
      <h5 class="mb-0">Calendar</h5>
    </div>
    <div class="card-body">
      <!-- Legend -->
      <div class="mb-3">
        <span class="badge bg-secondary me-2">Work Order Events</span>
        <small class="d-block text-muted mt-1">
          Work order events are color-coded uniquely per job.
        </small>
      </div>
      <!-- FullCalendar -->
      <div id="calendar"></div>
    </div>
  </div>
{% endblock %}


{% block extra_js %}
<script>
document.addEventListener("DOMContentLoaded", function () {
  function toMMDDYY(iso) {
    let [Y, M, D] = iso.split('-');
    return `${M}-${D}-${Y.slice(-2)}`;
  }

  const calendarEl = document.getElementById("calendar");
  if (!calendarEl) {
    console.error("Calendar element not found!");
    return;
  }

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: "dayGridMonth",
    height: 'auto',
    events: async function(fetchInfo, success, fail) {
      try {
        // Backend provides colors and proper ordering
        const workOrders = await fetch("/workorders/calendar-data/workorders/").then(r => r.json());
        success(workOrders);
      } catch (e) {
        console.error("Calendar fetch error:", e);
        fail(e);
      }
    },
    eventOrder: "dailyOrder", // Use dailyOrder field for event ordering
    eventClick: info => {
      if (info.event.url) {
        window.location.href = info.event.url;
        info.jsEvent.preventDefault();
      }
    },
    dateClick: info => {
      const mmddyy = toMMDDYY(info.dateStr);
      window.location.href = `/calendar/day/${mmddyy}/`;
    }
  });

  calendar.render();
});
</script>
{% endblock %}

===== templates/calendar/day_detail.html =====
{% extends "base.html" %}
{% block title %}Day: {{ day|date:"F j, Y" }}{% endblock %}

{% block extra_css %}
<style>
.daily-schedule {
  max-width: 800px;
  margin: 0 auto;
}

.event-card {
  background: white;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  margin-bottom: 8px;
  padding: 12px;
  cursor: grab;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 12px;
  border-left: 4px solid;
}

.event-card:hover {
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.event-card:active {
  cursor: grabbing;
}

.event-card.sortable-ghost {
  opacity: 0.5;
  background: #f8f9fa;
}

.order-number {
  background: #495057;
  color: white;
  border-radius: 50%;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 0.9rem;
  flex-shrink: 0;
}

.drag-handle {
  color: #6c757d;
  font-size: 1.2em;
  padding: 8px;
  min-width: 40px;
  text-align: center;
}

.event-time {
  min-width: 120px;
}

.event-time input {
  cursor: text; /* Override draggable cursor for input */
}

.event-details {
  flex: 1;
}

.event-details a {
  cursor: pointer; /* Override draggable cursor for links */
}

.schedule-status {
  padding: 8px 12px;
  border-radius: 4px;
  margin-bottom: 16px;
  display: none;
}

.schedule-status.success {
  background: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.schedule-status.error {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

/* Mobile optimizations */
@media (max-width: 768px) {
  .event-card {
    flex-direction: column;
    align-items: stretch;
    gap: 8px;
  }
  
  .drag-handle {
    order: -1;
    align-self: center;
    padding: 12px;
  }
  
  .event-time {
    min-width: auto;
  }
  
  .event-time input {
    font-size: 16px; /* Prevents zoom on iOS */
  }
}

@media print {
  .drag-handle, #save-schedule, .schedule-status {
    display: none !important;
  }
  .event-card {
    cursor: default;
  }
}
</style>
{% endblock %}

{% block content %}
  {% now "m-d-y" as today %}

  <!-- View Switcher Buttons -->
  <div class="mb-3 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'home' %}" class="btn btn-outline-secondary w-100 w-sm-auto">Month</a>
      <a href="{% url 'calendar_app:week_detail' today %}" class="btn btn-outline-primary w-100 w-sm-auto">Week</a>
      <a href="{% url 'calendar_app:day_detail' today %}" class="btn btn-outline-secondary w-100 w-sm-auto">Day</a>
    </div>
  </div>

  <!-- Search -->
  <form method="get" class="mb-3">
    <input type="text" name="q" class="form-control" placeholder="Search…" value="{{ query }}">
  </form>

  <!-- Calendar -->
  <div id="calendar" class="mb-4"></div>

  <!-- Daily Schedule - SINGLE EVENT LIST -->
  <div class="daily-schedule">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h4>Daily Schedule for {{ day|date:"l, F j, Y" }}</h4>
      <button class="btn btn-sm btn-success" id="save-schedule" style="display: none;">
        <i class="bi bi-floppy me-1"></i>Save Schedule
      </button>
    </div>
    
    <!-- Status Messages -->
    <div id="schedule-status" class="schedule-status"></div>
    
    {% if events %}
      <div id="sortable-events">
        {% for evt in events %}
        <div class="event-card" data-event-id="{{ evt.id }}" style="border-left-color: {{ evt.color }};">
          <div class="order-number">{{ evt.display_order }}</div>
          
          <div class="drag-handle">
            <i class="bi bi-grip-vertical"></i>
          </div>
          
          <div class="event-time">
            <input type="time" 
                   class="form-control form-control-sm time-input" 
                   value="{% if evt.scheduled_time %}{{ evt.scheduled_time|time:'H:i' }}{% endif %}"
                   placeholder="Set time">
          </div>
          
          <div class="event-details">
            <div class="fw-bold text-primary">{{ evt.get_event_type_display }}</div>
            <div>
              <a href="{% url 'workorder_detail' evt.work_order.id %}" class="text-decoration-none">
                {{ evt.work_order.client.name }}
              </a>
            </div>
            {% if evt.address %}
              <small class="text-muted">{{ evt.address }}</small>
            {% endif %}
          </div>
        </div>
        {% endfor %}
      </div>
    {% else %}
      <div class="text-center text-muted py-5">
        <i class="bi bi-calendar-x fs-1 mb-2 d-block"></i>
        <p>No events scheduled for this day.</p>
      </div>
    {% endif %}
  </div>

  <!-- Print Button -->
  {% if events %}
  <div class="text-center mt-4">
    <button onclick="window.print()" class="btn btn-secondary">
      <i class="bi bi-printer me-1"></i>Print Schedule
    </button>
  </div>
  {% endif %}
{% endblock %}

{% block extra_js %}
<!-- Include SortableJS -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const dayStr = "{{ day|date:'m-d-y' }}";
  let hasUnsavedChanges = false;
  
  // Initialize calendar (using backend-provided colors and ordering)
  function toMMDDYY(iso) {
    let [Y, M, D] = iso.split('-');
    return `${M}-${D}-${Y.slice(-2)}`;
  }

  async function fetchSources(info, success, fail) {
    try {
      const wo = await fetch("/workorders/calendar-data/workorders/").then(r => r.json());
      success(wo); // Backend provides colors and proper ordering
    } catch (e) {
      console.error("Calendar fetch error:", e);
      fail(e);
    }
  }

  function goToEventUrl(info) {
    if (info.event.url) {
      window.location.href = info.event.url;
      info.jsEvent.preventDefault();
    }
  }

  const calendarEl = document.getElementById("calendar");
  if (calendarEl) {
    const calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: "dayGridDay",
      height: "auto",
      initialDate: "{{ day|date:'Y-m-d' }}",
      events: fetchSources,
      eventClick: goToEventUrl,
      eventOrder: "dailyOrder", // Use the dailyOrder field for sorting
      datesSet: function(info) {
        const currentDate = "{{ day|date:'Y-m-d' }}";
        const newDate = info.start.toISOString().split('T')[0];
        
        if (newDate !== currentDate) {
          const mmddyy = toMMDDYY(newDate);
          window.location.href = `/calendar/day/${mmddyy}/`;
        }
      }
    });
    calendar.render();
  }

  // Initialize drag & drop - WHOLE CARD IS NOW DRAGGABLE
  const sortableList = document.getElementById('sortable-events');
  if (sortableList) {
    Sortable.create(sortableList, {
      animation: 150,
      ghostClass: 'sortable-ghost',
      onEnd: function(evt) {
        updateOrderNumbers();
        markAsChanged();
      }
    });
  }

  // Update order numbers after drag
  function updateOrderNumbers() {
    const cards = document.querySelectorAll('.event-card');
    cards.forEach((card, index) => {
      const orderNumber = card.querySelector('.order-number');
      if (orderNumber) {
        orderNumber.textContent = index + 1;
      }
    });
  }

  // Handle time input changes
  document.addEventListener('change', function(e) {
    if (e.target.classList.contains('time-input')) {
      markAsChanged();
    }
  });

  // Save button
  document.getElementById('save-schedule')?.addEventListener('click', saveSchedule);

  function markAsChanged() {
    hasUnsavedChanges = true;
    document.getElementById('save-schedule').style.display = 'inline-block';
  }

  function saveSchedule() {
    const events = [];
    const eventCards = document.querySelectorAll('.event-card');
    
    eventCards.forEach((card, index) => {
      const timeInput = card.querySelector('.time-input');
      events.push({
        id: card.dataset.eventId,
        order: index + 1,
        time: timeInput.value || null
      });
    });

    // Show loading state
    const saveBtn = document.getElementById('save-schedule');
    const originalText = saveBtn.innerHTML;
    saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Saving...';
    saveBtn.disabled = true;

    fetch(`/calendar/day/${dayStr}/update-order/`, {
      method: 'POST',
      headers: {
        'X-CSRFToken': getCookie('csrftoken'),
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({events: events})
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showStatus('Schedule saved successfully! All calendar views updated.', 'success');
        hasUnsavedChanges = false;
        saveBtn.style.display = 'none';
        
        // Refresh the calendar widget to show new ordering
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showStatus('Error saving schedule: ' + data.error, 'error');
      }
    })
    .catch(error => {
      showStatus('Error saving schedule. Please try again.', 'error');
    })
    .finally(() => {
      saveBtn.innerHTML = originalText;
      saveBtn.disabled = false;
    });
  }

  function showStatus(message, type) {
    const statusEl = document.getElementById('schedule-status');
    statusEl.textContent = message;
    statusEl.className = `schedule-status ${type}`;
    statusEl.style.display = 'block';
    
    setTimeout(() => {
      statusEl.style.display = 'none';
    }, 5000);
  }

  function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
      const cookies = document.cookie.split(';');
      for (let i = 0; i < cookies.length; i++) {
        const cookie = cookies[i].trim();
        if (cookie.substring(0, name.length + 1) === (name + '=')) {
          cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
          break;
        }
      }
    }
    return cookieValue;
  }

  // Warn about unsaved changes
  window.addEventListener('beforeunload', function(e) {
    if (hasUnsavedChanges) {
      e.preventDefault();
      e.returnValue = '';
    }
  });
});
</script>
{% endblock %}

===== templates/calendar/week_detail.html =====
{% extends "base.html" %}
{% block title %}Week of {{ start|date:"M j, Y" }}{% endblock %}

{% block content %}
  {% now "m-d-y" as today %}

  <!-- View Navigation Buttons -->
  <div class="mb-3 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'home' %}" class="btn btn-outline-secondary w-100 w-sm-auto">Month</a>
      <a href="{% url 'calendar_app:week_detail' today %}" class="btn btn-outline-primary w-100 w-sm-auto">Week</a>
      <a href="{% url 'calendar_app:day_detail' today %}" class="btn btn-outline-secondary w-100 w-sm-auto">Day</a>
    </div>
  </div>

  <!-- Search -->
  <form method="get" class="mb-3">
    <input type="text" name="q" class="form-control" placeholder="Search…" value="{{ query }}">
  </form>

  <!-- Calendar -->
  <div id="calendar"></div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener("DOMContentLoaded", function () {
  function toMMDDYY(iso) {
    let [Y, M, D] = iso.split("-");
    return `${M}-${D}-${Y.slice(-2)}`;
  }

  async function fetchSources(info, success, fail) {
    try {
      // Backend provides colors and proper ordering
      const wo = await fetch("/workorders/calendar-data/workorders/").then(r => r.json());
      success(wo);
    } catch (e) {
      console.error("Calendar fetch error:", e);
      fail(e);
    }
  }

  function goToEventUrl(info) {
    if (info.event.url) {
      window.location.href = info.event.url;
      info.jsEvent.preventDefault();
    }
  }

  function goToDayDetail(info) {
    const mmddyy = toMMDDYY(info.dateStr);
    window.location.href = `/calendar/day/${mmddyy}/`;
  }

  const calendarEl = document.getElementById("calendar");
  if (!calendarEl) return console.error("Calendar element not found!");

  const calendar = new FullCalendar.Calendar(calendarEl, {
    initialView: "dayGridWeek",
    height: "auto",
    initialDate: "{{ start|date:'Y-m-d' }}",
    events: fetchSources,
    eventOrder: "dailyOrder", // FIXED: Use dailyOrder field for event ordering
    eventClick: goToEventUrl,
    dateClick: goToDayDetail
  });

  calendar.render();

  // Make day headers clickable
  setTimeout(() => {
    document.querySelectorAll(".fc-col-header-cell").forEach((th, i) => {
      const start = new Date("{{ start|date:'Y-m-d' }}");
      const thisDate = new Date(start.getFullYear(), start.getMonth(), start.getDate() + i);

      const mm = String(thisDate.getMonth() + 1).padStart(2, '0');
      const dd = String(thisDate.getDate()).padStart(2, '0');
      const yy = String(thisDate.getFullYear()).slice(-2);

      th.style.cursor = "pointer";
      th.style.textDecoration = "underline";
      th.title = "Go to Day Detail";

      th.addEventListener("click", () => {
        window.location.href = `/calendar/day/${mm}-${dd}-${yy}/`;
      });
    });
  }, 0);
});
</script>
{% endblock %}

===== templates/invoices/invoice_paid.html =====
{% extends "base.html" %}
{% block title %}Paid Invoices{% endblock %}

{% block content %}
<div class="container">
  <h2 class="mb-4">Paid</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not in QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>

  <div class="card shadow-sm">
    <div class="card-header bg-success text-white">Paid</div>
    <div class="card-body p-0">
      {% if invoices %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr><th>Invoice #</th><th>Client</th><th>Amount</th><th>Actions</th></tr>
              </thead>
              <tbody>
                {% for inv in invoices %}
                <tr>
                  <td>{{ inv.invoice_number }}</td>
                  <td>{{ inv.client.name }}</td>
                  <td>${{ inv.amount }}</td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="in_quickbooks">
                        <button type="submit" class="btn btn-sm btn-outline-warning"
                                onclick="return confirm('Move back to In QuickBooks?')">
                          <i class="bi bi-arrow-left"></i> Back to QB
                        </button>
                      </form>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="unpaid">
                        <button type="submit" class="btn btn-sm btn-outline-danger"
                                onclick="return confirm('Move back to Not in QuickBooks?')">
                          <i class="bi bi-arrow-left"></i> Back to Unpaid
                        </button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for inv in invoices %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Invoice #{{ inv.invoice_number }}</strong></div>
              <div class="text-muted small">{{ inv.client.name }}</div>
              <div class="text-success fw-bold">${{ inv.amount }}</div>
            </div>
            <div class="d-flex flex-column gap-2">
              <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
              <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="in_quickbooks">
                <button type="submit" class="btn btn-sm btn-outline-warning w-100"
                        onclick="return confirm('Move back to In QuickBooks?')">
                  <i class="bi bi-arrow-left"></i> Back to QuickBooks
                </button>
              </form>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="unpaid">
                <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                        onclick="return confirm('Move back to Not in QuickBooks?')">
                  <i class="bi bi-arrow-left"></i> Back to Not in QB
                </button>
              </form>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No paid invoices found.</p>
      {% endif %}
    </div>
  </div>

  <!-- Navigation -->
  <div class="text-center mt-4">
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/invoices/invoice_unpaid.html =====
{% extends "base.html" %}
{% block title %}Not in QuickBooks{% endblock %}

{% block content %}
<div class="container">
  <h2 class="mb-4">Not in QuickBooks</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not in QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>

  <div class="card shadow-sm">
    <div class="card-header bg-danger text-white">Not in QuickBooks</div>
    <div class="card-body p-0">
      {% if invoices %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr><th>Invoice #</th><th>Client</th><th>Amount</th><th>Actions</th></tr>
              </thead>
              <tbody>
                {% for inv in invoices %}
                <tr>
                  <td>{{ inv.invoice_number }}</td>
                  <td>{{ inv.client.name }}</td>
                  <td>${{ inv.amount }}</td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="in_quickbooks">
                        <button type="submit" class="btn btn-sm btn-success">Mark as In QB</button>
                      </form>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="paid">
                        <button type="submit" class="btn btn-sm btn-primary">Mark as Paid</button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for inv in invoices %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Invoice #{{ inv.invoice_number }}</strong></div>
              <div class="text-muted small">{{ inv.client.name }}</div>
              <div class="text-success fw-bold">${{ inv.amount }}</div>
            </div>
            <div class="d-flex flex-column gap-2">
              <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
              <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="in_quickbooks">
                <button type="submit" class="btn btn-sm btn-success w-100">Mark as In QuickBooks</button>
              </form>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="paid">
                <button type="submit" class="btn btn-sm btn-primary w-100">Mark as Paid</button>
              </form>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No invoices found.</p>
      {% endif %}
    </div>
  </div>

  <!-- Navigation Buttons -->
  <div class="text-center mt-4">
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/invoices/invoice_pdf.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Invoice #{{ invoice.invoice_number }}</title>
  <style>
    body { 
      font-family: 'Arial', sans-serif; 
      color: #333; 
      margin: 1rem;
      line-height: 1.4;
    }
    
    .header { 
      text-align: center; 
      margin-bottom: 2rem; 
      border-bottom: 2px solid #28a745;
      padding-bottom: 1rem;
    }
    
    .logo { 
      font-size: 1.5rem; 
      font-weight: bold; 
      margin-bottom: 0.5rem;
    }
    
    .invoice-title {
      font-size: 1.8rem;
      margin: 0;
      color: #28a745;
    }
    
    .invoice-info {
      display: flex;
      justify-content: space-between;
      margin-bottom: 2rem;
      background-color: #f8f9fa;
      padding: 1rem;
      border-radius: 0.5rem;
      border-left: 4px solid #28a745;
    }
    
    .invoice-details {
      text-align: right;
    }
    
    .section { 
      margin-bottom: 1.5rem; 
      break-inside: avoid;
    }
    
    .section-title { 
      background-color: #f8f9fa;
      border-left: 4px solid #28a745;
      padding: 0.5rem 1rem;
      margin-bottom: 1rem; 
      font-size: 1.1rem;
      font-weight: bold;
      color: #495057;
    }
    
    .info-row {
      display: flex;
      margin-bottom: 0.5rem;
    }
    
    .info-label { 
      font-weight: bold; 
      width: 150px; 
      display: inline-block;
      color: #495057;
    }
    
    .info-value {
      flex: 1;
    }
    
    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-size: 0.875rem;
      display: inline-block;
      font-weight: bold;
    }
    
    .status-unpaid {
      background-color: #dc3545;
      color: white;
    }
    
    .status-in-quickbooks {
      background-color: #ffc107;
      color: #212529;
    }
    
    .status-paid {
      background-color: #28a745;
      color: white;
    }
    
    .amount-section {
      background-color: #e9ecef;
      border: 2px solid #28a745;
      border-radius: 0.5rem;
      padding: 1.5rem;
      text-align: center;
      margin: 1.5rem 0;
    }
    
    .amount-label {
      font-size: 1.1rem;
      color: #495057;
      margin-bottom: 0.5rem;
    }
    
    .amount-value {
      font-size: 2rem;
      font-weight: bold;
      color: #28a745;
    }
    
    .event-item {
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 0.25rem;
      padding: 0.75rem;
      margin-bottom: 0.5rem;
    }
    
    .event-type {
      font-weight: bold;
      color: #28a745;
      margin-bottom: 0.25rem;
    }
    
    .event-details {
      font-size: 0.9rem;
      color: #6c757d;
    }
    
    .two-column {
      display: flex;
      gap: 2rem;
    }
    
    .column {
      flex: 1;
    }
    
    .notes-section {
      background-color: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 0.25rem;
      padding: 1rem;
      margin: 1rem 0;
    }
    
    .work-order-link {
      background-color: #d1ecf1;
      border: 1px solid #bee5eb;
      border-radius: 0.25rem;
      padding: 1rem;
      margin: 1rem 0;
    }
    
    .footer {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #dee2e6;
      text-align: center;
      font-size: 0.9rem;
      color: #6c757d;
    }
    
    @media print {
      body { margin: 0; }
      .section { break-inside: avoid; }
    }
  </style>
</head>
<body>

  <div class="header">
    <div class="logo">EJ Art Moving</div>
    <h1 class="invoice-title">Invoice #{{ invoice.invoice_number }}</h1>
  </div>

  <!-- Invoice Summary -->
  <div class="invoice-info">
    <div>
      <h3 style="margin: 0 0 0.5rem 0; color: #28a745;">Invoice Information</h3>
      <div><strong>Invoice Number:</strong> {{ invoice.invoice_number }}</div>
      <div><strong>Date Created:</strong> {{ invoice.date_created|date:"F j, Y" }}</div>
    </div>
    <div class="invoice-details">
      <div><strong>Status:</strong> 
        <span class="status-badge 
          {% if invoice.status == 'unpaid' %}status-unpaid
          {% elif invoice.status == 'in_quickbooks' %}status-in-quickbooks  
          {% else %}status-paid{% endif %}">
          {{ invoice.get_status_display }}
        </span>
      </div>
      {% if invoice.work_order %}
        <div style="margin-top: 0.5rem;"><strong>Work Order:</strong> #{{ invoice.work_order.id }}</div>
      {% endif %}
    </div>
  </div>

  <!-- Client Information -->
  <div class="section">
    <div class="section-title">Bill To</div>
    <div class="two-column">
      <div class="column">
        <div class="info-row">
          <span class="info-label">Name:</span>
          <span class="info-value">{{ invoice.client.name }}</span>
        </div>
        <div class="info-row">
          <span class="info-label">Email:</span>
          <span class="info-value">{{ invoice.client.email|default:"Not provided" }}</span>
        </div>
        <div class="info-row">
          <span class="info-label">Phone:</span>
          <span class="info-value">{{ invoice.client.phone|default:"Not provided" }}</span>
        </div>
      </div>
      <div class="column">
        <div class="info-row">
          <span class="info-label">Service Address:</span>
          <span class="info-value">{{ invoice.client.address|default:"Not provided" }}</span>
        </div>
        <div class="info-row">
          <span class="info-label">Billing Address:</span>
          <span class="info-value">{{ invoice.client.billing_address|default:"Not provided" }}</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Work Order Information (if linked) -->
  {% if invoice.work_order %}
  <div class="section">
    <div class="section-title">Work Order Details</div>
    <div class="work-order-link">
      <div class="two-column">
        <div class="column">
          <div class="info-row">
            <span class="info-label">Work Order ID:</span>
            <span class="info-value">#{{ invoice.work_order.id }}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Description:</span>
            <span class="info-value">{{ invoice.work_order.job_description|default:"No description provided" }}</span>
          </div>
        </div>
        <div class="column">
          <div class="info-row">
            <span class="info-label">Status:</span>
            <span class="info-value">{{ invoice.work_order.get_status_display }}</span>
          </div>
          <div class="info-row">
            <span class="info-label">Completed:</span>
            <span class="info-value">
              {% if invoice.work_order.completed_at %}
                {{ invoice.work_order.completed_at|date:"F j, Y" }}
              {% else %}
                Not completed
              {% endif %}
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Scheduled Events (if work order has events) -->
  {% if events %}
  <div class="section">
    <div class="section-title">Services Provided</div>
    {% for event in events %}
      <div class="event-item">
        <div class="event-type">{{ event.get_event_type_display }}</div>
        <div class="event-details">
          {% if event.address %}
            <strong>Location:</strong> {{ event.address }}<br>
          {% endif %}
          {% if event.date %}
            <strong>Date:</strong> {{ event.date|date:"F j, Y" }}
          {% endif %}
        </div>
      </div>
    {% endfor %}
  </div>
  {% endif %}
  {% endif %}

  <!-- Invoice Amount -->
  <div class="amount-section">
    <div class="amount-label">Total Amount Due</div>
    <div class="amount-value">${{ invoice.amount }}</div>
  </div>

  <!-- Notes -->
  {% if invoice.notes %}
  <div class="section">
    <div class="section-title">Notes</div>
    <div class="notes-section">
      {{ invoice.notes|linebreaks }}
    </div>
  </div>
  {% endif %}

  <!-- Payment Information -->
  <div class="section">
    <div class="section-title">Payment Information</div>
    <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.25rem;">
      <p><strong>Please make checks payable to:</strong> EJ Art Moving</p>
      <p><strong>Questions about this invoice?</strong> Contact us for assistance.</p>
      {% if invoice.status == 'unpaid' %}
        <p style="color: #dc3545; font-weight: bold;">Payment is due upon receipt.</p>
      {% elif invoice.status == 'paid' %}
        <p style="color: #28a745; font-weight: bold;">✓ This invoice has been paid. Thank you!</p>
      {% endif %}
    </div>
  </div>

  <div class="footer">
    <p>Generated on {{ "now"|date:"F j, Y g:i A" }} | EJ Art Moving Business Management System</p>
    <p>Thank you for your business!</p>
  </div>

</body>
</html>

===== templates/invoices/invoice_confirm_delete.html =====
{% extends "base.html" %}
{% block title %}Delete Invoice{% endblock %}
{% block content %}
<div class="container py-4">

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not In QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Delete Confirmation -->
  <div class="card shadow-sm">
    <div class="card-header bg-danger text-white">
      <h5 class="mb-0">Delete Invoice #{{ invoice.invoice_number }}</h5>
    </div>
    <div class="card-body">
      <p>Are you sure you want to delete this invoice?</p>
      <form method="post">
        {% csrf_token %}
        <div class="d-flex flex-column flex-sm-row gap-2">
          <button type="submit" class="btn btn-danger w-100 w-sm-auto">Yes, Delete It</button>
          <a href="{% url 'invoice_detail' invoice.id %}" class="btn btn-secondary w-100 w-sm-auto">Cancel</a>
        </div>
      </form>
    </div>
  </div>

  <div class="text-center mt-4">
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoices</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>

</div>
{% endblock %}

===== templates/invoices/invoice_in_quickbooks.html =====
{% extends "base.html" %}
{% block title %}In QuickBooks{% endblock %}

{% block content %}
<div class="container">
  <h2 class="mb-4">In QuickBooks</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not in QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>

  <div class="card shadow-sm">
    <div class="card-header bg-warning text-white">In QuickBooks</div>
    <div class="card-body p-0">
      {% if invoices %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr><th>Invoice #</th><th>Client</th><th>Amount</th><th>Actions</th></tr>
              </thead>
              <tbody>
                {% for inv in invoices %}
                <tr>
                  <td>{{ inv.invoice_number }}</td>
                  <td>{{ inv.client.name }}</td>
                  <td>${{ inv.amount }}</td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="unpaid">
                        <button type="submit" class="btn btn-sm btn-outline-danger"
                                onclick="return confirm('Move back to Not in QuickBooks?')">
                          <i class="bi bi-arrow-left"></i> Back to Not in QB
                        </button>
                      </form>
                      <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
                        {% csrf_token %}
                        <input type="hidden" name="new_status" value="paid">
                        <button type="submit" class="btn btn-sm btn-success">Mark as Paid</button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for inv in invoices %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Invoice #{{ inv.invoice_number }}</strong></div>
              <div class="text-muted small">{{ inv.client.name }}</div>
              <div class="text-success fw-bold">${{ inv.amount }}</div>
            </div>
            <div class="d-flex flex-column gap-2">
              <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
              <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="unpaid">
                <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                        onclick="return confirm('Move back to Not in QuickBooks?')">
                  <i class="bi bi-arrow-left"></i> Back to Not in QB
                </button>
              </form>
              <form method="post" action="{% url 'change_invoice_status' inv.id %}">
                {% csrf_token %}
                <input type="hidden" name="new_status" value="paid">
                <button type="submit" class="btn btn-sm btn-success w-100">Mark as Paid</button>
              </form>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No invoices in QuickBooks found.</p>
      {% endif %}
    </div>
  </div>

  <!-- Navigation Buttons -->
  <div class="text-center mt-4">
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/invoices/invoice_list.html =====
{% extends "base.html" %}
{% block title %}Invoice Overview{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Invoice Overview</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not in QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by invoice number or client name..." value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>

  <!-- Not In QuickBooks Section -->
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-danger text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'invoice_unpaid' %}" class="text-white text-decoration-none">
            Not in QuickBooks
            <span class="badge bg-light text-dark ms-2" id="unpaid-count">{{ unpaid_invoices|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#unpaidSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="unpaidSection">
      <div class="card-body p-0">
        <div id="unpaid-invoices-container">
          {% include 'invoices/partials/invoice_section.html' with invoices=unpaid_invoices section='unpaid' %}
        </div>
        {% if unpaid_invoices|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="unpaid" 
                  data-offset="5"
                  data-url="{% url 'load_more_invoices' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- In QuickBooks Section -->
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-warning text-dark">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'invoice_in_quickbooks' %}" class="text-dark text-decoration-none">
            In QuickBooks
            <span class="badge bg-light text-dark ms-2" id="in_quickbooks-count">{{ paid_invoices|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-dark p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#inQuickbooksSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="inQuickbooksSection">
      <div class="card-body p-0">
        <div id="in_quickbooks-invoices-container">
          {% include 'invoices/partials/invoice_section.html' with invoices=paid_invoices section='in_quickbooks' %}
        </div>
        {% if paid_invoices|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="in_quickbooks" 
                  data-offset="5"
                  data-url="{% url 'load_more_invoices' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Paid Invoices Section -->
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-success text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'invoice_paid' %}" class="text-white text-decoration-none">
            Paid
            <span class="badge bg-light text-dark ms-2" id="paid-count">{{ overdue_invoices|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#paidSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="paidSection">
      <div class="card-body p-0">
        <div id="paid-invoices-container">
          {% include 'invoices/partials/invoice_section.html' with invoices=overdue_invoices section='paid' %}
        </div>
        {% if overdue_invoices|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="paid" 
                  data-offset="5"
                  data-url="{% url 'load_more_invoices' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto mt-3">Back to Dashboard</a>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Track original counts for each section
  const originalCounts = {
    'unpaid': {{ unpaid_invoices|length }},
    'in_quickbooks': {{ paid_invoices|length }},
    'paid': {{ overdue_invoices|length }}
  };

  let isLoading = false; // Prevent multiple simultaneous requests

  // Handle load more buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('load-more-btn') || e.target.closest('.load-more-btn')) {
      e.preventDefault();
      
      if (isLoading) return; // Prevent multiple requests
      
      const btn = e.target.classList.contains('load-more-btn') ? e.target : e.target.closest('.load-more-btn');
      const section = btn.dataset.section;
      const offset = parseInt(btn.dataset.offset);
      const url = btn.dataset.url;
      const spinner = btn.querySelector('.spinner-border');
      const icon = btn.querySelector('.bi-plus-circle');
      
      // Validation
      if (!section || !url || isNaN(offset)) {
        console.error('Invalid button data:', {section, url, offset});
        return;
      }
      
      // Show loading state
      isLoading = true;
      spinner.classList.remove('d-none');
      icon.classList.add('d-none');
      btn.disabled = true;
      
      // Make AJAX request
      fetch(`${url}?section=${section}&offset=${offset}`, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.desktop_html && data.mobile_html) {
          // Find containers
          const container = document.getElementById(`${section}-invoices-container`);
          if (!container) {
            throw new Error(`Container not found: ${section}-invoices-container`);
          }
          
          // Append desktop rows to table body
          const tableBody = container.querySelector('.invoice-table-body');
          if (tableBody) {
            tableBody.insertAdjacentHTML('beforeend', data.desktop_html);
          }
          
          // Append mobile cards to mobile container
          const mobileContainer = container.querySelector('.invoice-cards-container');
          if (mobileContainer) {
            mobileContainer.insertAdjacentHTML('beforeend', data.mobile_html);
          }
          
          // Update count badge
          const countBadge = document.getElementById(`${section}-count`);
          if (countBadge) {
            const currentCount = parseInt(countBadge.textContent);
            countBadge.textContent = currentCount + data.count;
          }
          
          // Update offset for next load
          btn.dataset.offset = offset + 5;
          
          // Hide button if no more items
          if (!data.has_more) {
            btn.style.display = 'none';
          }
          
          // Show "Show Less" button after first load more
          showShowLessButton(section);
        } else {
          throw new Error('No HTML returned from server');
        }
      })
      .catch(error => {
        console.error('Error loading more items:', error);
        
        // Remove any existing error messages
        const existingError = btn.parentElement.querySelector('.error-message');
        if (existingError) {
          existingError.remove();
        }
        
        // Show error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'text-danger small mt-2 error-message';
        errorDiv.textContent = 'Error loading more items. Please try again.';
        btn.parentElement.appendChild(errorDiv);
        
        // Remove error message after 5 seconds
        setTimeout(() => {
          if (errorDiv.parentElement) {
            errorDiv.remove();
          }
        }, 5000);
      })
      .finally(() => {
        // Hide loading state
        isLoading = false;
        spinner.classList.add('d-none');
        icon.classList.remove('d-none');
        btn.disabled = false;
      });
    }
    
    // Handle show less buttons
    if (e.target.classList.contains('show-less-btn') || e.target.closest('.show-less-btn')) {
      e.preventDefault();
      
      const btn = e.target.classList.contains('show-less-btn') ? e.target : e.target.closest('.show-less-btn');
      const section = btn.dataset.section;
      
      if (section) {
        showLessItems(section);
      }
    }
  });

  function showShowLessButton(section) {
    // Check if show less button already exists
    const existingBtn = document.querySelector(`[data-section="${section}"].show-less-btn`);
    if (existingBtn) return;
    
    // Find load more button
    const loadMoreBtn = document.querySelector(`[data-section="${section}"].load-more-btn`);
    if (!loadMoreBtn) return;
    
    const buttonContainer = loadMoreBtn.parentElement;
    
    // Create show less button
    const showLessBtn = document.createElement('button');
    showLessBtn.className = 'btn btn-outline-secondary btn-sm show-less-btn ms-2';
    showLessBtn.setAttribute('data-section', section);
    showLessBtn.innerHTML = '<i class="bi bi-dash-circle me-1"></i>Show Less';
    
    buttonContainer.appendChild(showLessBtn);
  }

  function showLessItems(section) {
    const container = document.getElementById(`${section}-invoices-container`);
    if (!container) {
      console.error(`Container not found: ${section}-invoices-container`);
      return;
    }
    
    const originalCount = originalCounts[section];
    if (originalCount === undefined) {
      console.error(`Original count not found for section: ${section}`);
      return;
    }
    
    // Handle desktop table rows
    const tableBody = container.querySelector('.invoice-table-body');
    if (tableBody) {
      const rows = tableBody.querySelectorAll('tr.invoice-row');
      rows.forEach((row, index) => {
        if (index >= originalCount) {
          row.style.display = 'none';
        } else {
          row.style.display = '';
        }
      });
    }
    
    // Handle mobile cards
    const mobileContainer = container.querySelector('.invoice-cards-container');
    if (mobileContainer) {
      const cards = mobileContainer.querySelectorAll('.invoice-card');
      cards.forEach((card, index) => {
        if (index >= originalCount) {
          card.style.display = 'none';
        } else {
          card.style.display = '';
        }
      });
    }
    
    // Update count badge back to original
    const countBadge = document.getElementById(`${section}-count`);
    if (countBadge) {
      countBadge.textContent = originalCount;
    }
    
    // Reset load more button
    const loadMoreBtn = document.querySelector(`[data-section="${section}"].load-more-btn`);
    if (loadMoreBtn) {
      loadMoreBtn.dataset.offset = '5';
      loadMoreBtn.style.display = 'inline-block';
    }
    
    // Remove show less button
    const showLessBtn = document.querySelector(`[data-section="${section}"].show-less-btn`);
    if (showLessBtn) {
      showLessBtn.remove();
    }
  }

  // Handle collapse icon rotation
  document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(button => {
    button.addEventListener('click', function() {
      const icon = this.querySelector('i');
      if (!icon) return;
      
      setTimeout(() => {
        const targetSelector = this.getAttribute('data-bs-target');
        if (!targetSelector) return;
        
        const target = document.querySelector(targetSelector);
        if (!target) return;
        
        if (target.classList.contains('show')) {
          icon.style.transform = 'rotate(180deg)';
        } else {
          icon.style.transform = 'rotate(0deg)';
        }
      }, 150);
    });
  });
});
</script>

<style>
/* Smooth icon rotation */
.card-header i {
  transition: transform 0.3s ease;
}

/* Mobile responsive improvements */
@media (max-width: 768px) {
  .card-header h5 {
    font-size: 1rem;
  }
  
  .badge {
    font-size: 0.7rem;
  }
  
  .load-more-btn, .show-less-btn {
    font-size: 0.875rem;
  }
}

/* Loading animation */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Button transitions */
.show-less-btn {
  transition: all 0.3s ease;
}

/* Error message styling */
.error-message {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
</style>
{% endblock %}

===== templates/invoices/invoice_form.html =====
{% extends "base.html" %}
{% load crispy_forms_tags static %}
{% block title %}{% if creating %}Create Invoice{% else %}Edit Invoice{% endif %}{% endblock %}

{% block extra_css %}
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
{% endblock %}

{% block content %}
<div class="container">
  <h2 class="mb-4">{% if creating %}Create Invoice{% else %}Edit Invoice{% endif %}</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not In QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Work Order Information Reference (Create Mode) -->
  {% if creating and work_order %}
  <div class="card mb-4 bg-light">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">Creating Invoice For This Job</h5>
    </div>
    <div class="card-body">
      
      <!-- Complete Client Information -->
      <h6>Client Information</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Name:</strong> {{ work_order.client.name }}</p>
          <p class="mb-1"><strong>Email:</strong> {{ work_order.client.email|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Phone:</strong> {{ work_order.client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Address:</strong> {{ work_order.client.address|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Billing Address:</strong> 
            {% if work_order.client.billing_address %}
              {{ work_order.client.billing_address }}
            {% else %}
              <em>Not specified</em>
            {% endif %}
          </p>
        </div>
      </div>

      <!-- Work Order Details -->
      <h6>Work Order Details</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Work Order ID:</strong> {{ work_order.id }}</p>
          <p class="mb-1"><strong>Status:</strong> {{ work_order.get_status_display }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Estimated Cost:</strong> ${{ work_order.estimated_cost }}</p>
        </div>
      </div>
      
      <!-- Job Description -->
      {% if work_order.job_description %}
      <h6>Job Description</h6>
      <div class="bg-white p-3 rounded border mb-3">
        {{ work_order.job_description }}
      </div>
      {% endif %}

      <!-- Scheduled Events -->
      {% if events %}
      <h6>Scheduled Events</h6>
      <div class="row">
        {% for event in events %}
        <div class="col-md-6 mb-2">
          <div class="card border">
            <div class="card-body py-2">
              <h6 class="card-title text-primary mb-1">{{ event.get_event_type_display }}</h6>
              <p class="card-text mb-1 small"><strong>Date:</strong> {{ event.date|date:"M d, Y" }}</p>
              <p class="card-text mb-0 small"><strong>Address:</strong> {{ event.address }}</p>
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
      {% else %}
        <p class="mb-0"><strong>Scheduled Events:</strong> No events scheduled</p>
      {% endif %}
    </div>
  </div>
  {% endif %}

  <!-- Work Order Information Reference (Edit Mode) -->
  {% if not creating and invoice.work_order %}
  <div class="card mb-4 bg-light">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">Work Order Reference Information</h5>
    </div>
    <div class="card-body">
      
      <!-- Complete Client Information -->
      <h6>Client Information</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Name:</strong> {{ invoice.client.name }}</p>
          <p class="mb-1"><strong>Email:</strong> {{ invoice.client.email|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Phone:</strong> {{ invoice.client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Address:</strong> {{ invoice.client.address|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Billing Address:</strong> 
            {% if invoice.client.billing_address %}
              {{ invoice.client.billing_address }}
            {% else %}
              <em>Not specified</em>
            {% endif %}
          </p>
        </div>
      </div>

      <!-- Work Order Details -->
      <h6>Work Order Details</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Work Order ID:</strong> {{ invoice.work_order.id }}</p>
          <p class="mb-1"><strong>Status:</strong> {{ invoice.work_order.get_status_display }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Estimated Cost:</strong> ${{ invoice.work_order.estimated_cost }}</p>
        </div>
      </div>
      
      <!-- Job Description -->
      {% if invoice.work_order.job_description %}
      <h6>Job Description</h6>
      <div class="bg-white p-3 rounded border mb-3">
        {{ invoice.work_order.job_description }}
      </div>
      {% endif %}

      <!-- Scheduled Events -->
      {% if events %}
      <h6>Scheduled Events</h6>
      <div class="row">
        {% for event in events %}
        <div class="col-md-6 mb-2">
          <div class="card border">
            <div class="card-body py-2">
              <h6 class="card-title text-primary mb-1">{{ event.get_event_type_display }}</h6>
              <p class="card-text mb-1 small"><strong>Date:</strong> {{ event.date|date:"M d, Y" }}</p>
              <p class="card-text mb-0 small"><strong>Address:</strong> {{ event.address }}</p>
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
      {% else %}
        <p class="mb-0"><strong>Scheduled Events:</strong> No events scheduled</p>
      {% endif %}
    </div>
  </div>
  {% endif %}

  <!-- Invoice Form -->
  <div class="card">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">{% if creating %}Invoice Details{% else %}Edit Invoice Details{% endif %}</h5>
    </div>
    <div class="card-body">
      <form method="post" id="invoice-form">
        {% csrf_token %}
        <input type="hidden" name="client" value="{{ client_id }}">
        <input type="hidden" name="status" value="unpaid">

        {{ form.work_order|as_crispy_field }}

        <div class="mb-3">
          <label for="id_amount" class="form-label">Amount</label>
          <div class="input-group">
            <span class="input-group-text">$</span>
            {{ form.amount }}
          </div>
          {% if creating and work_order.estimated_cost %}
          <small class="form-text text-muted">Pre-filled from work order estimated cost (${{ work_order.estimated_cost }})</small>
          {% endif %}
        </div>

        {{ form.notes|as_crispy_field }}

        <button type="submit" class="btn btn-success">
          {% if creating %}Create Invoice{% else %}Update Invoice{% endif %}
        </button>
      </form>
    </div>
  </div>

  <!-- Navigation Links -->
  <div class="mt-4 text-center">
    {% if creating %}
    <a href="{% url 'completed_jobs' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Completed Jobs</a>
    {% else %}
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoice Overview</a>
    {% endif %}
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const clientSelect = $('#id_client');
  const workOrderSelect = document.getElementById('id_work_order');

  if (clientSelect.length) {
    clientSelect.select2({
      placeholder: 'Search for a client…',
      allowClear: true,
      minimumInputLength: 1,
      ajax: {
        url: "{% url 'ajax_get_clients' %}",
        dataType: 'json',
        delay: 250,
        data: params => ({ q: params.term }),
        processResults: data => ({ results: data })
      }
    });

    clientSelect.on('select2:select', function (e) {
      const clientId = e.params.data.id;

      workOrderSelect.disabled = true;
      workOrderSelect.innerHTML = '<option>Loading...</option>';

      fetch(`/invoices/ajax_get_active_workorders/?client_id=${clientId}`)
        .then(response => response.json())
        .then(data => {
          workOrderSelect.innerHTML = '';

          if (data.length === 0) {
            const opt = document.createElement('option');
            opt.text = 'No completed work orders';
            opt.disabled = true;
            opt.selected = true;
            workOrderSelect.add(opt);
          } else {
            const placeholder = document.createElement('option');
            placeholder.text = 'Select a work order…';
            placeholder.disabled = true;
            placeholder.selected = true;
            workOrderSelect.add(placeholder);

            data.forEach(item => {
              const opt = document.createElement('option');
              opt.value = item.id;
              opt.text = item.text;
              workOrderSelect.add(opt);
            });
          }

          workOrderSelect.disabled = false;
        });
    });
  }
});
</script>
{% endblock %}

===== templates/invoices/invoice_detail.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block title %}Invoice Detail{% endblock %}

{% block content %}
<div class="container">

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'invoice_unpaid' %}" class="btn btn-outline-danger w-100 w-sm-auto">Not in QuickBooks</a>
      <a href="{% url 'invoice_in_quickbooks' %}" class="btn btn-outline-warning w-100 w-sm-auto">In QuickBooks</a>
      <a href="{% url 'invoice_paid' %}" class="btn btn-outline-success w-100 w-sm-auto">Paid</a>
    </div>
  </div>

  <!-- Invoice Summary Card -->
  <div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
      <h4 class="mb-0">Invoice #{{ invoice.invoice_number }}</h4>
      <div>
        <a href="{% url 'invoice_update' invoice.id %}" class="btn btn-warning btn-sm me-2">Edit Invoice</a>
        <a href="{% url 'invoice_list' %}" class="btn btn-light btn-sm">Back to Overview</a>
      </div>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p class="mb-1"><strong>Amount:</strong> ${{ invoice.amount }}</p>
          <p class="mb-1"><strong>Current Status:</strong> 
            <span class="badge 
              {% if invoice.status == 'unpaid' %}bg-danger
              {% elif invoice.status == 'in_quickbooks' %}bg-warning text-dark
              {% else %}bg-success{% endif %}">
              {{ invoice.get_status_display }}
            </span>
          </p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Date Created:</strong> {{ invoice.date_created|date:"M d, Y" }}</p>
          {% if invoice.notes %}
            <p class="mb-1"><strong>Notes:</strong> {{ invoice.notes }}</p>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <!-- Status Management -->
  <div class="card mb-4">
    <div class="card-header bg-warning text-dark">
      <h5 class="mb-0">Status Management</h5>
    </div>
    <div class="card-body">
      <h6 class="mb-3">Change Invoice Status:</h6>
      <div class="d-flex flex-wrap gap-2">
        
        <!-- Unpaid Button -->
        {% if invoice.status != 'unpaid' %}
        <form method="post" action="{% url 'change_invoice_status' invoice.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="unpaid">
          <button type="submit" class="btn btn-outline-danger"
                  onclick="return confirm('Move this invoice back to Not in QuickBooks?')">
            <i class="bi bi-arrow-left me-1"></i>Move to Not in QB
          </button>
        </form>
        {% endif %}
        
        <!-- In QuickBooks Button -->
        {% if invoice.status != 'in_quickbooks' %}
        <form method="post" action="{% url 'change_invoice_status' invoice.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="in_quickbooks">
          <button type="submit" class="btn btn-outline-warning">
            <i class="bi bi-check me-1"></i>Mark In QuickBooks
          </button>
        </form>
        {% endif %}
        
        <!-- Paid Button -->
        {% if invoice.status != 'paid' %}
        <form method="post" action="{% url 'change_invoice_status' invoice.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="paid">
          <button type="submit" class="btn btn-outline-success">
            <i class="bi bi-cash me-1"></i>Mark Paid
          </button>
        </form>
        {% endif %}
        
      </div>
    </div>
  </div>

  <!-- Work Order Information (If Available) -->
  {% if invoice.work_order %}
  <div class="card mb-4 bg-light">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">Work Order Information</h5>
    </div>
    <div class="card-body">
      
      <!-- Complete Client Information -->
      <h6>Client Information</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Name:</strong> {{ invoice.client.name }}</p>
          <p class="mb-1"><strong>Email:</strong> {{ invoice.client.email|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Phone:</strong> {{ invoice.client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Address:</strong> {{ invoice.client.address|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Billing Address:</strong> 
            {% if invoice.client.billing_address %}
              {{ invoice.client.billing_address }}
            {% else %}
              <em>Not specified</em>
            {% endif %}
          </p>
        </div>
      </div>

      <!-- Work Order Details -->
      <h6>Work Order Details</h6>
      <div class="row mb-3">
        <div class="col-md-6">
          <p class="mb-1"><strong>Work Order ID:</strong> 
            <a href="{% url 'workorder_detail' invoice.work_order.id %}">#{{ invoice.work_order.id }}</a>
          </p>
          <p class="mb-1"><strong>Status:</strong> {{ invoice.work_order.get_status_display }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Estimated Cost:</strong> ${{ invoice.work_order.estimated_cost }}</p>
        </div>
      </div>
      
      <!-- Job Description -->
      {% if invoice.work_order.job_description %}
      <h6>Job Description</h6>
      <div class="bg-white p-3 rounded border mb-3">
        {{ invoice.work_order.job_description }}
      </div>
      {% endif %}

      <!-- Scheduled Events -->
      {% if events %}
      <h6>Scheduled Events</h6>
      <div class="row">
        {% for event in events %}
        <div class="col-md-6 mb-2">
          <div class="card border">
            <div class="card-body py-2">
              <h6 class="card-title text-primary mb-1">{{ event.get_event_type_display }}</h6>
              <p class="card-text mb-1 small"><strong>Date:</strong> {{ event.date|date:"M d, Y" }}</p>
              <p class="card-text mb-0 small"><strong>Address:</strong> {{ event.address }}</p>
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
      {% else %}
        <p class="mb-0"><strong>Scheduled Events:</strong> No events scheduled</p>
      {% endif %}
    </div>
  </div>
  {% else %}
  <!-- No Work Order -->
  <div class="card mb-4">
    <div class="card-header bg-secondary text-white">
      <h5 class="mb-0">Client Information</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p class="mb-1"><strong>Name:</strong> {{ invoice.client.name }}</p>
          <p class="mb-1"><strong>Email:</strong> {{ invoice.client.email|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Phone:</strong> {{ invoice.client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Address:</strong> {{ invoice.client.address|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Billing Address:</strong> 
            {% if invoice.client.billing_address %}
              {{ invoice.client.billing_address }}
            {% else %}
              <em>Not specified</em>
            {% endif %}
          </p>
        </div>
      </div>
      <div class="alert alert-info mt-3 mb-0">
        <i class="bi bi-info-circle me-2"></i>This invoice is not linked to a work order.
      </div>
    </div>
  </div>
  {% endif %}

  <!-- Action Buttons -->
  <div class="card">
    <div class="card-header bg-success text-white">
      <h5 class="mb-0">Actions</h5>
    </div>
    <div class="card-body">
      <div class="d-flex flex-column flex-sm-row gap-2">
        <a href="{% url 'invoice_pdf' invoice.id %}" class="btn btn-primary" target="_blank">
          <i class="bi bi-printer me-1"></i>Print Invoice
        </a>
        <a href="{% url 'invoice_update' invoice.id %}" class="btn btn-warning">
          <i class="bi bi-pencil me-1"></i>Edit Invoice
        </a>
        <a href="{% url 'invoice_delete' invoice.id %}" class="btn btn-danger">
          <i class="bi bi-trash me-1"></i>Delete Invoice
        </a>
      </div>
    </div>
  </div>

  <!-- Navigation Links -->
  <div class="mt-4 text-center">
    <a href="{% url 'invoice_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Invoice Overview</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/invoices/partials/invoice_section.html =====
{% if invoices %}
  <!-- Desktop Table View -->
  <div class="d-none d-md-block">
    <div class="table-responsive">
      <table class="table table-sm table-striped align-middle mb-0">
        <thead class="small">
          <tr><th>Invoice #</th><th>Client</th><th>Amount</th><th>Actions</th></tr>
        </thead>
        <tbody class="invoice-table-body">
          {% include 'invoices/partials/invoice_rows.html' with invoices=invoices section=section %}
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- Mobile Card View -->
  <div class="d-md-none invoice-cards-container">
    {% include 'invoices/partials/invoice_cards_mobile.html' with invoices=invoices section=section %}
  </div>
{% else %}
  <div class="p-4 text-center text-muted">
    <i class="bi bi-inbox fs-1 mb-2 d-block"></i>
    No invoices found.
  </div>
{% endif %}

===== templates/invoices/partials/invoice_cards_mobile.html =====
<!-- Mobile Cards Only -->
{% for inv in invoices %}
<div class="border-bottom p-3 invoice-card" data-invoice-id="{{ inv.id }}">
  <div class="mb-2">
    <div><strong>Invoice #{{ inv.invoice_number }}</strong></div>
    <div class="text-muted small">{{ inv.client.name }}</div>
    <div class="text-success fw-bold">${{ inv.amount }}</div>
  </div>
  <div class="d-flex flex-column gap-2">
    <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
    <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
    
    {% if section == 'unpaid' %}
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="in_quickbooks">
        <button type="submit" class="btn btn-sm btn-success w-100">Mark as In QuickBooks</button>
      </form>
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="paid">
        <button type="submit" class="btn btn-sm btn-primary w-100">Mark as Paid</button>
      </form>
    
    {% elif section == 'in_quickbooks' %}
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="unpaid">
        <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                onclick="return confirm('Move back to Not in QuickBooks?')">
          <i class="bi bi-arrow-left"></i> Back to Not in QB
        </button>
      </form>
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="paid">
        <button type="submit" class="btn btn-sm btn-success w-100">Mark as Paid</button>
      </form>
    
    {% elif section == 'paid' %}
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="in_quickbooks">
        <button type="submit" class="btn btn-sm btn-outline-warning w-100"
                onclick="return confirm('Move back to In QuickBooks?')">
          <i class="bi bi-arrow-left"></i> Back to QuickBooks
        </button>
      </form>
      <form method="post" action="{% url 'change_invoice_status' inv.id %}">
        {% csrf_token %}
        <input type="hidden" name="new_status" value="unpaid">
        <button type="submit" class="btn btn-sm btn-outline-danger w-100"
                onclick="return confirm('Move back to Not in QuickBooks?')">
          <i class="bi bi-arrow-left"></i> Back to Not in QB
        </button>
      </form>
    {% endif %}
  </div>
</div>
{% endfor %}

===== templates/invoices/partials/invoice_rows.html =====
<!-- Desktop Table Rows Only -->
{% for inv in invoices %}
<tr class="invoice-row" data-invoice-id="{{ inv.id }}">
  <td>{{ inv.invoice_number }}</td>
  <td>{{ inv.client.name }}</td>
  <td>${{ inv.amount }}</td>
  <td>
    <div class="d-flex flex-row gap-1">
      <a href="{% url 'invoice_detail' inv.id %}" class="btn btn-sm btn-info">View</a>
      <a href="{% url 'invoice_update' inv.id %}" class="btn btn-sm btn-warning">Edit</a>
      
      {% if section == 'unpaid' %}
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="in_quickbooks">
          <button type="submit" class="btn btn-sm btn-success">Mark as In QB</button>
        </form>
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="paid">
          <button type="submit" class="btn btn-sm btn-primary">Mark as Paid</button>
        </form>
      
      {% elif section == 'in_quickbooks' %}
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="unpaid">
          <button type="submit" class="btn btn-sm btn-outline-danger"
                  onclick="return confirm('Move back to Not in QuickBooks?')">
            <i class="bi bi-arrow-left"></i> Back to Not in QB
          </button>
        </form>
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="paid">
          <button type="submit" class="btn btn-sm btn-success">Mark as Paid</button>
        </form>
      
      {% elif section == 'paid' %}
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="in_quickbooks">
          <button type="submit" class="btn btn-sm btn-outline-warning"
                  onclick="return confirm('Move back to In QuickBooks?')">
            <i class="bi bi-arrow-left"></i> Back to QB
          </button>
        </form>
        <form method="post" action="{% url 'change_invoice_status' inv.id %}" class="d-inline">
          {% csrf_token %}
          <input type="hidden" name="new_status" value="unpaid">
          <button type="submit" class="btn btn-sm btn-outline-danger"
                  onclick="return confirm('Move back to Not in QuickBooks?')">
            <i class="bi bi-arrow-left"></i> Back to Unpaid
          </button>
        </form>
      {% endif %}
    </div>
  </td>
</tr>
{% endfor %}

===== templates/base.html =====
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}Art Moving Business Management System{% endblock %}</title>

  <!-- Favicon -->
  <link rel="icon" type="image/png" sizes="64x64" href="{% static 'images/icon-64x64.png' %}">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

  <!-- Custom CSS -->
  <link rel="stylesheet" href="{% static 'css/custom.css' %}">
  <link href="https://fonts.cdnfonts.com/css/open-dyslexic" rel="stylesheet">

  <!-- FullCalendar CSS -->
  <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
  <!-- Flatpickr CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <!-- Select2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />

  {% block extra_css %}{% endblock %}
</head>
<body class="d-flex flex-column min-vh-100">
  <!-- Navbar -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark py-2">
    <div class="container">
      <a href="{% url 'home' %}" class="d-flex align-items-center text-decoration-none">
        <img src="{% static 'images/nav-icon-128x128.png' %}" alt="Site Icon" class="me-2" style="height:40px;">
        <span class="navbar-brand mb-0 h4">EJ Art Mover</span>
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
              aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav ms-auto align-items-center">
          <li class="nav-item"><a class="nav-link px-3" href="{% url 'home' %}"><i class="bi bi-speedometer2 me-1"></i>Dashboard</a></li>
          <li class="nav-item"><a class="nav-link px-3" href="{% url 'workorder_list' %}"><i class="bi bi-card-checklist me-1"></i>Work Orders</a></li>
          <li class="nav-item"><a class="nav-link px-3" href="{% url 'client_list' %}"><i class="bi bi-people-fill me-1"></i>Clients</a></li>
          <li class="nav-item"><a class="nav-link px-3" href="{% url 'invoice_list' %}"><i class="bi bi-receipt me-1"></i>Invoices</a></li>
          {% if user.is_authenticated %}
            <li class="nav-item"><a class="nav-link px-3" href="{% url 'logout' %}"><i class="bi bi-box-arrow-right me-1"></i>Logout</a></li>
          {% else %}
            <li class="nav-item"><a class="nav-link px-3" href="{% url 'login' %}"><i class="bi bi-box-arrow-in-right me-1"></i>Login</a></li>
          {% endif %}
        </ul>
      </div>
    </div>
  </nav>

  <!-- Offcanvas Sidebar -->
  <div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasSidebar" aria-labelledby="offcanvasSidebarLabel">
    <div class="offcanvas-header border-bottom">
      <h5 class="offcanvas-title" id="offcanvasSidebarLabel">Navigation</h5>
      <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      {% if user.is_authenticated %}
        <div class="text-center mb-4">
          <i class="bi bi-person-circle fs-1 text-secondary"></i>
          <div class="mt-2 fw-semibold">{{ user.username }}</div>
        </div>
      {% endif %}
      <div class="list-group">
        <h6 class="text-uppercase mb-2">Dashboard</h6>
        <a href="{% url 'home' %}" class="list-group-item list-group-item-action"><i class="bi bi-speedometer2 me-2"></i>Home</a>

        <h6 class="text-uppercase mt-4 mb-2">Work Orders</h6>
        <a href="{% url 'workorder_list' %}" class="list-group-item list-group-item-action"><i class="bi bi-card-checklist me-2"></i>All Jobs</a>
        <a href="{% url 'pending_jobs' %}" class="list-group-item list-group-item-action"><i class="bi bi-hourglass-split me-2"></i>Pending</a>
        <a href="{% url 'scheduled_jobs' %}" class="list-group-item list-group-item-action"><i class="bi bi-calendar-event me-2"></i>Scheduled</a>
        <a href="{% url 'completed_jobs' %}" class="list-group-item list-group-item-action"><i class="bi bi-check-circle me-2"></i>Completed</a>
        <a href="{% url 'workorder_create' %}" class="list-group-item list-group-item-action text-success"><i class="bi bi-plus-circle me-2"></i>New Job</a>

        <h6 class="text-uppercase mt-4 mb-2">Clients</h6>
        <a href="{% url 'client_list' %}" class="list-group-item list-group-item-action"><i class="bi bi-people-fill me-2"></i>All Clients</a>
        <a href="{% url 'client_create' %}" class="list-group-item list-group-item-action text-warning"><i class="bi bi-person-plus me-2"></i>New Client</a>

        <h6 class="text-uppercase mt-4 mb-2">Invoicing</h6>
        <a href="{% url 'invoice_list' %}" class="list-group-item list-group-item-action"><i class="bi bi-receipt me-2"></i>Overview</a>
        <a href="{% url 'invoice_unpaid' %}" class="list-group-item list-group-item-action text-danger"><i class="bi bi-clock me-2"></i>Not In QuickBooks</a>
        <a href="{% url 'invoice_in_quickbooks' %}" class="list-group-item list-group-item-action text-warning"><i class="bi bi-hourglass me-2"></i>In QuickBooks</a>
        <a href="{% url 'invoice_paid' %}" class="list-group-item list-group-item-action text-success"><i class="bi bi-check2-circle me-2"></i>Paid</a>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <main class="container my-4 flex-grow-1">
    {% block content %}{% endblock %}
  </main>

  <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1100;">
    {% if messages %}
      {% for message in messages %}
        <div class="toast align-items-center text-white bg-success border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="d-flex">
            <div class="toast-body">
              {{ message }}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
          </div>
        </div>
      {% endfor %}
    {% endif %}
  </div>

  <!-- Footer -->
  <footer class="bg-dark text-white text-center py-3 mt-auto">
    <div class="container">
      <small>&copy; {% now "Y" %} Art Moving Business Management System</small>
    </div>
  </footer>

  <!-- JS Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  {% block extra_js %}{% endblock %}
</body>
</html>

===== templates/workorders/workorder_confirm_delete.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block title %}Confirm Delete Work Order{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Delete Work Order #{{ workorder.id }}</h2>
  <p>Are you sure you want to delete this work order?</p>
  
  <form method="post">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">Yes, delete it</button>
    <a href="{% url 'workorder_detail' workorder.id %}" class="btn btn-secondary">Cancel</a>
  </form>
</div>
{% endblock %}


===== templates/workorders/completed_jobs.html =====
{% extends "base.html" %}
{% block title %}Completed Jobs{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Completed Jobs</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Pending Jobs</a>
      <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Scheduled Jobs</a>
      <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Completed Jobs</a>
      <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary w-100 w-sm-auto">New Work Order</a>
    </div>
  </div>

  <!-- Completed Jobs -->
  <div class="card mb-4">
    <div class="card-header bg-warning text-dark">
      <h5 class="mb-0">Completed Jobs</h5>
    </div>
    <div class="card-body p-0">
      {% if uninvoiced_jobs %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr>
                  <th style="width: 60px;">ID</th>
                  <th style="width: 120px;">Client</th>
                  <th class="d-none d-lg-table-cell" style="width: 200px;">Description</th>
                  <th style="width: 300px;">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for job in uninvoiced_jobs %}
                <tr>
                  <td>{{ job.id }}</td>
                  <td>{{ job.client.name }}</td>
                  <td class="d-none d-lg-table-cell text-truncate" style="max-width:200px;">{{ job.job_description|truncatewords:10 }}</td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                      <a href="/invoices/create/?work_order={{ job.id }}" class="btn btn-sm btn-success">📄 Create Invoice</a>
                      <form method="post" action="{% url 'mark_paid' job.id %}" class="d-inline">{% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-primary">Mark as Paid</button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for job in uninvoiced_jobs %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Work Order #{{ job.id }}</strong></div>
              <div class="text-muted small">{{ job.client.name }}</div>
              <div class="text-muted small">{{ job.job_description|truncatewords:6 }}</div>
            </div>
            <div class="d-flex flex-column gap-1">
              <div class="d-flex gap-1">
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info flex-fill">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Edit</a>
              </div>
              <div class="d-flex gap-1">
                <a href="/invoices/create/?work_order={{ job.id }}" class="btn btn-sm btn-success flex-fill">📄 Create Invoice</a>
                <form method="post" action="{% url 'mark_paid' job.id %}" class="flex-fill">{% csrf_token %}
                  <button type="submit" class="btn btn-sm btn-primary w-100">Mark as Paid</button>
                </form>
              </div>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No completed jobs awaiting payment.</p>
      {% endif %}
    </div>
  </div>

  <!-- Completed – Invoiced or Paid -->
  <div class="card mb-4">
    <div class="card-header bg-success text-white">
      <h5 class="mb-0">Completed – Invoiced or Paid</h5>
    </div>
    <div class="card-body p-0">
      {% if invoiced_jobs %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr>
                  <th style="width: 60px;">ID</th>
                  <th style="width: 120px;">Client</th>
                  <th class="d-none d-lg-table-cell" style="width: 200px;">Description</th>
                  <th style="width: 250px;">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for job in invoiced_jobs %}
                <tr>
                  <td>{{ job.id }}</td>
                  <td>{{ job.client.name }}</td>
                  <td class="d-none d-lg-table-cell text-truncate" style="max-width:200px;">{{ job.job_description|truncatewords:10 }}</td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                      {% if job.invoices.exists %}
                        <a href="{% url 'invoice_detail' job.invoices.first.id %}" class="btn btn-sm btn-outline-success">View Invoice</a>
                      {% endif %}
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for job in invoiced_jobs %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Work Order #{{ job.id }}</strong></div>
              <div class="text-muted small">{{ job.client.name }}</div>
              <div class="text-muted small">{{ job.job_description|truncatewords:6 }}</div>
            </div>
            <div class="d-flex flex-column gap-1">
              <div class="d-flex gap-1">
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info flex-fill">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Edit</a>
              </div>
              {% if job.invoices.exists %}
                <a href="{% url 'invoice_detail' job.invoices.first.id %}" class="btn btn-sm btn-outline-success w-100">View Invoice</a>
              {% endif %}
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No invoiced or paid jobs found.</p>
      {% endif %}
    </div>
  </div>

  <!-- Back Button -->
  <div class="text-center">
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/workorders/workorder_pdf.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Work Order #{{ job.id }}</title>
  <style>
    /* Reset and base styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body { 
      font-family: 'Arial', sans-serif; 
      color: #333; 
      font-size: 12pt;
      line-height: 1.4;
      margin: 0;
      padding: 15mm;
      background: white;
    }
    
    /* Page setup for print */
    @page {
      size: A4;
      margin: 15mm;
    }
    
    @media print {
      body { 
        margin: 0; 
        font-size: 11pt;
      }
      .section { 
        break-inside: avoid; 
      }
      .page-break {
        page-break-before: always;
      }
      .no-print {
        display: none;
      }
    }
    
    /* Header styling */
    .header { 
      text-align: center; 
      margin-bottom: 20pt; 
      border-bottom: 2pt solid #007bff;
      padding-bottom: 10pt;
    }
    
    .logo { 
      font-size: 18pt; 
      font-weight: bold; 
      margin-bottom: 5pt;
      color: #007bff;
    }
    
    .work-order-title {
      font-size: 24pt;
      margin: 0;
      color: #007bff;
      font-weight: bold;
    }
    
    /* Section styling */
    .section { 
      margin-bottom: 15pt; 
      break-inside: avoid;
    }
    
    .section-title { 
      background-color: #f8f9fa;
      border-left: 4pt solid #007bff;
      padding: 8pt 12pt;
      margin-bottom: 10pt; 
      font-size: 14pt;
      font-weight: bold;
      color: #495057;
    }
    
    /* Simple info layout - more reliable than tables */
    .info-item {
      margin-bottom: 8pt;
      overflow: hidden;
      clear: both;
    }
    
    .info-label { 
      font-weight: bold; 
      color: #495057;
      display: inline-block;
      width: 100pt;
      vertical-align: top;
      float: left;
    }
    
    .info-value {
      display: block;
      margin-left: 110pt;
      word-wrap: break-word;
    }
    
    /* Two column layout using float (more reliable for WeasyPrint) */
    .two-column {
      width: 100%;
      overflow: hidden;
      margin-bottom: 10pt;
    }
    
    .column {
      width: 48%;
      float: left;
      margin-right: 4%;
    }
    
    .column:last-child {
      margin-right: 0;
    }
    
    /* Clear floats */
    .clearfix::after {
      content: "";
      display: table;
      clear: both;
    }
    
    /* Status badge */
    .status-badge {
      background-color: #28a745;
      color: white;
      padding: 3pt 8pt;
      border-radius: 3pt;
      font-size: 10pt;
      display: inline-block;
      font-weight: bold;
    }
    
    /* Event items */
    .event-item {
      background-color: #f8f9fa;
      border: 1pt solid #dee2e6;
      border-radius: 3pt;
      padding: 8pt;
      margin-bottom: 8pt;
      break-inside: avoid;
    }
    
    .event-type {
      font-weight: bold;
      color: #007bff;
      margin-bottom: 3pt;
      font-size: 12pt;
    }
    
    .event-details {
      font-size: 10pt;
      color: #6c757d;
    }
    
    /* Note items */
    .note-item {
      background-color: #fff3cd;
      border: 1pt solid #ffeaa7;
      border-radius: 3pt;
      padding: 8pt;
      margin-bottom: 8pt;
      break-inside: avoid;
    }
    
    .note-text {
      margin-bottom: 3pt;
      line-height: 1.3;
    }
    
    .note-date {
      font-size: 9pt;
      color: #6c757d;
      font-style: italic;
    }
    
    /* Job description box */
    .job-description {
      background-color: #e9ecef;
      border: 1pt solid #dee2e6;
      border-radius: 3pt;
      padding: 10pt;
      margin: 5pt 0 10pt 0;
      line-height: 1.4;
      width: 100%;
      display: block;
    }
    
    /* Attachments list */
    .attachment-list {
      margin: 0;
      padding-left: 15pt;
    }
    
    .attachment-item {
      margin-bottom: 5pt;
      break-inside: avoid;
    }
    
    /* Footer */
    .footer {
      margin-top: 20pt;
      padding-top: 10pt;
      border-top: 1pt solid #dee2e6;
      text-align: center;
      font-size: 10pt;
      color: #6c757d;
    }
    
    /* Ensure proper spacing */
    p {
      margin-bottom: 5pt;
    }
  </style>
</head>
<body>

  <div class="header">
    <div class="logo">EJ Art Moving</div>
    <h1 class="work-order-title">Work Order #{{ job.id }}</h1>
  </div>

  <!-- Client Information -->
  <div class="section">
    <div class="section-title">Client Information</div>
    <div class="two-column clearfix">
      <div class="column">
        <div class="info-item">
          <span class="info-label">Name:</span>
          <span class="info-value">{{ job.client.name }}</span>
        </div>
        <div class="info-item">
          <span class="info-label">Email:</span>
          <span class="info-value">{{ job.client.email|default:"Not provided" }}</span>
        </div>
        <div class="info-item">
          <span class="info-label">Phone:</span>
          <span class="info-value">{{ job.client.phone|default:"Not provided" }}</span>
        </div>
      </div>
      <div class="column">
        <div class="info-item">
          <span class="info-label">Service Address:</span>
          <span class="info-value">{{ job.client.address|default:"Not provided" }}</span>
        </div>
        <div class="info-item">
          <span class="info-label">Billing Address:</span>
          <span class="info-value">{{ job.client.billing_address|default:"Not provided" }}</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Work Order Details -->
  <div class="section">
    <div class="section-title">Work Order Details</div>
    <div class="two-column clearfix">
      <div class="column">
        <div class="info-item">
          <span class="info-label">Estimated Cost:</span>
          <span class="info-value">${{ job.estimated_cost|default:"0.00" }}</span>
        </div>
        <div class="info-item">
          <span class="info-label">Status:</span>
          <span class="info-value"><span class="status-badge">{{ job.get_status_display }}</span></span>
        </div>
      </div>
      <div class="column">
        <div class="info-item">
          <span class="info-label">Created:</span>
          <span class="info-value">{{ job.created_at|date:"F j, Y g:i A" }}</span>
        </div>
        {% if job.completed_at %}
        <div class="info-item">
          <span class="info-label">Completed:</span>
          <span class="info-value">{{ job.completed_at|date:"F j, Y g:i A" }}</span>
        </div>
        {% endif %}
        {% if job.invoiced %}
        <div class="info-item">
          <span class="info-label">Invoiced:</span>
          <span class="info-value">Yes</span>
        </div>
        {% endif %}
      </div>
    </div>
    
    <!-- Job Description -->
    {% if job.job_description %}
    <div class="info-item">
      <span class="info-label">Description:</span>
      <div class="job-description">{{ job.job_description }}</div>
    </div>
    {% endif %}
  </div>

  <!-- Scheduled Events -->
  <div class="section">
    <div class="section-title">Scheduled Events</div>
    {% if job.events.all %}
      {% for event in job.events.all %}
        <div class="event-item">
          <div class="event-type">{{ event.get_event_type_display }}</div>
          <div class="event-details">
            {% if event.address %}
              <strong>Address:</strong> {{ event.address }}<br>
            {% endif %}
            {% if event.date %}
              <strong>Date:</strong> {{ event.date|date:"F j, Y" }}
            {% else %}
              <strong>Date:</strong> To be scheduled
            {% endif %}
          </div>
        </div>
      {% endfor %}
    {% else %}
      <p style="font-style: italic; color: #6c757d;">No scheduled events.</p>
    {% endif %}
  </div>

  <!-- Notes -->
  <div class="section">
    <div class="section-title">Notes</div>
    {% if job.notes.all %}
      {% for note in job.notes.all %}
        <div class="note-item">
          <div class="note-text">{{ note.note }}</div>
          <div class="note-date">Added: {{ note.created_at|date:"F j, Y g:i A" }}</div>
        </div>
      {% endfor %}
    {% else %}
      <p style="font-style: italic; color: #6c757d;">No notes available.</p>
    {% endif %}
  </div>

  <!-- Attachments -->
  {% if job.attachments.all %}
  <div class="section">
    <div class="section-title">Attachments</div>
    <ul class="attachment-list">
      {% for attachment in job.attachments.all %}
        {% if attachment.file %}
          <li class="attachment-item">
            <strong>{{ attachment.file.name }}</strong> 
            <span style="color: #6c757d;">(uploaded {{ attachment.uploaded_at|date:"F j, Y" }})</span>
          </li>
        {% endif %}
      {% endfor %}
    </ul>
  </div>
  {% endif %}

  <div class="footer">
    <p>Generated on {{ "now"|date:"F j, Y g:i A" }} | EJ Art Moving Business Management System</p>
  </div>

</body>
</html>

===== templates/workorders/workorder_detail.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}

{% block title %}Work Order Detail{% endblock %}

{% block content %}
<div class="container py-4">

  <!-- Client Information -->
  <div class="card mb-4">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">Client Information</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p class="mb-1"><strong>Name:</strong> {{ job.client.name }}</p>
          <p class="mb-1"><strong>Email:</strong> {{ job.client.email|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Phone:</strong> {{ job.client.phone|default:"Not provided" }}</p>
        </div>
        <div class="col-md-6">
          <p class="mb-1"><strong>Service Address:</strong> {{ job.client.address|default:"Not provided" }}</p>
          <p class="mb-1"><strong>Billing Address:</strong> 
            {% if job.client.billing_address %}
              {{ job.client.billing_address }}
            {% else %}
              <em>Not provided</em>
            {% endif %}
          </p>
        </div>
      </div>
      <div class="mt-3">
        <a href="{% url 'client_detail' job.client.id %}" class="btn btn-sm btn-outline-info">
          <i class="bi bi-person-circle me-1"></i>View Client
        </a>
        <a href="{% url 'client_edit' job.client.id %}" class="btn btn-sm btn-outline-warning">
          <i class="bi bi-pencil me-1"></i>Edit Client
        </a>
      </div>
    </div>
  </div>

  <!-- Work Order Summary with Status -->
  <div class="card mb-4">
    <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Work Order #{{ job.id }}</h5>
      <span class="badge fs-6
        {% if job.status == 'pending' %}bg-warning text-dark
        {% elif job.status == 'in_progress' %}bg-info
        {% elif job.status == 'completed' %}bg-success
        {% endif %}">
        {{ job.get_status_display }}
        {% if job.invoiced %} • Invoiced{% endif %}
      </span>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <p><strong>Job Description:</strong> {{ job.job_description }}</p>
          <p><strong>Estimated Cost:</strong> ${{ job.estimated_cost }}</p>
        </div>
        <div class="col-md-6">
          <p><strong>Created:</strong> {{ job.created_at|date:"M d, Y g:i A" }}</p>
          {% if job.completed_at %}
            <p><strong>Completed:</strong> {{ job.completed_at|date:"M d, Y g:i A" }}</p>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <!-- Workflow Actions (Smart/Context-Aware) -->
  <div class="card mb-4">
    <div class="card-header bg-primary text-white">
      <h5 class="mb-0">
        <i class="bi bi-arrow-right-circle me-2"></i>Next Steps
      </h5>
    </div>
    <div class="card-body">
      
      {% if job.status == 'pending' %}
        <!-- Pending Job Actions -->
        <p class="text-muted mb-3">This job is pending. What would you like to do next?</p>
        <div class="d-grid gap-2 d-md-flex">
          <a href="{% url 'workorder_edit' job.id %}" class="btn btn-warning btn-lg flex-fill">
            <i class="bi bi-calendar-plus me-2"></i>Schedule Events
          </a>
          <form method="post" action="{% url 'change_workorder_status' job.id %}" class="flex-fill">
            {% csrf_token %}
            <input type="hidden" name="new_status" value="completed">
            <button type="submit" class="btn btn-success btn-lg w-100">
              <i class="bi bi-check-circle me-2"></i>Mark Completed
            </button>
          </form>
        </div>
        
      {% elif job.status == 'in_progress' %}
        <!-- In Progress Job Actions -->
        <p class="text-muted mb-3">This job is scheduled and in progress.</p>
        <div class="d-grid gap-2 d-md-flex">
          <a href="{% url 'workorder_edit' job.id %}" class="btn btn-warning btn-lg flex-fill">
            <i class="bi bi-pencil me-2"></i>Edit Schedule
          </a>
          <form method="post" action="{% url 'change_workorder_status' job.id %}" class="flex-fill">
            {% csrf_token %}
            <input type="hidden" name="new_status" value="completed">
            <button type="submit" class="btn btn-success btn-lg w-100">
              <i class="bi bi-check-circle me-2"></i>Mark Completed
            </button>
          </form>
        </div>
        
      {% elif job.status == 'completed' and not job.invoiced %}
        <!-- Completed but Not Invoiced -->
        <p class="text-muted mb-3">Job completed! Ready to create invoice or mark as paid.</p>
        <div class="d-grid gap-2 d-md-flex">
          <a href="/invoices/create/?work_order={{ job.id }}" class="btn btn-success btn-lg flex-fill">
            <i class="bi bi-receipt me-2"></i>Create Invoice
          </a>
          <form method="post" action="{% url 'mark_paid' job.id %}" class="flex-fill">
            {% csrf_token %}
            <button type="submit" class="btn btn-primary btn-lg w-100">
              <i class="bi bi-cash me-2"></i>Mark as Paid
            </button>
          </form>
        </div>
        
      {% elif job.status == 'completed' and job.invoiced %}
        <!-- Completed and Invoiced -->
        <div class="alert alert-success d-flex align-items-center mb-3">
          <i class="bi bi-check-circle-fill me-3 fs-4"></i>
          <div>
            <strong>Job Complete!</strong><br>
            This job is finished and has been invoiced/paid.
          </div>
        </div>
        {% if job.invoices.exists %}
          <a href="{% url 'invoice_detail' job.invoices.first.id %}" class="btn btn-outline-success">
            <i class="bi bi-receipt me-1"></i>View Invoice
          </a>
        {% endif %}
      {% endif %}
      
    </div>
  </div>

  <!-- Status Override (Collapsible) -->
  <div class="card mb-4">
    <div class="card-header bg-light">
      <button class="btn btn-link text-decoration-none p-0 text-start w-100" type="button" data-bs-toggle="collapse" data-bs-target="#statusOverride" aria-expanded="false">
        <i class="bi bi-gear me-2"></i>Status Override & Advanced Options
        <i class="bi bi-chevron-down float-end"></i>
      </button>
    </div>
    <div class="collapse" id="statusOverride">
      <div class="card-body">
        
        <!-- Status Change Options -->
        <h6 class="mb-3">Change Status:</h6>
        <div class="d-flex flex-wrap gap-2 mb-4">
          {% if job.status != 'pending' %}
          <form method="post" action="{% url 'change_workorder_status' job.id %}" class="d-inline">
            {% csrf_token %}
            <input type="hidden" name="new_status" value="pending">
            <button type="submit" class="btn btn-outline-secondary btn-sm" 
                    onclick="return confirm('Move back to Pending status?')">
              <i class="bi bi-arrow-left me-1"></i>Back to Pending
            </button>
          </form>
          {% endif %}
          
          {% if job.status != 'in_progress' %}
          <form method="post" action="{% url 'change_workorder_status' job.id %}" class="d-inline">
            {% csrf_token %}
            <input type="hidden" name="new_status" value="in_progress">
            <button type="submit" class="btn btn-outline-info btn-sm">
              <i class="bi bi-play me-1"></i>Mark In Progress
            </button>
          </form>
          {% endif %}
          
          {% if job.status != 'completed' %}
          <form method="post" action="{% url 'change_workorder_status' job.id %}" class="d-inline">
            {% csrf_token %}
            <input type="hidden" name="new_status" value="completed">
            <button type="submit" class="btn btn-outline-success btn-sm">
              <i class="bi bi-check-circle me-1"></i>Mark Completed
            </button>
          </form>
          {% endif %}
        </div>

        <!-- Invoice Status Reset -->
        {% if job.invoiced %}
        <h6 class="mb-3">Invoice Status:</h6>
        <form method="post" action="{% url 'reset_workorder_invoiced' job.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn btn-outline-warning btn-sm"
                  onclick="return confirm('Reset invoiced status? This will move the job back to uninvoiced lists.')">
            <i class="bi bi-arrow-counterclockwise me-1"></i>Reset Invoiced Status
          </button>
        </form>
        {% endif %}
        
      </div>
    </div>
  </div>

  <!-- Scheduled Events -->
  <div class="card mb-4">
      <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Scheduled Events</h5>
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-light btn-sm">
          <i class="bi bi-plus me-1"></i>Add Event
        </a>
      </div>
      <div class="card-body">
        {% if events %}
          <div class="row">
            {% for event in events %}
            <div class="col-md-6 mb-3">
              <div class="card border-start border-primary border-3">
                <div class="card-body py-2">
                  <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                      <h6 class="card-title text-primary mb-1">{{ event.get_event_type_display }}</h6>
                      <p class="card-text mb-1 small">
                        <i class="bi bi-calendar3 me-1"></i>
                        {% if event.date %}{{ event.date|date:"M d, Y" }}{% else %}Not scheduled{% endif %}
                      </p>
                      <p class="card-text mb-0 small">
                        <i class="bi bi-geo-alt me-1"></i>{{ event.address|default:"No address" }}
                      </p>
                    </div>
                    <div class="dropdown">
                      <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                              data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="bi bi-three-dots-vertical"></i>
                      </button>
                      <ul class="dropdown-menu">
                        <li>
                          <a class="dropdown-item text-danger" href="#" 
                            onclick="confirmDeleteEvent({{ event.id }}, '{{ event.get_event_type_display }}')">
                            <i class="bi bi-trash me-2"></i>Delete Event
                          </a>
                        </li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            {% endfor %}
          </div>
        {% else %}
          <div class="text-center text-muted py-4">
            <i class="bi bi-calendar-x fs-1 mb-2 d-block"></i>
            No events scheduled
            <div class="mt-2">
              <a href="{% url 'workorder_edit' job.id %}" class="btn btn-outline-primary btn-sm">
                <i class="bi bi-plus me-1"></i>Add Events
              </a>
            </div>
          </div>
        {% endif %}
      </div>
    </div>

  <!-- Delete Event Modal -->
  <div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteEventModalLabel">Delete Event</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete the event "<span id="eventTypeToDelete"></span>"?</p>
          <p class="text-muted small">This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <form id="deleteEventForm" method="post" class="d-inline">
            {% csrf_token %}
            <button type="submit" class="btn btn-danger">Delete Event</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Attachments & Notes -->
  <div class="row">
    <!-- Attachments -->
    <div class="col-md-6">
      <div class="card h-100">
        <div class="card-header bg-success text-white">
          <h5 class="mb-0">Attachments</h5>
        </div>
        <div class="card-body">
          {% if attachments %}
            {% for attachment in attachments %}
              <div class="d-flex align-items-center mb-2">
                <i class="bi bi-paperclip me-2 text-muted"></i>
                <div class="flex-grow-1">
                  <a href="{{ attachment.file.url }}" class="text-decoration-none">{{ attachment.file.name }}</a>
                  <small class="text-muted d-block">{{ attachment.uploaded_at|date:"M d, Y" }}</small>
                </div>
              </div>
            {% endfor %}
          {% else %}
            <div class="text-center text-muted py-3">
              <i class="bi bi-paperclip fs-3 mb-2 d-block"></i>
              No attachments
            </div>
          {% endif %}
        </div>
      </div>
    </div>

    <!-- Notes -->
    <div class="col-md-6">
      <div class="card h-100">
        <div class="card-header bg-warning text-dark">
          <h5 class="mb-0">Notes</h5>
        </div>
        <div class="card-body">
          {% if notes %}
            {% for note in notes %}
              <div class="mb-3 pb-2 border-bottom">
                <p class="mb-1">{{ note.note }}</p>
                <small class="text-muted">
                  <i class="bi bi-clock me-1"></i>{{ note.created_at|date:"M d, Y g:i A" }}
                </small>
              </div>
            {% endfor %}
          {% else %}
            <div class="text-center text-muted py-3">
              <i class="bi bi-sticky fs-3 mb-2 d-block"></i>
              No notes
            </div>
          {% endif %}
        </div>
      </div>
    </div>
  </div>

  <!-- Management Actions -->
  <div class="card mt-4">
    <div class="card-header bg-light">
      <h6 class="mb-0 text-muted">
        <i class="bi bi-tools me-2"></i>Management
      </h6>
    </div>
    <div class="card-body">
      <div class="d-flex flex-wrap gap-2">
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-outline-primary">
          <i class="bi bi-pencil me-1"></i>Edit
        </a>
        <a href="{% url 'workorder_pdf' job.id %}" class="btn btn-outline-secondary" target="_blank">
          <i class="bi bi-printer me-1"></i>Print
        </a>
        <a href="{% url 'workorder_delete' job.id %}" class="btn btn-outline-danger">
          <i class="bi bi-trash me-1"></i>Delete
        </a>
      </div>
    </div>
  </div>

  <!-- Navigation -->
  <div class="text-center mt-4">
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary me-2">
      <i class="bi bi-arrow-left me-1"></i>Back to Work Orders
    </a>
    <a href="{% url 'home' %}" class="btn btn-outline-secondary">
      <i class="bi bi-house me-1"></i>Dashboard
    </a>
  </div>

</div>
{% endblock %}

{% block extra_js %}
<script>
// Function to handle event deletion confirmation
function confirmDeleteEvent(eventId, eventType) {
    // Set the event type in the modal
    document.getElementById('eventTypeToDelete').textContent = eventType;
    
    // Set the form action URL to the delete endpoint
    const deleteForm = document.getElementById('deleteEventForm');
    deleteForm.action = `{% url 'workorder_detail' job.id %}`.replace('/detail/{{ job.id }}/', `/detail/{{ job.id }}/delete-event/${eventId}/`);
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('deleteEventModal'));
    modal.show();
}

// Handle successful deletion (optional - for better UX)
document.addEventListener('DOMContentLoaded', function() {
    const deleteForm = document.getElementById('deleteEventForm');
    if (deleteForm) {
        deleteForm.addEventListener('submit', function(e) {
            // You could add loading state here if desired
            const submitBtn = this.querySelector('button[type="submit"]');
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Deleting...';
            submitBtn.disabled = true;
        });
    }
});
</script>
{% endblock %}

===== templates/workorders/workorder_form.html =====
{% extends "base.html" %}
{% load crispy_forms_tags %}
{% block title %}{{ job|default_if_none:"New" }} Work Order{% endblock %}

{% block extra_css %}
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet"/>
  <style>
    @media (max-width: 768px) {
      .d-flex.flex-column.flex-lg-row .btn {
        margin-bottom: 0.5rem;
        min-height: 48px;
      }
      .modal-dialog {
        margin: 0.5rem;
      }
      .form-control, .form-select {
        min-height: 44px;
        font-size: 16px;
      }
    }
    /* Hide the formset - we'll use modal instead */
    #event-forms-container {
      display: none;
    }
    #add-event {
      display: none;
    }
    #empty-form-template {
      display: none;
    }
  </style>
{% endblock %}

{% block content %}
<div class="container py-4">
  <!-- Top Nav Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary">Pending Jobs</a>
      <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary">Scheduled Jobs</a>
      <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary">Completed Jobs</a>
      <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary">New Work Order</a>
    </div>
  </div>

  <form method="post" enctype="multipart/form-data">
    {% csrf_token %}

    <!-- Client & Job Details -->
    <div class="card mb-4">
      <div class="card-header bg-secondary text-white">
        <h5 class="mb-0">Client &amp; Job Details</h5>
      </div>
      <div class="card-body">
        <div class="row g-3">
          <!-- Client picker -->
          <div class="col-md-6">
            {{ form.client|as_crispy_field }}
            <button type="button" class="btn btn-sm btn-outline-primary mt-2" data-bs-toggle="modal" data-bs-target="#newClientModal">
              + Add New Client
            </button>
          </div>

          <!-- Job description -->
          <div class="col-md-6">
            {{ form.job_description|as_crispy_field }}
          </div>

          <!-- Estimated cost -->
          <div class="col-md-6">
            <label class="form-label fw-bold">Estimated Cost</label>
            <div class="input-group">
              <span class="input-group-text">$</span>
              {{ form.estimated_cost }}
            </div>
          </div>

          <!-- Invoiced checkbox - properly displayed -->
          {% if job %}
          <div class="col-md-6 d-flex align-items-center">
            <div class="form-check">
              {{ form.invoiced }}
              <label class="form-check-label ms-2" for="{{ form.invoiced.id_for_label }}">
                Mark as Invoiced
              </label>
            </div>
          </div>
          {% endif %}
        </div>
      </div>
    </div>

    <!-- Scheduled Events -->
    <div class="card mb-4">
      <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Scheduled Events</h5>
        <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#eventModal">
          <i class="bi bi-plus me-1"></i>Add Event
        </button>
      </div>
      <div class="card-body">
        <!-- Display existing events nicely -->
        <div id="events-display">
          {% if job.events.all %}
            {% for event in job.events.all %}
              <div class="alert alert-info d-flex justify-content-between align-items-center">
                <div>
                  <strong>{{ event.get_event_type_display }}</strong><br>
                  <small>{{ event.address }} • {{ event.date|date:"M d, Y" }}</small>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="editEvent({{ event.id }})">
                  <i class="bi bi-pencil"></i>
                </button>
              </div>
            {% endfor %}
          {% else %}
            <div class="text-center text-muted py-4">
              <i class="bi bi-calendar-x fs-1 mb-2 d-block"></i>
              No events scheduled yet. Click "Add Event" to get started.
            </div>
          {% endif %}
        </div>
        
        <!-- Hidden formset (for backend compatibility) -->
        <div style="display: none;">
          {{ event_formset.management_form }}
          <div id="event-forms-container">
            {% for subform in event_formset %}
              <div class="event-form">{{ subform|crispy }}</div>
            {% endfor %}
          </div>
          <div id="empty-form-template">
            {{ event_formset.empty_form|crispy }}
          </div>
        </div>
      </div>
    </div>

    <!-- Attachments -->
    <div class="card mb-4">
      <div class="card-header bg-success text-white">
        <h5 class="mb-0">Attachments</h5>
      </div>
      <div class="card-body">
        {{ attachment_form|crispy }}
      </div>
    </div>

    <!-- Notes -->
    <div class="card mb-4">
      <div class="card-header bg-warning text-dark">
        <h5 class="mb-0">Notes</h5>
      </div>
      <div class="card-body">
        {{ note_form|crispy }}
      </div>
    </div>

    <!-- Submit Buttons -->
    <div class="d-flex flex-column flex-lg-row justify-content-end gap-2 mb-4">
      <button type="submit" name="save_only" class="btn btn-success">
        <i class="bi bi-check me-1"></i>
        {% if job %}Update Work Order{% else %}Save Work Order{% endif %}
      </button>
      <button type="submit" name="save_and_invoice" class="btn btn-primary">
        <i class="bi bi-receipt me-1"></i>
        {% if job %}Update & Create Invoice{% else %}Save & Create Invoice{% endif %}
      </button>
      <button type="submit" name="save_and_complete" class="btn btn-warning">
        <i class="bi bi-check-square me-1"></i>
        {% if job %}Update & Mark Complete{% else %}Save & Mark Complete{% endif %}
      </button>
    </div>
    <div class="text-center mb-4">
      <small class="text-muted">
        <i class="bi bi-info-circle me-1"></i>
        Choose: Save to continue later, Create Invoice to bill, or Mark Complete if finished
      </small>
    </div>
  </form>

  <!-- Bottom Navigation Buttons -->
  <div class="text-center">
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>

<!-- New Client Modal -->
<div class="modal fade" id="newClientModal" tabindex="-1" aria-labelledby="newClientModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="newClientModalLabel">Add New Client</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="newClientForm">
          {% csrf_token %}
          <div class="mb-3">
            <label for="newClientName" class="form-label">Name *</label>
            <input type="text" class="form-control" id="newClientName" name="name" required>
          </div>
          <div class="mb-3">
            <label for="newClientEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="newClientEmail" name="email">
          </div>
          <div class="mb-3">
            <label for="newClientPhone" class="form-label">Phone</label>
            <input type="text" class="form-control" id="newClientPhone" name="phone">
          </div>
          <div class="mb-3">
            <label for="newClientAddress" class="form-label">Address</label>
            <input type="text" class="form-control" id="newClientAddress" name="address">
          </div>
          <div class="mb-3">
            <label for="newClientBillingAddress" class="form-label">Billing Address</label>
            <input type="text" class="form-control" id="newClientBillingAddress" name="billing_address">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveNewClient">Save Client</button>
      </div>
    </div>
  </div>
</div>

<!-- Event Modal -->
<div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="eventModalLabel">
          <i class="bi bi-calendar-plus me-2"></i>Add Event
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="eventForm">
          <div class="mb-3">
            <label for="eventType" class="form-label">Event Type *</label>
            <select class="form-select" id="eventType" required>
              <option value="">Select event type...</option>
              <option value="pickup">Pickup</option>
              <option value="pickup_wrap">Pickup and Wrap</option>
              <option value="wrap">Wrap</option>
              <option value="install">Install</option>
              <option value="deliver_install">Deliver and Install</option>
              <option value="dropoff">Drop Off</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="eventAddress" class="form-label">Address</label>
            <input type="text" class="form-control" id="eventAddress">
          </div>
          <div class="mb-3">
            <label for="eventDate" class="form-label">Date</label>
            <input type="date" class="form-control" id="eventDate">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveEvent">Add Event</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

<script>
let eventCounter = 0;

$(document).ready(function() {
  $('.select2').select2({ width: '100%' });

  // New Client Modal
  $('#saveNewClient').click(function() {
    const formData = {
      'name': $('#newClientName').val(),
      'email': $('#newClientEmail').val(),
      'phone': $('#newClientPhone').val(),
      'address': $('#newClientAddress').val(),
      'billing_address': $('#newClientBillingAddress').val(),
      'csrfmiddlewaretoken': $('[name=csrfmiddlewaretoken]').val()
    };

    if (!formData.name.trim()) {
      alert('Client name is required');
      return;
    }

    $.ajax({
      url: '{% url "client_create_ajax" %}',
      type: 'POST',
      data: formData,
      success: function(response) {
        if (response.success) {
          const clientSelect = $('#id_client');
          const newOption = new Option(response.client.name, response.client.id, false, true);
          clientSelect.append(newOption).trigger('change');
          
          $('#newClientModal').modal('hide');
          $('#newClientForm')[0].reset();
          alert('Client created successfully!');
        } else {
          alert('Error creating client: ' + (response.error || 'Unknown error'));
        }
      },
      error: function() {
        alert('Error creating client. Please try again.');
      }
    });
  });

  // Event Modal
  $('#saveEvent').click(function() {
    const eventType = $('#eventType').val();
    const address = $('#eventAddress').val();
    const date = $('#eventDate').val();

    if (!eventType) {
      alert('Event type is required');
      return;
    }

    // Add to visual display
    const eventTypeText = $('#eventType option:selected').text();
    const eventHtml = `
      <div class="alert alert-info d-flex justify-content-between align-items-center" data-temp-id="${eventCounter}">
        <div>
          <strong>${eventTypeText}</strong><br>
          <small>${address} ${date ? '• ' + new Date(date).toLocaleDateString() : ''}</small>
        </div>
        <button type="button" class="btn btn-sm btn-outline-secondary" onclick="removeEvent(${eventCounter})">
          <i class="bi bi-trash"></i>
        </button>
      </div>
    `;

    $('#events-display .text-center').hide();
    $('#events-display').append(eventHtml);

    // Add hidden form fields for submission
    const formContainer = $('#event-forms-container');
    const formCount = formContainer.children('.event-form').length;
    
    const hiddenForm = `
      <div class="event-form" data-temp-id="${eventCounter}">
        <input type="hidden" name="events-${formCount}-event_type" value="${eventType}">
        <input type="hidden" name="events-${formCount}-address" value="${address}">
        <input type="hidden" name="events-${formCount}-date" value="${date}">
      </div>
    `;
    
    formContainer.append(hiddenForm);
    
    // Update form count
    $('#id_events-TOTAL_FORMS').val(formCount + 1);

    // Clear and close modal
    $('#eventForm')[0].reset();
    $('#eventModal').modal('hide');
    eventCounter++;
  });

  // Reset modals
  $('#newClientModal, #eventModal').on('hidden.bs.modal', function() {
    $(this).find('form')[0].reset();
  });
});

function removeEvent(tempId) {
  $(`[data-temp-id="${tempId}"]`).remove();
  
  // Update form count
  const formCount = $('#event-forms-container .event-form').length;
  $('#id_events-TOTAL_FORMS').val(formCount);
  
  // Show empty message if no events
  if (formCount === 0) {
    $('#events-display').html(`
      <div class="text-center text-muted py-4">
        <i class="bi bi-calendar-x fs-1 mb-2 d-block"></i>
        No events scheduled yet. Click "Add Event" to get started.
      </div>
    `);
  }
}
</script>
{% endblock %}

===== templates/workorders/scheduled_jobs.html =====
{% extends "base.html" %}
{% block title %}Scheduled Jobs{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Scheduled Jobs</h2>
  
  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Pending Jobs</a>
      <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Scheduled Jobs</a>
      <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Completed Jobs</a>
      <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary w-100 w-sm-auto">New Work Order</a>
    </div>
  </div>
  
  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by client name…" value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>
  
  <div class="card shadow-sm mb-4">
    <div class="card-header bg-info text-white">
      <h5 class="mb-0">Scheduled Jobs</h5>
    </div>
    <div class="card-body p-0">
      {% if jobs %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr>
                  <th style="width: 60px;">ID</th>
                  <th style="width: 120px;">Client</th>
                  <th class="d-none d-lg-table-cell" style="width: 200px;">Description</th>
                  <th class="d-none d-lg-table-cell" style="width: 100px;">Next Event</th>
                  <th style="width: 450px;">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for job in jobs %}
                <tr>
                  <td>{{ job.id }}</td>
                  <td>{{ job.client.name }}</td>
                  <td class="d-none d-lg-table-cell text-truncate" style="max-width:200px;">
                    {{ job.job_description|truncatewords:10 }}
                  </td>
                  <td class="d-none d-lg-table-cell">
                    {% with job.events.all|first as next_event %}
                      {% if next_event.date %}{{ next_event.date|date:"m/d/y" }}{% else %}-{% endif %}
                    {% endwith %}
                  </td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
                      <form method="post" action="{% url 'mark_completed' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-success">Complete</button>
                      </form>
                      <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-danger">Complete & Invoice</button>
                      </form>
                      <form method="post" action="{% url 'mark_completed_and_paid' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-dark">Complete & Paid</button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for job in jobs %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Work Order #{{ job.id }}</strong></div>
              <div class="text-muted small">{{ job.client.name }}</div>
              <div class="text-muted small">{{ job.job_description|truncatewords:6 }}</div>
            </div>
            <div class="d-flex flex-column gap-1">
              <div class="d-flex gap-1">
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info flex-fill">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Edit</a>
              </div>
              <div class="d-flex gap-1">
                <form method="post" action="{% url 'mark_completed' job.id %}" class="flex-fill">
                  {% csrf_token %}
                  <button type="submit" class="btn btn-sm btn-success w-100">Complete</button>
                </form>
                <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="flex-fill">
                  {% csrf_token %}
                  <button type="submit" class="btn btn-sm btn-danger w-100">Complete & Invoice</button>
                </form>
              </div>
              <form method="post" action="{% url 'mark_completed_and_paid' job.id %}">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-dark w-100">Complete & Paid</button>
              </form>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No scheduled jobs found.</p>
      {% endif %}
    </div>
  </div>
  
  <!-- Back Buttons -->
  <div class="text-center">
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/workorders/pending_jobs.html =====
{% extends "base.html" %}
{% block title %}Pending Jobs{% endblock %}
{% block content %}
<div class="container">
  <h2 class="mb-4">Pending Jobs</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Pending Jobs</a>
      <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Scheduled Jobs</a>
      <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary w-100 w-sm-auto">Completed Jobs</a>
      <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary w-100 w-sm-auto">New Work Order</a>
    </div>
  </div>

  <!-- Search Bar -->
  <form method="get" class="mb-4">
    <div class="input-group">
      <input type="text" name="q" class="form-control" placeholder="Search by client name…" value="{{ query }}">
      <button type="submit" class="btn btn-primary">Search</button>
    </div>
  </form>

  <div class="card shadow-sm mb-4">
    <div class="card-header bg-secondary text-white">
      <h5 class="mb-0">Pending Jobs</h5>
    </div>
    <div class="card-body p-0">
      {% if jobs %}
        <!-- Desktop Table View -->
        <div class="d-none d-md-block">
          <div class="table-responsive">
            <table class="table table-sm table-striped align-middle mb-0">
              <thead class="small">
                <tr>
                  <th style="width: 60px;">ID</th>
                  <th style="width: 120px;">Client</th>
                  <th class="d-none d-lg-table-cell" style="width: 200px;">Description</th>
                  <th style="width: 450px;">Actions</th>
                </tr>
              </thead>
              <tbody>
                {% for job in jobs %}
                <tr>
                  <td>{{ job.id }}</td>
                  <td>{{ job.client.name }}</td>
                  <td class="d-none d-lg-table-cell text-truncate" style="max-width:200px;">
                    {{ job.job_description|truncatewords:10 }}
                  </td>
                  <td>
                    <div class="d-flex flex-row gap-1">
                      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
                      <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Schedule</a>
                      <form method="post" action="{% url 'mark_completed' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-success">Complete</button>
                      </form>
                      <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-danger">Complete & Invoice</button>
                      </form>
                      <form method="post" action="{% url 'mark_completed_and_paid' job.id %}" class="d-inline">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-dark">Complete & Paid</button>
                      </form>
                    </div>
                  </td>
                </tr>
                {% endfor %}
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Mobile Card View -->
        <div class="d-md-none">
          {% for job in jobs %}
          <div class="border-bottom p-3">
            <div class="mb-2">
              <div><strong>Work Order #{{ job.id }}</strong></div>
              <div class="text-muted small">{{ job.client.name }}</div>
              <div class="text-muted small">{{ job.job_description|truncatewords:6 }}</div>
            </div>
            <div class="d-flex flex-column gap-1">
              <div class="d-flex gap-1">
                <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info flex-fill">View</a>
                <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Schedule</a>
              </div>
              <div class="d-flex gap-1">
                <form method="post" action="{% url 'mark_completed' job.id %}" class="flex-fill">
                  {% csrf_token %}
                  <button type="submit" class="btn btn-sm btn-success w-100">Complete</button>
                </form>
                <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="flex-fill">
                  {% csrf_token %}
                  <button type="submit" class="btn btn-sm btn-danger w-100">Complete & Invoice</button>
                </form>
              </div>
              <form method="post" action="{% url 'mark_completed_and_paid' job.id %}">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-dark w-100">Complete & Paid</button>
              </form>
            </div>
          </div>
          {% endfor %}
        </div>
      {% else %}
      <p class="p-3 mb-0">No pending jobs found.</p>
      {% endif %}
    </div>
  </div>

  <!-- Back Buttons -->
  <div class="text-center">
    <a href="{% url 'workorder_list' %}" class="btn btn-secondary w-100 w-sm-auto mb-2">Back to Work Orders</a>
    <a href="{% url 'home' %}" class="btn btn-secondary w-100 w-sm-auto">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

===== templates/workorders/partials/job_cards_mobile.html =====
<!-- Mobile Cards Only -->
{% for job in jobs %}
<div class="border-bottom p-3 job-card" data-job-id="{{ job.id }}">
  <div class="d-flex justify-content-between align-items-start mb-2">
    <div class="flex-grow-1">
      <div class="fw-bold">Work Order #{{ job.id }}</div>
      <div class="text-muted small">{{ job.client.name }}</div>
      <div class="text-muted small">{{ job.job_description|truncatewords:6 }}</div>
    </div>
    <span class="badge 
      {% if job.status == 'pending' %}bg-secondary
      {% elif job.status == 'in_progress' %}bg-info
      {% else %}bg-success{% endif %} ms-2">
      {{ job.get_status_display }}
    </span>
  </div>
  
  <div class="d-flex flex-column gap-1">
    <div class="d-flex gap-1">
      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info flex-fill">View</a>
      {% if section == 'pending' %}
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Schedule</a>
      {% else %}
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning flex-fill">Edit</a>
      {% endif %}
    </div>
    
    {% if job.status != 'completed' %}
      <div class="d-flex gap-1">
        <form method="post" action="{% url 'mark_completed' job.id %}" class="flex-fill">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-success w-100">Complete</button>
        </form>
        <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="flex-fill">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-danger w-100">Complete & Invoice</button>
        </form>
      </div>
      <form method="post" action="{% url 'mark_completed_and_paid' job.id %}">
        {% csrf_token %}
        <button type="submit" class="btn btn-sm btn-dark w-100">Complete & Paid</button>
      </form>
    {% elif section == 'completed' %}
      <div class="d-flex gap-1">
        <a href="/invoices/create/?work_order={{ job.id }}" class="btn btn-sm btn-success flex-fill">📄 Create Invoice</a>
        <form method="post" action="{% url 'mark_paid' job.id %}" class="flex-fill">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-primary w-100">Mark as Paid</button>
        </form>
      </div>
    {% elif section == 'invoiced' %}
      {% if job.invoices.exists %}
        <a href="{% url 'invoice_detail' job.invoices.first.id %}" class="btn btn-sm btn-outline-success w-100">View Invoice</a>
      {% endif %}
    {% endif %}
  </div>
</div>
{% endfor %}

===== templates/workorders/partials/job_section.html =====
{% if jobs %}
  <!-- Desktop Table View -->
  <div class="d-none d-md-block">
    <div class="table-responsive">
      <table class="table table-sm table-striped align-middle mb-0">
        <thead class="small">
          <tr>
            <th style="width: 60px;">ID</th>
            <th style="width: 120px;">Client</th>
            <th class="d-none d-lg-table-cell" style="width: 200px;">Description</th>
            <th style="width: 400px;">Actions</th>
          </tr>
        </thead>
        <tbody class="job-table-body">
          {% include 'workorders/partials/job_rows.html' with jobs=jobs section=section %}
        </tbody>
      </table>
    </div>
  </div>
  
  <!-- Mobile Card View -->
  <div class="d-md-none job-cards-container">
    {% include 'workorders/partials/job_cards_mobile.html' with jobs=jobs section=section %}
  </div>
{% else %}
  <div class="p-4 text-center text-muted">
    <i class="bi bi-inbox fs-1 mb-2 d-block"></i>
    No jobs found.
  </div>
{% endif %}

===== templates/workorders/partials/job_rows.html =====
<!-- Desktop Table Rows Only -->
{% for job in jobs %}
<tr class="job-row" data-job-id="{{ job.id }}">
  <td>{{ job.id }}</td>
  <td>{{ job.client.name }}</td>
  <td class="d-none d-lg-table-cell text-truncate" style="max-width:200px;">
    {{ job.job_description|truncatewords:8 }}
  </td>
  <td>
    <div class="d-flex flex-row gap-1">
      <a href="{% url 'workorder_detail' job.id %}" class="btn btn-sm btn-info">View</a>
      
      {% if section == 'pending' %}
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Schedule</a>
      {% else %}
        <a href="{% url 'workorder_edit' job.id %}" class="btn btn-sm btn-warning">Edit</a>
      {% endif %}
      
      {% if job.status != 'completed' %}
        <form method="post" action="{% url 'mark_completed' job.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-success">Complete</button>
        </form>
        <form method="post" action="{% url 'complete_and_invoice' job.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-danger">Complete & Invoice</button>
        </form>
        <form method="post" action="{% url 'mark_completed_and_paid' job.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-dark">Complete & Paid</button>
        </form>
      {% elif section == 'completed' %}
        <a href="/invoices/create/?work_order={{ job.id }}" class="btn btn-sm btn-success">📄 Create Invoice</a>
        <form method="post" action="{% url 'mark_paid' job.id %}" class="d-inline">
          {% csrf_token %}
          <button type="submit" class="btn btn-sm btn-warning">Mark as Paid</button>
        </form>
      {% elif section == 'invoiced' %}
        {% if job.invoices.exists %}
          <a href="{% url 'invoice_detail' job.invoices.first.id %}" class="btn btn-sm btn-outline-success">View Invoice</a>
        {% endif %}
      {% endif %}
    </div>
  </td>
</tr>
{% endfor %}

===== templates/workorders/workorder_list.html =====
{% extends "base.html" %}
{% block title %}Work Orders{% endblock %}

{% block content %}
<div class="container">
  <h2 class="mb-4">Work Orders</h2>

  <!-- Navigation Buttons -->
  <div class="mb-4 text-center">
    <div class="d-flex flex-column flex-sm-row justify-content-center gap-2">
      <a href="{% url 'pending_jobs' %}" class="btn btn-outline-primary w-100">Pending Jobs</a>
      <a href="{% url 'scheduled_jobs' %}" class="btn btn-outline-primary w-100">Scheduled Jobs</a>
      <a href="{% url 'completed_jobs' %}" class="btn btn-outline-primary w-100">Completed Jobs</a>
      <a href="{% url 'workorder_create' %}" class="btn btn-outline-primary w-100">New Work Order</a>
    </div>
  </div>

  <!-- Pending Jobs Section -->
  <div class="card mb-4">
    <div class="card-header bg-secondary text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'pending_jobs' %}" class="text-white text-decoration-none">
            Pending Jobs
            <span class="badge bg-light text-dark ms-2" id="pending-count">{{ pending_jobs|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#pendingSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="pendingSection">
      <div class="card-body p-0">
        <div id="pending-jobs-container">
          {% include 'workorders/partials/job_section.html' with jobs=pending_jobs section='pending' %}
        </div>
        {% if pending_jobs|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="pending" 
                  data-offset="5"
                  data-url="{% url 'load_more_workorders' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Scheduled Jobs Section -->
  <div class="card mb-4">
    <div class="card-header bg-info text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'scheduled_jobs' %}" class="text-white text-decoration-none">
            Scheduled Jobs
            <span class="badge bg-light text-dark ms-2" id="scheduled-count">{{ scheduled_jobs|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#scheduledSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="scheduledSection">
      <div class="card-body p-0">
        <div id="scheduled-jobs-container">
          {% include 'workorders/partials/job_section.html' with jobs=scheduled_jobs section='scheduled' %}
        </div>
        {% if scheduled_jobs|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="scheduled" 
                  data-offset="5"
                  data-url="{% url 'load_more_workorders' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Completed Jobs Section -->
  <div class="card mb-4">
    <div class="card-header bg-warning text-dark">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'completed_jobs' %}" class="text-dark text-decoration-none">
            Completed Jobs
            <span class="badge bg-light text-dark ms-2" id="completed-count">{{ completed_uninvoiced_jobs|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-dark p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#completedSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="completedSection">
      <div class="card-body p-0">
        <div id="completed-jobs-container">
          {% include 'workorders/partials/job_section.html' with jobs=completed_uninvoiced_jobs section='completed' %}
        </div>
        {% if completed_uninvoiced_jobs|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="completed" 
                  data-offset="5"
                  data-url="{% url 'load_more_workorders' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Completed – Invoiced or Paid Section -->
  <div class="card mb-4">
    <div class="card-header bg-success text-white">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <a href="{% url 'completed_jobs' %}" class="text-white text-decoration-none">
            Completed – Invoiced or Paid
            <span class="badge bg-light text-dark ms-2" id="invoiced-count">{{ completed_invoiced_jobs|length }}</span>
          </a>
        </h5>
        <button class="btn btn-link text-white p-0" type="button" data-bs-toggle="collapse" 
                data-bs-target="#invoicedSection" aria-expanded="true">
          <i class="bi bi-chevron-down fs-5"></i>
        </button>
      </div>
    </div>
    <div class="collapse show" id="invoicedSection">
      <div class="card-body p-0">
        <div id="invoiced-jobs-container">
          {% include 'workorders/partials/job_section.html' with jobs=completed_invoiced_jobs section='invoiced' %}
        </div>
        {% if completed_invoiced_jobs|length >= 5 %}
        <div class="p-3 text-center border-top">
          <button class="btn btn-outline-primary btn-sm load-more-btn" 
                  data-section="invoiced" 
                  data-offset="5"
                  data-url="{% url 'load_more_workorders' %}">
            <i class="bi bi-plus-circle me-1"></i>Load 5 More
            <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
          </button>
        </div>
        {% endif %}
      </div>
    </div>
  </div>

  <!-- Back to Dashboard -->
  <div class="text-center">
    <a href="{% url 'home' %}" class="btn btn-secondary w-100">Back to Dashboard</a>
  </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Track original counts for each section
  const originalCounts = {
    'pending': {{ pending_jobs|length }},
    'scheduled': {{ scheduled_jobs|length }},
    'completed': {{ completed_uninvoiced_jobs|length }},
    'invoiced': {{ completed_invoiced_jobs|length }}
  };

  let isLoading = false; // Prevent multiple simultaneous requests

  // Handle load more buttons
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('load-more-btn') || e.target.closest('.load-more-btn')) {
      e.preventDefault();
      
      if (isLoading) return; // Prevent multiple requests
      
      const btn = e.target.classList.contains('load-more-btn') ? e.target : e.target.closest('.load-more-btn');
      const section = btn.dataset.section;
      const offset = parseInt(btn.dataset.offset);
      const url = btn.dataset.url;
      const spinner = btn.querySelector('.spinner-border');
      const icon = btn.querySelector('.bi-plus-circle');
      
      // Validation
      if (!section || !url || isNaN(offset)) {
        console.error('Invalid button data:', {section, url, offset});
        return;
      }
      
      // Show loading state
      isLoading = true;
      spinner.classList.remove('d-none');
      icon.classList.add('d-none');
      btn.disabled = true;
      
      // Make AJAX request
      fetch(`${url}?section=${section}&offset=${offset}`, {
        method: 'GET',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then(data => {
        if (data.desktop_html && data.mobile_html) {
          // Find containers
          const container = document.getElementById(`${section}-jobs-container`);
          if (!container) {
            throw new Error(`Container not found: ${section}-jobs-container`);
          }
          
          // Append desktop rows to table body
          const tableBody = container.querySelector('.job-table-body');
          if (tableBody) {
            tableBody.insertAdjacentHTML('beforeend', data.desktop_html);
          }
          
          // Append mobile cards to mobile container
          const mobileContainer = container.querySelector('.job-cards-container');
          if (mobileContainer) {
            mobileContainer.insertAdjacentHTML('beforeend', data.mobile_html);
          }
          
          // Update count badge
          const countBadge = document.getElementById(`${section}-count`);
          if (countBadge) {
            const currentCount = parseInt(countBadge.textContent);
            countBadge.textContent = currentCount + data.count;
          }
          
          // Update offset for next load
          btn.dataset.offset = offset + 5;
          
          // Hide button if no more items
          if (!data.has_more) {
            btn.style.display = 'none';
          }
          
          // Show "Show Less" button after first load more
          showShowLessButton(section);
        } else {
          throw new Error('No HTML returned from server');
        }
      })
      .catch(error => {
        console.error('Error loading more items:', error);
        
        // Remove any existing error messages
        const existingError = btn.parentElement.querySelector('.error-message');
        if (existingError) {
          existingError.remove();
        }
        
        // Show error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'text-danger small mt-2 error-message';
        errorDiv.textContent = 'Error loading more items. Please try again.';
        btn.parentElement.appendChild(errorDiv);
        
        // Remove error message after 5 seconds
        setTimeout(() => {
          if (errorDiv.parentElement) {
            errorDiv.remove();
          }
        }, 5000);
      })
      .finally(() => {
        // Hide loading state
        isLoading = false;
        spinner.classList.add('d-none');
        icon.classList.remove('d-none');
        btn.disabled = false;
      });
    }
    
    // Handle show less buttons
    if (e.target.classList.contains('show-less-btn') || e.target.closest('.show-less-btn')) {
      e.preventDefault();
      
      const btn = e.target.classList.contains('show-less-btn') ? e.target : e.target.closest('.show-less-btn');
      const section = btn.dataset.section;
      
      if (section) {
        showLessItems(section);
      }
    }
  });

  function showShowLessButton(section) {
    // Check if show less button already exists
    const existingBtn = document.querySelector(`[data-section="${section}"].show-less-btn`);
    if (existingBtn) return;
    
    // Find load more button
    const loadMoreBtn = document.querySelector(`[data-section="${section}"].load-more-btn`);
    if (!loadMoreBtn) return;
    
    const buttonContainer = loadMoreBtn.parentElement;
    
    // Create show less button
    const showLessBtn = document.createElement('button');
    showLessBtn.className = 'btn btn-outline-secondary btn-sm show-less-btn ms-2';
    showLessBtn.setAttribute('data-section', section);
    showLessBtn.innerHTML = '<i class="bi bi-dash-circle me-1"></i>Show Less';
    
    buttonContainer.appendChild(showLessBtn);
  }

  function showLessItems(section) {
    const container = document.getElementById(`${section}-jobs-container`);
    if (!container) {
      console.error(`Container not found: ${section}-jobs-container`);
      return;
    }
    
    const originalCount = originalCounts[section];
    if (originalCount === undefined) {
      console.error(`Original count not found for section: ${section}`);
      return;
    }
    
    // Handle desktop table rows
    const tableBody = container.querySelector('.job-table-body');
    if (tableBody) {
      const rows = tableBody.querySelectorAll('tr.job-row');
      rows.forEach((row, index) => {
        if (index >= originalCount) {
          row.style.display = 'none';
        } else {
          row.style.display = '';
        }
      });
    }
    
    // Handle mobile cards
    const mobileContainer = container.querySelector('.job-cards-container');
    if (mobileContainer) {
      const cards = mobileContainer.querySelectorAll('.job-card');
      cards.forEach((card, index) => {
        if (index >= originalCount) {
          card.style.display = 'none';
        } else {
          card.style.display = '';
        }
      });
    }
    
    // Update count badge back to original
    const countBadge = document.getElementById(`${section}-count`);
    if (countBadge) {
      countBadge.textContent = originalCount;
    }
    
    // Reset load more button
    const loadMoreBtn = document.querySelector(`[data-section="${section}"].load-more-btn`);
    if (loadMoreBtn) {
      loadMoreBtn.dataset.offset = '5';
      loadMoreBtn.style.display = 'inline-block';
    }
    
    // Remove show less button
    const showLessBtn = document.querySelector(`[data-section="${section}"].show-less-btn`);
    if (showLessBtn) {
      showLessBtn.remove();
    }
  }

  // Handle collapse icon rotation
  document.querySelectorAll('[data-bs-toggle="collapse"]').forEach(button => {
    button.addEventListener('click', function() {
      const icon = this.querySelector('i');
      if (!icon) return;
      
      setTimeout(() => {
        const targetSelector = this.getAttribute('data-bs-target');
        if (!targetSelector) return;
        
        const target = document.querySelector(targetSelector);
        if (!target) return;
        
        if (target.classList.contains('show')) {
          icon.style.transform = 'rotate(180deg)';
        } else {
          icon.style.transform = 'rotate(0deg)';
        }
      }, 150);
    });
  });
});
</script>

<style>
/* Smooth icon rotation */
.card-header i {
  transition: transform 0.3s ease;
}

/* Mobile responsive improvements */
@media (max-width: 768px) {
  .card-header h5 {
    font-size: 1rem;
  }
  
  .badge {
    font-size: 0.7rem;
  }
  
  .load-more-btn, .show-less-btn {
    font-size: 0.875rem;
  }
}

/* Loading animation */
.spinner-border-sm {
  width: 1rem;
  height: 1rem;
}

/* Button transitions */
.show-less-btn {
  transition: all 0.3s ease;
}

/* Error message styling */
.error-message {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}
</style>
{% endblock %}